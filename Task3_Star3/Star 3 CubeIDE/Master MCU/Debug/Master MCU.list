
Master MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c44  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08005d58  08005d58  00006d58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061ac  080061ac  000081d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080061ac  080061ac  000071ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061b4  080061b4  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061b4  080061b4  000071b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080061b8  080061b8  000071b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080061bc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  200001d4  08006390  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000544  08006390  00008544  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000086a4  00000000  00000000  000081fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000177f  00000000  00000000  000108a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a0  00000000  00000000  00012020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000694  00000000  00000000  000128c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a6f  00000000  00000000  00012f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a01d  00000000  00000000  0002a9c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083c80  00000000  00000000  000349e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b8660  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000347c  00000000  00000000  000b86a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000bbb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08005d3c 	.word	0x08005d3c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08005d3c 	.word	0x08005d3c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr
 8000d44:	0000      	movs	r0, r0
	...

08000d48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000d4c:	b08a      	sub	sp, #40	@ 0x28
 8000d4e:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d50:	f000 fc90 	bl	8001674 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d54:	f000 f9cc 	bl	80010f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d58:	f000 fa66 	bl	8001228 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d5c:	f000 fa04 	bl	8001168 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000d60:	f000 fa38 	bl	80011d4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // receiving the input from the virtual terminal
	  // #Page: 556 Chapter 38 HAL UART Generic Driver
	  HAL_UART_Receive(&huart1, UART_received_data, 1, HAL_MAX_DELAY);
 8000d64:	f04f 33ff 	mov.w	r3, #4294967295
 8000d68:	2201      	movs	r2, #1
 8000d6a:	490e      	ldr	r1, [pc, #56]	@ (8000da4 <main+0x5c>)
 8000d6c:	480e      	ldr	r0, [pc, #56]	@ (8000da8 <main+0x60>)
 8000d6e:	f001 ff51 	bl	8002c14 <HAL_UART_Receive>
	  // Input Validation
	  if(UART_received_data[0] < '1' || UART_received_data[0] > '5') {
 8000d72:	4b0c      	ldr	r3, [pc, #48]	@ (8000da4 <main+0x5c>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b30      	cmp	r3, #48	@ 0x30
 8000d78:	d903      	bls.n	8000d82 <main+0x3a>
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000da4 <main+0x5c>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b35      	cmp	r3, #53	@ 0x35
 8000d80:	d918      	bls.n	8000db4 <main+0x6c>
		  	snprintf(UART_message, sizeof(UART_message), "Please enter a valid input for the ID between 1-5 \r\n");
 8000d82:	4a0a      	ldr	r2, [pc, #40]	@ (8000dac <main+0x64>)
 8000d84:	2164      	movs	r1, #100	@ 0x64
 8000d86:	480a      	ldr	r0, [pc, #40]	@ (8000db0 <main+0x68>)
 8000d88:	f002 fe40 	bl	8003a0c <sniprintf>
	  		// #Page: 556 Chapter 38 HAL UART Generic Driver
	  		HAL_UART_Transmit(&huart1, (uint8_t*) UART_message, strlen(UART_message), 100);
 8000d8c:	4808      	ldr	r0, [pc, #32]	@ (8000db0 <main+0x68>)
 8000d8e:	f7ff f9df 	bl	8000150 <strlen>
 8000d92:	4603      	mov	r3, r0
 8000d94:	b29a      	uxth	r2, r3
 8000d96:	2364      	movs	r3, #100	@ 0x64
 8000d98:	4905      	ldr	r1, [pc, #20]	@ (8000db0 <main+0x68>)
 8000d9a:	4803      	ldr	r0, [pc, #12]	@ (8000da8 <main+0x60>)
 8000d9c:	f001 feaf 	bl	8002afe <HAL_UART_Transmit>
	  		continue;
 8000da0:	e1a3      	b.n	80010ea <main+0x3a2>
 8000da2:	bf00      	nop
 8000da4:	20000290 	.word	0x20000290
 8000da8:	20000248 	.word	0x20000248
 8000dac:	08005d58 	.word	0x08005d58
 8000db0:	20000294 	.word	0x20000294
	  		}
	  	else {
	  		// encoding the input
	  		int value = UART_received_data[0] - '0';
 8000db4:	4bb8      	ldr	r3, [pc, #736]	@ (8001098 <main+0x350>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	3b30      	subs	r3, #48	@ 0x30
 8000dba:	607b      	str	r3, [r7, #4]
	  		memset(SPI_Sent_data, 0, sizeof(SPI_Sent_data));
 8000dbc:	2208      	movs	r2, #8
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	48b6      	ldr	r0, [pc, #728]	@ (800109c <main+0x354>)
 8000dc2:	f002 fe9c 	bl	8003afe <memset>
	  		memset(SPI_Junk, 0, sizeof(SPI_Junk));
 8000dc6:	2208      	movs	r2, #8
 8000dc8:	2100      	movs	r1, #0
 8000dca:	48b5      	ldr	r0, [pc, #724]	@ (80010a0 <main+0x358>)
 8000dcc:	f002 fe97 	bl	8003afe <memset>
	  		SPI_Sent_data[0] = 0x10;
 8000dd0:	4bb2      	ldr	r3, [pc, #712]	@ (800109c <main+0x354>)
 8000dd2:	2210      	movs	r2, #16
 8000dd4:	701a      	strb	r2, [r3, #0]
	  		SPI_Sent_data[1] = value;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	4bb0      	ldr	r3, [pc, #704]	@ (800109c <main+0x354>)
 8000ddc:	705a      	strb	r2, [r3, #1]
	  		// First SPI to send the input to first slave
	  		// #Page: 50 Chapter 6 HAL System Driver
	  		HAL_Delay(1);
 8000dde:	2001      	movs	r0, #1
 8000de0:	f000 fcaa 	bl	8001738 <HAL_Delay>
	  		// #Page: 227 Chapter 20 HAL GPIO Generic Driver
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000de4:	2200      	movs	r2, #0
 8000de6:	2101      	movs	r1, #1
 8000de8:	48ae      	ldr	r0, [pc, #696]	@ (80010a4 <main+0x35c>)
 8000dea:	f000 ff29 	bl	8001c40 <HAL_GPIO_WritePin>
	  		// #Page: 452 Chapter 35 HAL SPI Generic Driver
	  		HAL_SPI_TransmitReceive(&hspi1, SPI_Sent_data, SPI_Junk, 8, 10);
 8000dee:	230a      	movs	r3, #10
 8000df0:	9300      	str	r3, [sp, #0]
 8000df2:	2308      	movs	r3, #8
 8000df4:	4aaa      	ldr	r2, [pc, #680]	@ (80010a0 <main+0x358>)
 8000df6:	49a9      	ldr	r1, [pc, #676]	@ (800109c <main+0x354>)
 8000df8:	48ab      	ldr	r0, [pc, #684]	@ (80010a8 <main+0x360>)
 8000dfa:	f001 fbcd 	bl	8002598 <HAL_SPI_TransmitReceive>
	  		// #Page: 227 Chapter 20 HAL GPIO Generic Driver
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	2101      	movs	r1, #1
 8000e02:	48a8      	ldr	r0, [pc, #672]	@ (80010a4 <main+0x35c>)
 8000e04:	f000 ff1c 	bl	8001c40 <HAL_GPIO_WritePin>
	  		// second SPI to transfer data from first to second slave
	  		// #Page: 50 Chapter 6 HAL System Driver
	  		HAL_Delay(10);
 8000e08:	200a      	movs	r0, #10
 8000e0a:	f000 fc95 	bl	8001738 <HAL_Delay>
	  		memset(SPI_Sent_data, 0, sizeof(SPI_Sent_data));
 8000e0e:	2208      	movs	r2, #8
 8000e10:	2100      	movs	r1, #0
 8000e12:	48a2      	ldr	r0, [pc, #648]	@ (800109c <main+0x354>)
 8000e14:	f002 fe73 	bl	8003afe <memset>
	  		memset(SPI_Junk, 0, sizeof(SPI_Junk));
 8000e18:	2208      	movs	r2, #8
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	48a0      	ldr	r0, [pc, #640]	@ (80010a0 <main+0x358>)
 8000e1e:	f002 fe6e 	bl	8003afe <memset>
	  		// #Page: 227 Chapter 20 HAL GPIO Generic Driver
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2101      	movs	r1, #1
 8000e26:	489f      	ldr	r0, [pc, #636]	@ (80010a4 <main+0x35c>)
 8000e28:	f000 ff0a 	bl	8001c40 <HAL_GPIO_WritePin>
	  		// #Page: 452 Chapter 35 HAL SPI Generic Driver
	  		HAL_SPI_TransmitReceive(&hspi1, SPI_Junk, SPI_Sent_data, 8, 10);
 8000e2c:	230a      	movs	r3, #10
 8000e2e:	9300      	str	r3, [sp, #0]
 8000e30:	2308      	movs	r3, #8
 8000e32:	4a9a      	ldr	r2, [pc, #616]	@ (800109c <main+0x354>)
 8000e34:	499a      	ldr	r1, [pc, #616]	@ (80010a0 <main+0x358>)
 8000e36:	489c      	ldr	r0, [pc, #624]	@ (80010a8 <main+0x360>)
 8000e38:	f001 fbae 	bl	8002598 <HAL_SPI_TransmitReceive>
	  		// #Page: 227 Chapter 20 HAL GPIO Generic Driver
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	2101      	movs	r1, #1
 8000e40:	4898      	ldr	r0, [pc, #608]	@ (80010a4 <main+0x35c>)
 8000e42:	f000 fefd 	bl	8001c40 <HAL_GPIO_WritePin>
	  		// Third SPI to receive the full encoded data from the second slave
	  		// #Page: 50 Chapter 6 HAL System Driver
	  		HAL_Delay(10);
 8000e46:	200a      	movs	r0, #10
 8000e48:	f000 fc76 	bl	8001738 <HAL_Delay>
	  		memset(SPI_Sent_data, 0, sizeof(SPI_Sent_data));
 8000e4c:	2208      	movs	r2, #8
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4892      	ldr	r0, [pc, #584]	@ (800109c <main+0x354>)
 8000e52:	f002 fe54 	bl	8003afe <memset>
	  		memset(SPI_Junk, 0, sizeof(SPI_Junk));
 8000e56:	2208      	movs	r2, #8
 8000e58:	2100      	movs	r1, #0
 8000e5a:	4891      	ldr	r0, [pc, #580]	@ (80010a0 <main+0x358>)
 8000e5c:	f002 fe4f 	bl	8003afe <memset>
	  		memset(Encoded_Readings, 0, sizeof(Encoded_Readings));
 8000e60:	2208      	movs	r2, #8
 8000e62:	2100      	movs	r1, #0
 8000e64:	4891      	ldr	r0, [pc, #580]	@ (80010ac <main+0x364>)
 8000e66:	f002 fe4a 	bl	8003afe <memset>
	  		// #Page: 227 Chapter 20 HAL GPIO Generic Driver
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	488d      	ldr	r0, [pc, #564]	@ (80010a4 <main+0x35c>)
 8000e70:	f000 fee6 	bl	8001c40 <HAL_GPIO_WritePin>
	  		// #Page: 452 Chapter 35 HAL SPI Generic Driver
	  		HAL_SPI_TransmitReceive(&hspi1, SPI_Junk, Encoded_Readings, 8, 10);
 8000e74:	230a      	movs	r3, #10
 8000e76:	9300      	str	r3, [sp, #0]
 8000e78:	2308      	movs	r3, #8
 8000e7a:	4a8c      	ldr	r2, [pc, #560]	@ (80010ac <main+0x364>)
 8000e7c:	4988      	ldr	r1, [pc, #544]	@ (80010a0 <main+0x358>)
 8000e7e:	488a      	ldr	r0, [pc, #552]	@ (80010a8 <main+0x360>)
 8000e80:	f001 fb8a 	bl	8002598 <HAL_SPI_TransmitReceive>
	  		// #Page: 227 Chapter 20 HAL GPIO Generic Driver
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000e84:	2201      	movs	r2, #1
 8000e86:	2101      	movs	r1, #1
 8000e88:	4886      	ldr	r0, [pc, #536]	@ (80010a4 <main+0x35c>)
 8000e8a:	f000 fed9 	bl	8001c40 <HAL_GPIO_WritePin>
	  		// data decoding
	  		analog_temp = (Encoded_Readings[2] << 4) | (Encoded_Readings[3] >> 4);
 8000e8e:	4b87      	ldr	r3, [pc, #540]	@ (80010ac <main+0x364>)
 8000e90:	789b      	ldrb	r3, [r3, #2]
 8000e92:	b21b      	sxth	r3, r3
 8000e94:	011b      	lsls	r3, r3, #4
 8000e96:	b21a      	sxth	r2, r3
 8000e98:	4b84      	ldr	r3, [pc, #528]	@ (80010ac <main+0x364>)
 8000e9a:	78db      	ldrb	r3, [r3, #3]
 8000e9c:	091b      	lsrs	r3, r3, #4
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	b21b      	sxth	r3, r3
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	b21b      	sxth	r3, r3
 8000ea6:	b29a      	uxth	r2, r3
 8000ea8:	4b81      	ldr	r3, [pc, #516]	@ (80010b0 <main+0x368>)
 8000eaa:	801a      	strh	r2, [r3, #0]
	  		analog_throttle = ((Encoded_Readings[3] & 0x0F) << 4) | (Encoded_Readings[4] >> 4);
 8000eac:	4b7f      	ldr	r3, [pc, #508]	@ (80010ac <main+0x364>)
 8000eae:	78db      	ldrb	r3, [r3, #3]
 8000eb0:	b25b      	sxtb	r3, r3
 8000eb2:	011b      	lsls	r3, r3, #4
 8000eb4:	b25a      	sxtb	r2, r3
 8000eb6:	4b7d      	ldr	r3, [pc, #500]	@ (80010ac <main+0x364>)
 8000eb8:	791b      	ldrb	r3, [r3, #4]
 8000eba:	091b      	lsrs	r3, r3, #4
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	b25b      	sxtb	r3, r3
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	b25b      	sxtb	r3, r3
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	4b7b      	ldr	r3, [pc, #492]	@ (80010b4 <main+0x36c>)
 8000ec8:	701a      	strb	r2, [r3, #0]
	  		Voltage_Level = ((Encoded_Readings[4] & 0x0F) << 8) | Encoded_Readings[5];
 8000eca:	4b78      	ldr	r3, [pc, #480]	@ (80010ac <main+0x364>)
 8000ecc:	791b      	ldrb	r3, [r3, #4]
 8000ece:	b21b      	sxth	r3, r3
 8000ed0:	021b      	lsls	r3, r3, #8
 8000ed2:	b21b      	sxth	r3, r3
 8000ed4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8000ed8:	b21a      	sxth	r2, r3
 8000eda:	4b74      	ldr	r3, [pc, #464]	@ (80010ac <main+0x364>)
 8000edc:	795b      	ldrb	r3, [r3, #5]
 8000ede:	b21b      	sxth	r3, r3
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	b21b      	sxth	r3, r3
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	4b74      	ldr	r3, [pc, #464]	@ (80010b8 <main+0x370>)
 8000ee8:	801a      	strh	r2, [r3, #0]
	  		Wheel_Speed = (Encoded_Readings[6] << 4) | (Encoded_Readings[7] >> 4);
 8000eea:	4b70      	ldr	r3, [pc, #448]	@ (80010ac <main+0x364>)
 8000eec:	799b      	ldrb	r3, [r3, #6]
 8000eee:	b21b      	sxth	r3, r3
 8000ef0:	011b      	lsls	r3, r3, #4
 8000ef2:	b21a      	sxth	r2, r3
 8000ef4:	4b6d      	ldr	r3, [pc, #436]	@ (80010ac <main+0x364>)
 8000ef6:	79db      	ldrb	r3, [r3, #7]
 8000ef8:	091b      	lsrs	r3, r3, #4
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	b21b      	sxth	r3, r3
 8000efe:	4313      	orrs	r3, r2
 8000f00:	b21b      	sxth	r3, r3
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	4b6d      	ldr	r3, [pc, #436]	@ (80010bc <main+0x374>)
 8000f06:	801a      	strh	r2, [r3, #0]
	  		final_temp = ((float)analog_temp / 4095.0) * 150.6;
 8000f08:	4b69      	ldr	r3, [pc, #420]	@ (80010b0 <main+0x368>)
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fec1 	bl	8000c94 <__aeabi_ui2f>
 8000f12:	4603      	mov	r3, r0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fa87 	bl	8000428 <__aeabi_f2d>
 8000f1a:	a357      	add	r3, pc, #348	@ (adr r3, 8001078 <main+0x330>)
 8000f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f20:	f7ff fc04 	bl	800072c <__aeabi_ddiv>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	4610      	mov	r0, r2
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	a354      	add	r3, pc, #336	@ (adr r3, 8001080 <main+0x338>)
 8000f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f32:	f7ff fad1 	bl	80004d8 <__aeabi_dmul>
 8000f36:	4602      	mov	r2, r0
 8000f38:	460b      	mov	r3, r1
 8000f3a:	4610      	mov	r0, r2
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f7ff fda3 	bl	8000a88 <__aeabi_d2f>
 8000f42:	4603      	mov	r3, r0
 8000f44:	4a5e      	ldr	r2, [pc, #376]	@ (80010c0 <main+0x378>)
 8000f46:	6013      	str	r3, [r2, #0]
	  		final_throttle_percent = (1.0 - ((float)analog_throttle / 255.0)) * 100.0;
 8000f48:	4b5a      	ldr	r3, [pc, #360]	@ (80010b4 <main+0x36c>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fea1 	bl	8000c94 <__aeabi_ui2f>
 8000f52:	4603      	mov	r3, r0
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff fa67 	bl	8000428 <__aeabi_f2d>
 8000f5a:	a34b      	add	r3, pc, #300	@ (adr r3, 8001088 <main+0x340>)
 8000f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f60:	f7ff fbe4 	bl	800072c <__aeabi_ddiv>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	f04f 0000 	mov.w	r0, #0
 8000f6c:	4955      	ldr	r1, [pc, #340]	@ (80010c4 <main+0x37c>)
 8000f6e:	f7ff f8fb 	bl	8000168 <__aeabi_dsub>
 8000f72:	4602      	mov	r2, r0
 8000f74:	460b      	mov	r3, r1
 8000f76:	4610      	mov	r0, r2
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f04f 0200 	mov.w	r2, #0
 8000f7e:	4b52      	ldr	r3, [pc, #328]	@ (80010c8 <main+0x380>)
 8000f80:	f7ff faaa 	bl	80004d8 <__aeabi_dmul>
 8000f84:	4602      	mov	r2, r0
 8000f86:	460b      	mov	r3, r1
 8000f88:	4610      	mov	r0, r2
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f7ff fd7c 	bl	8000a88 <__aeabi_d2f>
 8000f90:	4603      	mov	r3, r0
 8000f92:	4a4e      	ldr	r2, [pc, #312]	@ (80010cc <main+0x384>)
 8000f94:	6013      	str	r3, [r2, #0]
	  		final_voltage_level = ((float)Voltage_Level / 4095.0) * 24.0;
 8000f96:	4b48      	ldr	r3, [pc, #288]	@ (80010b8 <main+0x370>)
 8000f98:	881b      	ldrh	r3, [r3, #0]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fe7a 	bl	8000c94 <__aeabi_ui2f>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff fa40 	bl	8000428 <__aeabi_f2d>
 8000fa8:	a333      	add	r3, pc, #204	@ (adr r3, 8001078 <main+0x330>)
 8000faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fae:	f7ff fbbd 	bl	800072c <__aeabi_ddiv>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	4610      	mov	r0, r2
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	4b44      	ldr	r3, [pc, #272]	@ (80010d0 <main+0x388>)
 8000fc0:	f7ff fa8a 	bl	80004d8 <__aeabi_dmul>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4610      	mov	r0, r2
 8000fca:	4619      	mov	r1, r3
 8000fcc:	f7ff fd5c 	bl	8000a88 <__aeabi_d2f>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	4a40      	ldr	r2, [pc, #256]	@ (80010d4 <main+0x38c>)
 8000fd4:	6013      	str	r3, [r2, #0]
	  		final_wheel_speed = (int)round((Wheel_Speed / 4095.0) * 300);
 8000fd6:	4b39      	ldr	r3, [pc, #228]	@ (80010bc <main+0x374>)
 8000fd8:	881b      	ldrh	r3, [r3, #0]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fa12 	bl	8000404 <__aeabi_i2d>
 8000fe0:	a325      	add	r3, pc, #148	@ (adr r3, 8001078 <main+0x330>)
 8000fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe6:	f7ff fba1 	bl	800072c <__aeabi_ddiv>
 8000fea:	4602      	mov	r2, r0
 8000fec:	460b      	mov	r3, r1
 8000fee:	4610      	mov	r0, r2
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	a327      	add	r3, pc, #156	@ (adr r3, 8001090 <main+0x348>)
 8000ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff8:	f7ff fa6e 	bl	80004d8 <__aeabi_dmul>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	4610      	mov	r0, r2
 8001002:	4619      	mov	r1, r3
 8001004:	f004 fe54 	bl	8005cb0 <round>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	4610      	mov	r0, r2
 800100e:	4619      	mov	r1, r3
 8001010:	f7ff fd12 	bl	8000a38 <__aeabi_d2iz>
 8001014:	4603      	mov	r3, r0
 8001016:	4a30      	ldr	r2, [pc, #192]	@ (80010d8 <main+0x390>)
 8001018:	6013      	str	r3, [r2, #0]
	  		// formulating the message and sending to Virtual terminal for display
	  		snprintf(Decoded_message, sizeof(Decoded_message), "Case ID: %d Engine Temperature = %.1f °C | Throttle position = %.1f%% \r\n| Voltage Level: %.1f V | Wheel Speed: %d KM/h\r\n", value, final_temp, final_throttle_percent, final_voltage_level, final_wheel_speed);
 800101a:	4b29      	ldr	r3, [pc, #164]	@ (80010c0 <main+0x378>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fa02 	bl	8000428 <__aeabi_f2d>
 8001024:	4604      	mov	r4, r0
 8001026:	460d      	mov	r5, r1
 8001028:	4b28      	ldr	r3, [pc, #160]	@ (80010cc <main+0x384>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff f9fb 	bl	8000428 <__aeabi_f2d>
 8001032:	4680      	mov	r8, r0
 8001034:	4689      	mov	r9, r1
 8001036:	4b27      	ldr	r3, [pc, #156]	@ (80010d4 <main+0x38c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff f9f4 	bl	8000428 <__aeabi_f2d>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	4924      	ldr	r1, [pc, #144]	@ (80010d8 <main+0x390>)
 8001046:	6809      	ldr	r1, [r1, #0]
 8001048:	9106      	str	r1, [sp, #24]
 800104a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800104e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001052:	e9cd 4500 	strd	r4, r5, [sp]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a20      	ldr	r2, [pc, #128]	@ (80010dc <main+0x394>)
 800105a:	21c8      	movs	r1, #200	@ 0xc8
 800105c:	4820      	ldr	r0, [pc, #128]	@ (80010e0 <main+0x398>)
 800105e:	f002 fcd5 	bl	8003a0c <sniprintf>
	  		// #Page: 556 Chapter 38 HAL UART Generic Driver
	  		HAL_UART_Transmit(&huart1, (uint8_t*) Decoded_message, strlen(Decoded_message), 200);
 8001062:	481f      	ldr	r0, [pc, #124]	@ (80010e0 <main+0x398>)
 8001064:	f7ff f874 	bl	8000150 <strlen>
 8001068:	4603      	mov	r3, r0
 800106a:	b29a      	uxth	r2, r3
 800106c:	23c8      	movs	r3, #200	@ 0xc8
 800106e:	491c      	ldr	r1, [pc, #112]	@ (80010e0 <main+0x398>)
 8001070:	e038      	b.n	80010e4 <main+0x39c>
 8001072:	bf00      	nop
 8001074:	f3af 8000 	nop.w
 8001078:	00000000 	.word	0x00000000
 800107c:	40affe00 	.word	0x40affe00
 8001080:	33333333 	.word	0x33333333
 8001084:	4062d333 	.word	0x4062d333
 8001088:	00000000 	.word	0x00000000
 800108c:	406fe000 	.word	0x406fe000
 8001090:	00000000 	.word	0x00000000
 8001094:	4072c000 	.word	0x4072c000
 8001098:	20000290 	.word	0x20000290
 800109c:	200002f8 	.word	0x200002f8
 80010a0:	20000300 	.word	0x20000300
 80010a4:	40010c00 	.word	0x40010c00
 80010a8:	200001f0 	.word	0x200001f0
 80010ac:	20000320 	.word	0x20000320
 80010b0:	20000308 	.word	0x20000308
 80010b4:	2000030a 	.word	0x2000030a
 80010b8:	2000030c 	.word	0x2000030c
 80010bc:	2000030e 	.word	0x2000030e
 80010c0:	20000310 	.word	0x20000310
 80010c4:	3ff00000 	.word	0x3ff00000
 80010c8:	40590000 	.word	0x40590000
 80010cc:	20000314 	.word	0x20000314
 80010d0:	40380000 	.word	0x40380000
 80010d4:	20000318 	.word	0x20000318
 80010d8:	2000031c 	.word	0x2000031c
 80010dc:	08005d90 	.word	0x08005d90
 80010e0:	20000328 	.word	0x20000328
 80010e4:	4801      	ldr	r0, [pc, #4]	@ (80010ec <main+0x3a4>)
 80010e6:	f001 fd0a 	bl	8002afe <HAL_UART_Transmit>
	  HAL_UART_Receive(&huart1, UART_received_data, 1, HAL_MAX_DELAY);
 80010ea:	e63b      	b.n	8000d64 <main+0x1c>
 80010ec:	20000248 	.word	0x20000248

080010f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b090      	sub	sp, #64	@ 0x40
 80010f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f6:	f107 0318 	add.w	r3, r7, #24
 80010fa:	2228      	movs	r2, #40	@ 0x28
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f002 fcfd 	bl	8003afe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
 8001110:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001112:	2302      	movs	r3, #2
 8001114:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001116:	2301      	movs	r3, #1
 8001118:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800111a:	2310      	movs	r3, #16
 800111c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800111e:	2300      	movs	r3, #0
 8001120:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001122:	f107 0318 	add.w	r3, r7, #24
 8001126:	4618      	mov	r0, r3
 8001128:	f000 fda2 	bl	8001c70 <HAL_RCC_OscConfig>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001132:	f000 f8b7 	bl	80012a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001136:	230f      	movs	r3, #15
 8001138:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f001 f810 	bl	8002174 <HAL_RCC_ClockConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800115a:	f000 f8a3 	bl	80012a4 <Error_Handler>
  }
}
 800115e:	bf00      	nop
 8001160:	3740      	adds	r7, #64	@ 0x40
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800116c:	4b17      	ldr	r3, [pc, #92]	@ (80011cc <MX_SPI1_Init+0x64>)
 800116e:	4a18      	ldr	r2, [pc, #96]	@ (80011d0 <MX_SPI1_Init+0x68>)
 8001170:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001172:	4b16      	ldr	r3, [pc, #88]	@ (80011cc <MX_SPI1_Init+0x64>)
 8001174:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001178:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800117a:	4b14      	ldr	r3, [pc, #80]	@ (80011cc <MX_SPI1_Init+0x64>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001180:	4b12      	ldr	r3, [pc, #72]	@ (80011cc <MX_SPI1_Init+0x64>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001186:	4b11      	ldr	r3, [pc, #68]	@ (80011cc <MX_SPI1_Init+0x64>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800118c:	4b0f      	ldr	r3, [pc, #60]	@ (80011cc <MX_SPI1_Init+0x64>)
 800118e:	2200      	movs	r2, #0
 8001190:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001192:	4b0e      	ldr	r3, [pc, #56]	@ (80011cc <MX_SPI1_Init+0x64>)
 8001194:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001198:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800119a:	4b0c      	ldr	r3, [pc, #48]	@ (80011cc <MX_SPI1_Init+0x64>)
 800119c:	2228      	movs	r2, #40	@ 0x28
 800119e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011a0:	4b0a      	ldr	r3, [pc, #40]	@ (80011cc <MX_SPI1_Init+0x64>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011a6:	4b09      	ldr	r3, [pc, #36]	@ (80011cc <MX_SPI1_Init+0x64>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011ac:	4b07      	ldr	r3, [pc, #28]	@ (80011cc <MX_SPI1_Init+0x64>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011b2:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <MX_SPI1_Init+0x64>)
 80011b4:	220a      	movs	r2, #10
 80011b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011b8:	4804      	ldr	r0, [pc, #16]	@ (80011cc <MX_SPI1_Init+0x64>)
 80011ba:	f001 f969 	bl	8002490 <HAL_SPI_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011c4:	f000 f86e 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	200001f0 	.word	0x200001f0
 80011d0:	40013000 	.word	0x40013000

080011d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011d8:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <MX_USART1_UART_Init+0x4c>)
 80011da:	4a12      	ldr	r2, [pc, #72]	@ (8001224 <MX_USART1_UART_Init+0x50>)
 80011dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80011de:	4b10      	ldr	r3, [pc, #64]	@ (8001220 <MX_USART1_UART_Init+0x4c>)
 80011e0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80011e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001220 <MX_USART1_UART_Init+0x4c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001220 <MX_USART1_UART_Init+0x4c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001220 <MX_USART1_UART_Init+0x4c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011f8:	4b09      	ldr	r3, [pc, #36]	@ (8001220 <MX_USART1_UART_Init+0x4c>)
 80011fa:	220c      	movs	r2, #12
 80011fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011fe:	4b08      	ldr	r3, [pc, #32]	@ (8001220 <MX_USART1_UART_Init+0x4c>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001204:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <MX_USART1_UART_Init+0x4c>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800120a:	4805      	ldr	r0, [pc, #20]	@ (8001220 <MX_USART1_UART_Init+0x4c>)
 800120c:	f001 fc27 	bl	8002a5e <HAL_UART_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001216:	f000 f845 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000248 	.word	0x20000248
 8001224:	40013800 	.word	0x40013800

08001228 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122e:	f107 0308 	add.w	r3, r7, #8
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800123c:	4b17      	ldr	r3, [pc, #92]	@ (800129c <MX_GPIO_Init+0x74>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	4a16      	ldr	r2, [pc, #88]	@ (800129c <MX_GPIO_Init+0x74>)
 8001242:	f043 0304 	orr.w	r3, r3, #4
 8001246:	6193      	str	r3, [r2, #24]
 8001248:	4b14      	ldr	r3, [pc, #80]	@ (800129c <MX_GPIO_Init+0x74>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	f003 0304 	and.w	r3, r3, #4
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001254:	4b11      	ldr	r3, [pc, #68]	@ (800129c <MX_GPIO_Init+0x74>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	4a10      	ldr	r2, [pc, #64]	@ (800129c <MX_GPIO_Init+0x74>)
 800125a:	f043 0308 	orr.w	r3, r3, #8
 800125e:	6193      	str	r3, [r2, #24]
 8001260:	4b0e      	ldr	r3, [pc, #56]	@ (800129c <MX_GPIO_Init+0x74>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	f003 0308 	and.w	r3, r3, #8
 8001268:	603b      	str	r3, [r7, #0]
 800126a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800126c:	2201      	movs	r2, #1
 800126e:	2101      	movs	r1, #1
 8001270:	480b      	ldr	r0, [pc, #44]	@ (80012a0 <MX_GPIO_Init+0x78>)
 8001272:	f000 fce5 	bl	8001c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8001276:	2301      	movs	r3, #1
 8001278:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127a:	2301      	movs	r3, #1
 800127c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800127e:	2301      	movs	r3, #1
 8001280:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001282:	2302      	movs	r3, #2
 8001284:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001286:	f107 0308 	add.w	r3, r7, #8
 800128a:	4619      	mov	r1, r3
 800128c:	4804      	ldr	r0, [pc, #16]	@ (80012a0 <MX_GPIO_Init+0x78>)
 800128e:	f000 fb5b 	bl	8001948 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001292:	bf00      	nop
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40021000 	.word	0x40021000
 80012a0:	40010c00 	.word	0x40010c00

080012a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a8:	b672      	cpsid	i
}
 80012aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <Error_Handler+0x8>

080012b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012b6:	4b15      	ldr	r3, [pc, #84]	@ (800130c <HAL_MspInit+0x5c>)
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	4a14      	ldr	r2, [pc, #80]	@ (800130c <HAL_MspInit+0x5c>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6193      	str	r3, [r2, #24]
 80012c2:	4b12      	ldr	r3, [pc, #72]	@ (800130c <HAL_MspInit+0x5c>)
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ce:	4b0f      	ldr	r3, [pc, #60]	@ (800130c <HAL_MspInit+0x5c>)
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	4a0e      	ldr	r2, [pc, #56]	@ (800130c <HAL_MspInit+0x5c>)
 80012d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012d8:	61d3      	str	r3, [r2, #28]
 80012da:	4b0c      	ldr	r3, [pc, #48]	@ (800130c <HAL_MspInit+0x5c>)
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80012e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001310 <HAL_MspInit+0x60>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	4a04      	ldr	r2, [pc, #16]	@ (8001310 <HAL_MspInit+0x60>)
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001302:	bf00      	nop
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr
 800130c:	40021000 	.word	0x40021000
 8001310:	40010000 	.word	0x40010000

08001314 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 0310 	add.w	r3, r7, #16
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a1b      	ldr	r2, [pc, #108]	@ (800139c <HAL_SPI_MspInit+0x88>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d12f      	bne.n	8001394 <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001334:	4b1a      	ldr	r3, [pc, #104]	@ (80013a0 <HAL_SPI_MspInit+0x8c>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	4a19      	ldr	r2, [pc, #100]	@ (80013a0 <HAL_SPI_MspInit+0x8c>)
 800133a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800133e:	6193      	str	r3, [r2, #24]
 8001340:	4b17      	ldr	r3, [pc, #92]	@ (80013a0 <HAL_SPI_MspInit+0x8c>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134c:	4b14      	ldr	r3, [pc, #80]	@ (80013a0 <HAL_SPI_MspInit+0x8c>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	4a13      	ldr	r2, [pc, #76]	@ (80013a0 <HAL_SPI_MspInit+0x8c>)
 8001352:	f043 0304 	orr.w	r3, r3, #4
 8001356:	6193      	str	r3, [r2, #24]
 8001358:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <HAL_SPI_MspInit+0x8c>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001364:	23a0      	movs	r3, #160	@ 0xa0
 8001366:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2302      	movs	r3, #2
 800136a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800136c:	2303      	movs	r3, #3
 800136e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001370:	f107 0310 	add.w	r3, r7, #16
 8001374:	4619      	mov	r1, r3
 8001376:	480b      	ldr	r0, [pc, #44]	@ (80013a4 <HAL_SPI_MspInit+0x90>)
 8001378:	f000 fae6 	bl	8001948 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800137c:	2340      	movs	r3, #64	@ 0x40
 800137e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001388:	f107 0310 	add.w	r3, r7, #16
 800138c:	4619      	mov	r1, r3
 800138e:	4805      	ldr	r0, [pc, #20]	@ (80013a4 <HAL_SPI_MspInit+0x90>)
 8001390:	f000 fada 	bl	8001948 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001394:	bf00      	nop
 8001396:	3720      	adds	r7, #32
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40013000 	.word	0x40013000
 80013a0:	40021000 	.word	0x40021000
 80013a4:	40010800 	.word	0x40010800

080013a8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 0310 	add.w	r3, r7, #16
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001434 <HAL_UART_MspInit+0x8c>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d131      	bne.n	800142c <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001438 <HAL_UART_MspInit+0x90>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	4a1a      	ldr	r2, [pc, #104]	@ (8001438 <HAL_UART_MspInit+0x90>)
 80013ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013d2:	6193      	str	r3, [r2, #24]
 80013d4:	4b18      	ldr	r3, [pc, #96]	@ (8001438 <HAL_UART_MspInit+0x90>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e0:	4b15      	ldr	r3, [pc, #84]	@ (8001438 <HAL_UART_MspInit+0x90>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	4a14      	ldr	r2, [pc, #80]	@ (8001438 <HAL_UART_MspInit+0x90>)
 80013e6:	f043 0304 	orr.w	r3, r3, #4
 80013ea:	6193      	str	r3, [r2, #24]
 80013ec:	4b12      	ldr	r3, [pc, #72]	@ (8001438 <HAL_UART_MspInit+0x90>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	f003 0304 	and.w	r3, r3, #4
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fe:	2302      	movs	r3, #2
 8001400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001402:	2303      	movs	r3, #3
 8001404:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001406:	f107 0310 	add.w	r3, r7, #16
 800140a:	4619      	mov	r1, r3
 800140c:	480b      	ldr	r0, [pc, #44]	@ (800143c <HAL_UART_MspInit+0x94>)
 800140e:	f000 fa9b 	bl	8001948 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001412:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001416:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001420:	f107 0310 	add.w	r3, r7, #16
 8001424:	4619      	mov	r1, r3
 8001426:	4805      	ldr	r0, [pc, #20]	@ (800143c <HAL_UART_MspInit+0x94>)
 8001428:	f000 fa8e 	bl	8001948 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800142c:	bf00      	nop
 800142e:	3720      	adds	r7, #32
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40013800 	.word	0x40013800
 8001438:	40021000 	.word	0x40021000
 800143c:	40010800 	.word	0x40010800

08001440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001444:	bf00      	nop
 8001446:	e7fd      	b.n	8001444 <NMI_Handler+0x4>

08001448 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800144c:	bf00      	nop
 800144e:	e7fd      	b.n	800144c <HardFault_Handler+0x4>

08001450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001454:	bf00      	nop
 8001456:	e7fd      	b.n	8001454 <MemManage_Handler+0x4>

08001458 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800145c:	bf00      	nop
 800145e:	e7fd      	b.n	800145c <BusFault_Handler+0x4>

08001460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001464:	bf00      	nop
 8001466:	e7fd      	b.n	8001464 <UsageFault_Handler+0x4>

08001468 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr

08001474 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr

08001480 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr

0800148c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001490:	f000 f936 	bl	8001700 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}

08001498 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  return 1;
 800149c:	2301      	movs	r3, #1
}
 800149e:	4618      	mov	r0, r3
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr

080014a6 <_kill>:

int _kill(int pid, int sig)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
 80014ae:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014b0:	f002 fb78 	bl	8003ba4 <__errno>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2216      	movs	r2, #22
 80014b8:	601a      	str	r2, [r3, #0]
  return -1;
 80014ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <_exit>:

void _exit (int status)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014ce:	f04f 31ff 	mov.w	r1, #4294967295
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff ffe7 	bl	80014a6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014d8:	bf00      	nop
 80014da:	e7fd      	b.n	80014d8 <_exit+0x12>

080014dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	e00a      	b.n	8001504 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014ee:	f3af 8000 	nop.w
 80014f2:	4601      	mov	r1, r0
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	1c5a      	adds	r2, r3, #1
 80014f8:	60ba      	str	r2, [r7, #8]
 80014fa:	b2ca      	uxtb	r2, r1
 80014fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	3301      	adds	r3, #1
 8001502:	617b      	str	r3, [r7, #20]
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	429a      	cmp	r2, r3
 800150a:	dbf0      	blt.n	80014ee <_read+0x12>
  }

  return len;
 800150c:	687b      	ldr	r3, [r7, #4]
}
 800150e:	4618      	mov	r0, r3
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b086      	sub	sp, #24
 800151a:	af00      	add	r7, sp, #0
 800151c:	60f8      	str	r0, [r7, #12]
 800151e:	60b9      	str	r1, [r7, #8]
 8001520:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	e009      	b.n	800153c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	1c5a      	adds	r2, r3, #1
 800152c:	60ba      	str	r2, [r7, #8]
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	3301      	adds	r3, #1
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	697a      	ldr	r2, [r7, #20]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	429a      	cmp	r2, r3
 8001542:	dbf1      	blt.n	8001528 <_write+0x12>
  }
  return len;
 8001544:	687b      	ldr	r3, [r7, #4]
}
 8001546:	4618      	mov	r0, r3
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <_close>:

int _close(int file)
{
 800154e:	b480      	push	{r7}
 8001550:	b083      	sub	sp, #12
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001556:	f04f 33ff 	mov.w	r3, #4294967295
}
 800155a:	4618      	mov	r0, r3
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001574:	605a      	str	r2, [r3, #4]
  return 0;
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr

08001582 <_isatty>:

int _isatty(int file)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800158a:	2301      	movs	r3, #1
}
 800158c:	4618      	mov	r0, r3
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr

08001596 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001596:	b480      	push	{r7}
 8001598:	b085      	sub	sp, #20
 800159a:	af00      	add	r7, sp, #0
 800159c:	60f8      	str	r0, [r7, #12]
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr
	...

080015b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015b8:	4a14      	ldr	r2, [pc, #80]	@ (800160c <_sbrk+0x5c>)
 80015ba:	4b15      	ldr	r3, [pc, #84]	@ (8001610 <_sbrk+0x60>)
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015c4:	4b13      	ldr	r3, [pc, #76]	@ (8001614 <_sbrk+0x64>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d102      	bne.n	80015d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015cc:	4b11      	ldr	r3, [pc, #68]	@ (8001614 <_sbrk+0x64>)
 80015ce:	4a12      	ldr	r2, [pc, #72]	@ (8001618 <_sbrk+0x68>)
 80015d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015d2:	4b10      	ldr	r3, [pc, #64]	@ (8001614 <_sbrk+0x64>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d207      	bcs.n	80015f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015e0:	f002 fae0 	bl	8003ba4 <__errno>
 80015e4:	4603      	mov	r3, r0
 80015e6:	220c      	movs	r2, #12
 80015e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ea:	f04f 33ff 	mov.w	r3, #4294967295
 80015ee:	e009      	b.n	8001604 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015f0:	4b08      	ldr	r3, [pc, #32]	@ (8001614 <_sbrk+0x64>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015f6:	4b07      	ldr	r3, [pc, #28]	@ (8001614 <_sbrk+0x64>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4413      	add	r3, r2
 80015fe:	4a05      	ldr	r2, [pc, #20]	@ (8001614 <_sbrk+0x64>)
 8001600:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001602:	68fb      	ldr	r3, [r7, #12]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20002800 	.word	0x20002800
 8001610:	00000400 	.word	0x00000400
 8001614:	200003f0 	.word	0x200003f0
 8001618:	20000548 	.word	0x20000548

0800161c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr

08001628 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001628:	f7ff fff8 	bl	800161c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800162c:	480b      	ldr	r0, [pc, #44]	@ (800165c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800162e:	490c      	ldr	r1, [pc, #48]	@ (8001660 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001630:	4a0c      	ldr	r2, [pc, #48]	@ (8001664 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001634:	e002      	b.n	800163c <LoopCopyDataInit>

08001636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800163a:	3304      	adds	r3, #4

0800163c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800163c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800163e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001640:	d3f9      	bcc.n	8001636 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001642:	4a09      	ldr	r2, [pc, #36]	@ (8001668 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001644:	4c09      	ldr	r4, [pc, #36]	@ (800166c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001648:	e001      	b.n	800164e <LoopFillZerobss>

0800164a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800164a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800164c:	3204      	adds	r2, #4

0800164e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800164e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001650:	d3fb      	bcc.n	800164a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001652:	f002 faad 	bl	8003bb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001656:	f7ff fb77 	bl	8000d48 <main>
  bx lr
 800165a:	4770      	bx	lr
  ldr r0, =_sdata
 800165c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001660:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001664:	080061bc 	.word	0x080061bc
  ldr r2, =_sbss
 8001668:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800166c:	20000544 	.word	0x20000544

08001670 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001670:	e7fe      	b.n	8001670 <ADC1_2_IRQHandler>
	...

08001674 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001678:	4b08      	ldr	r3, [pc, #32]	@ (800169c <HAL_Init+0x28>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a07      	ldr	r2, [pc, #28]	@ (800169c <HAL_Init+0x28>)
 800167e:	f043 0310 	orr.w	r3, r3, #16
 8001682:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001684:	2003      	movs	r0, #3
 8001686:	f000 f92b 	bl	80018e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800168a:	200f      	movs	r0, #15
 800168c:	f000 f808 	bl	80016a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001690:	f7ff fe0e 	bl	80012b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40022000 	.word	0x40022000

080016a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016a8:	4b12      	ldr	r3, [pc, #72]	@ (80016f4 <HAL_InitTick+0x54>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4b12      	ldr	r3, [pc, #72]	@ (80016f8 <HAL_InitTick+0x58>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	4619      	mov	r1, r3
 80016b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 f935 	bl	800192e <HAL_SYSTICK_Config>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e00e      	b.n	80016ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b0f      	cmp	r3, #15
 80016d2:	d80a      	bhi.n	80016ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016d4:	2200      	movs	r2, #0
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	f04f 30ff 	mov.w	r0, #4294967295
 80016dc:	f000 f90b 	bl	80018f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016e0:	4a06      	ldr	r2, [pc, #24]	@ (80016fc <HAL_InitTick+0x5c>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
 80016e8:	e000      	b.n	80016ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000000 	.word	0x20000000
 80016f8:	20000008 	.word	0x20000008
 80016fc:	20000004 	.word	0x20000004

08001700 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001704:	4b05      	ldr	r3, [pc, #20]	@ (800171c <HAL_IncTick+0x1c>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	4b05      	ldr	r3, [pc, #20]	@ (8001720 <HAL_IncTick+0x20>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4413      	add	r3, r2
 8001710:	4a03      	ldr	r2, [pc, #12]	@ (8001720 <HAL_IncTick+0x20>)
 8001712:	6013      	str	r3, [r2, #0]
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr
 800171c:	20000008 	.word	0x20000008
 8001720:	200003f4 	.word	0x200003f4

08001724 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return uwTick;
 8001728:	4b02      	ldr	r3, [pc, #8]	@ (8001734 <HAL_GetTick+0x10>)
 800172a:	681b      	ldr	r3, [r3, #0]
}
 800172c:	4618      	mov	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr
 8001734:	200003f4 	.word	0x200003f4

08001738 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001740:	f7ff fff0 	bl	8001724 <HAL_GetTick>
 8001744:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001750:	d005      	beq.n	800175e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001752:	4b0a      	ldr	r3, [pc, #40]	@ (800177c <HAL_Delay+0x44>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	461a      	mov	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4413      	add	r3, r2
 800175c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800175e:	bf00      	nop
 8001760:	f7ff ffe0 	bl	8001724 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	429a      	cmp	r2, r3
 800176e:	d8f7      	bhi.n	8001760 <HAL_Delay+0x28>
  {
  }
}
 8001770:	bf00      	nop
 8001772:	bf00      	nop
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000008 	.word	0x20000008

08001780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001790:	4b0c      	ldr	r3, [pc, #48]	@ (80017c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800179c:	4013      	ands	r3, r2
 800179e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017b2:	4a04      	ldr	r2, [pc, #16]	@ (80017c4 <__NVIC_SetPriorityGrouping+0x44>)
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	60d3      	str	r3, [r2, #12]
}
 80017b8:	bf00      	nop
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017cc:	4b04      	ldr	r3, [pc, #16]	@ (80017e0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	0a1b      	lsrs	r3, r3, #8
 80017d2:	f003 0307 	and.w	r3, r3, #7
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	6039      	str	r1, [r7, #0]
 80017ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	db0a      	blt.n	800180e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	490c      	ldr	r1, [pc, #48]	@ (8001830 <__NVIC_SetPriority+0x4c>)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	0112      	lsls	r2, r2, #4
 8001804:	b2d2      	uxtb	r2, r2
 8001806:	440b      	add	r3, r1
 8001808:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800180c:	e00a      	b.n	8001824 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	b2da      	uxtb	r2, r3
 8001812:	4908      	ldr	r1, [pc, #32]	@ (8001834 <__NVIC_SetPriority+0x50>)
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	f003 030f 	and.w	r3, r3, #15
 800181a:	3b04      	subs	r3, #4
 800181c:	0112      	lsls	r2, r2, #4
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	440b      	add	r3, r1
 8001822:	761a      	strb	r2, [r3, #24]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	bc80      	pop	{r7}
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000e100 	.word	0xe000e100
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001838:	b480      	push	{r7}
 800183a:	b089      	sub	sp, #36	@ 0x24
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f1c3 0307 	rsb	r3, r3, #7
 8001852:	2b04      	cmp	r3, #4
 8001854:	bf28      	it	cs
 8001856:	2304      	movcs	r3, #4
 8001858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	3304      	adds	r3, #4
 800185e:	2b06      	cmp	r3, #6
 8001860:	d902      	bls.n	8001868 <NVIC_EncodePriority+0x30>
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3b03      	subs	r3, #3
 8001866:	e000      	b.n	800186a <NVIC_EncodePriority+0x32>
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800186c:	f04f 32ff 	mov.w	r2, #4294967295
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43da      	mvns	r2, r3
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	401a      	ands	r2, r3
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001880:	f04f 31ff 	mov.w	r1, #4294967295
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	fa01 f303 	lsl.w	r3, r1, r3
 800188a:	43d9      	mvns	r1, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001890:	4313      	orrs	r3, r2
         );
}
 8001892:	4618      	mov	r0, r3
 8001894:	3724      	adds	r7, #36	@ 0x24
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr

0800189c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018ac:	d301      	bcc.n	80018b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ae:	2301      	movs	r3, #1
 80018b0:	e00f      	b.n	80018d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018b2:	4a0a      	ldr	r2, [pc, #40]	@ (80018dc <SysTick_Config+0x40>)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ba:	210f      	movs	r1, #15
 80018bc:	f04f 30ff 	mov.w	r0, #4294967295
 80018c0:	f7ff ff90 	bl	80017e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c4:	4b05      	ldr	r3, [pc, #20]	@ (80018dc <SysTick_Config+0x40>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ca:	4b04      	ldr	r3, [pc, #16]	@ (80018dc <SysTick_Config+0x40>)
 80018cc:	2207      	movs	r2, #7
 80018ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	e000e010 	.word	0xe000e010

080018e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff ff49 	bl	8001780 <__NVIC_SetPriorityGrouping>
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b086      	sub	sp, #24
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	4603      	mov	r3, r0
 80018fe:	60b9      	str	r1, [r7, #8]
 8001900:	607a      	str	r2, [r7, #4]
 8001902:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001908:	f7ff ff5e 	bl	80017c8 <__NVIC_GetPriorityGrouping>
 800190c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	68b9      	ldr	r1, [r7, #8]
 8001912:	6978      	ldr	r0, [r7, #20]
 8001914:	f7ff ff90 	bl	8001838 <NVIC_EncodePriority>
 8001918:	4602      	mov	r2, r0
 800191a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800191e:	4611      	mov	r1, r2
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff ff5f 	bl	80017e4 <__NVIC_SetPriority>
}
 8001926:	bf00      	nop
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7ff ffb0 	bl	800189c <SysTick_Config>
 800193c:	4603      	mov	r3, r0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
	...

08001948 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001948:	b480      	push	{r7}
 800194a:	b08b      	sub	sp, #44	@ 0x2c
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001952:	2300      	movs	r3, #0
 8001954:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001956:	2300      	movs	r3, #0
 8001958:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800195a:	e161      	b.n	8001c20 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800195c:	2201      	movs	r2, #1
 800195e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	69fa      	ldr	r2, [r7, #28]
 800196c:	4013      	ands	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	429a      	cmp	r2, r3
 8001976:	f040 8150 	bne.w	8001c1a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	4a97      	ldr	r2, [pc, #604]	@ (8001bdc <HAL_GPIO_Init+0x294>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d05e      	beq.n	8001a42 <HAL_GPIO_Init+0xfa>
 8001984:	4a95      	ldr	r2, [pc, #596]	@ (8001bdc <HAL_GPIO_Init+0x294>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d875      	bhi.n	8001a76 <HAL_GPIO_Init+0x12e>
 800198a:	4a95      	ldr	r2, [pc, #596]	@ (8001be0 <HAL_GPIO_Init+0x298>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d058      	beq.n	8001a42 <HAL_GPIO_Init+0xfa>
 8001990:	4a93      	ldr	r2, [pc, #588]	@ (8001be0 <HAL_GPIO_Init+0x298>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d86f      	bhi.n	8001a76 <HAL_GPIO_Init+0x12e>
 8001996:	4a93      	ldr	r2, [pc, #588]	@ (8001be4 <HAL_GPIO_Init+0x29c>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d052      	beq.n	8001a42 <HAL_GPIO_Init+0xfa>
 800199c:	4a91      	ldr	r2, [pc, #580]	@ (8001be4 <HAL_GPIO_Init+0x29c>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d869      	bhi.n	8001a76 <HAL_GPIO_Init+0x12e>
 80019a2:	4a91      	ldr	r2, [pc, #580]	@ (8001be8 <HAL_GPIO_Init+0x2a0>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d04c      	beq.n	8001a42 <HAL_GPIO_Init+0xfa>
 80019a8:	4a8f      	ldr	r2, [pc, #572]	@ (8001be8 <HAL_GPIO_Init+0x2a0>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d863      	bhi.n	8001a76 <HAL_GPIO_Init+0x12e>
 80019ae:	4a8f      	ldr	r2, [pc, #572]	@ (8001bec <HAL_GPIO_Init+0x2a4>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d046      	beq.n	8001a42 <HAL_GPIO_Init+0xfa>
 80019b4:	4a8d      	ldr	r2, [pc, #564]	@ (8001bec <HAL_GPIO_Init+0x2a4>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d85d      	bhi.n	8001a76 <HAL_GPIO_Init+0x12e>
 80019ba:	2b12      	cmp	r3, #18
 80019bc:	d82a      	bhi.n	8001a14 <HAL_GPIO_Init+0xcc>
 80019be:	2b12      	cmp	r3, #18
 80019c0:	d859      	bhi.n	8001a76 <HAL_GPIO_Init+0x12e>
 80019c2:	a201      	add	r2, pc, #4	@ (adr r2, 80019c8 <HAL_GPIO_Init+0x80>)
 80019c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c8:	08001a43 	.word	0x08001a43
 80019cc:	08001a1d 	.word	0x08001a1d
 80019d0:	08001a2f 	.word	0x08001a2f
 80019d4:	08001a71 	.word	0x08001a71
 80019d8:	08001a77 	.word	0x08001a77
 80019dc:	08001a77 	.word	0x08001a77
 80019e0:	08001a77 	.word	0x08001a77
 80019e4:	08001a77 	.word	0x08001a77
 80019e8:	08001a77 	.word	0x08001a77
 80019ec:	08001a77 	.word	0x08001a77
 80019f0:	08001a77 	.word	0x08001a77
 80019f4:	08001a77 	.word	0x08001a77
 80019f8:	08001a77 	.word	0x08001a77
 80019fc:	08001a77 	.word	0x08001a77
 8001a00:	08001a77 	.word	0x08001a77
 8001a04:	08001a77 	.word	0x08001a77
 8001a08:	08001a77 	.word	0x08001a77
 8001a0c:	08001a25 	.word	0x08001a25
 8001a10:	08001a39 	.word	0x08001a39
 8001a14:	4a76      	ldr	r2, [pc, #472]	@ (8001bf0 <HAL_GPIO_Init+0x2a8>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d013      	beq.n	8001a42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a1a:	e02c      	b.n	8001a76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	623b      	str	r3, [r7, #32]
          break;
 8001a22:	e029      	b.n	8001a78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	3304      	adds	r3, #4
 8001a2a:	623b      	str	r3, [r7, #32]
          break;
 8001a2c:	e024      	b.n	8001a78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	3308      	adds	r3, #8
 8001a34:	623b      	str	r3, [r7, #32]
          break;
 8001a36:	e01f      	b.n	8001a78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	330c      	adds	r3, #12
 8001a3e:	623b      	str	r3, [r7, #32]
          break;
 8001a40:	e01a      	b.n	8001a78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d102      	bne.n	8001a50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a4a:	2304      	movs	r3, #4
 8001a4c:	623b      	str	r3, [r7, #32]
          break;
 8001a4e:	e013      	b.n	8001a78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d105      	bne.n	8001a64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a58:	2308      	movs	r3, #8
 8001a5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	69fa      	ldr	r2, [r7, #28]
 8001a60:	611a      	str	r2, [r3, #16]
          break;
 8001a62:	e009      	b.n	8001a78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a64:	2308      	movs	r3, #8
 8001a66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	69fa      	ldr	r2, [r7, #28]
 8001a6c:	615a      	str	r2, [r3, #20]
          break;
 8001a6e:	e003      	b.n	8001a78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a70:	2300      	movs	r3, #0
 8001a72:	623b      	str	r3, [r7, #32]
          break;
 8001a74:	e000      	b.n	8001a78 <HAL_GPIO_Init+0x130>
          break;
 8001a76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	2bff      	cmp	r3, #255	@ 0xff
 8001a7c:	d801      	bhi.n	8001a82 <HAL_GPIO_Init+0x13a>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	e001      	b.n	8001a86 <HAL_GPIO_Init+0x13e>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3304      	adds	r3, #4
 8001a86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	2bff      	cmp	r3, #255	@ 0xff
 8001a8c:	d802      	bhi.n	8001a94 <HAL_GPIO_Init+0x14c>
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	e002      	b.n	8001a9a <HAL_GPIO_Init+0x152>
 8001a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a96:	3b08      	subs	r3, #8
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	210f      	movs	r1, #15
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	401a      	ands	r2, r3
 8001aac:	6a39      	ldr	r1, [r7, #32]
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f000 80a9 	beq.w	8001c1a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ac8:	4b4a      	ldr	r3, [pc, #296]	@ (8001bf4 <HAL_GPIO_Init+0x2ac>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	4a49      	ldr	r2, [pc, #292]	@ (8001bf4 <HAL_GPIO_Init+0x2ac>)
 8001ace:	f043 0301 	orr.w	r3, r3, #1
 8001ad2:	6193      	str	r3, [r2, #24]
 8001ad4:	4b47      	ldr	r3, [pc, #284]	@ (8001bf4 <HAL_GPIO_Init+0x2ac>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ae0:	4a45      	ldr	r2, [pc, #276]	@ (8001bf8 <HAL_GPIO_Init+0x2b0>)
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae4:	089b      	lsrs	r3, r3, #2
 8001ae6:	3302      	adds	r3, #2
 8001ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af0:	f003 0303 	and.w	r3, r3, #3
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	220f      	movs	r2, #15
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	4013      	ands	r3, r2
 8001b02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a3d      	ldr	r2, [pc, #244]	@ (8001bfc <HAL_GPIO_Init+0x2b4>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d00d      	beq.n	8001b28 <HAL_GPIO_Init+0x1e0>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a3c      	ldr	r2, [pc, #240]	@ (8001c00 <HAL_GPIO_Init+0x2b8>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d007      	beq.n	8001b24 <HAL_GPIO_Init+0x1dc>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a3b      	ldr	r2, [pc, #236]	@ (8001c04 <HAL_GPIO_Init+0x2bc>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d101      	bne.n	8001b20 <HAL_GPIO_Init+0x1d8>
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	e004      	b.n	8001b2a <HAL_GPIO_Init+0x1e2>
 8001b20:	2303      	movs	r3, #3
 8001b22:	e002      	b.n	8001b2a <HAL_GPIO_Init+0x1e2>
 8001b24:	2301      	movs	r3, #1
 8001b26:	e000      	b.n	8001b2a <HAL_GPIO_Init+0x1e2>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b2c:	f002 0203 	and.w	r2, r2, #3
 8001b30:	0092      	lsls	r2, r2, #2
 8001b32:	4093      	lsls	r3, r2
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b3a:	492f      	ldr	r1, [pc, #188]	@ (8001bf8 <HAL_GPIO_Init+0x2b0>)
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3e:	089b      	lsrs	r3, r3, #2
 8001b40:	3302      	adds	r3, #2
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d006      	beq.n	8001b62 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b54:	4b2c      	ldr	r3, [pc, #176]	@ (8001c08 <HAL_GPIO_Init+0x2c0>)
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	492b      	ldr	r1, [pc, #172]	@ (8001c08 <HAL_GPIO_Init+0x2c0>)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	608b      	str	r3, [r1, #8]
 8001b60:	e006      	b.n	8001b70 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b62:	4b29      	ldr	r3, [pc, #164]	@ (8001c08 <HAL_GPIO_Init+0x2c0>)
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	4927      	ldr	r1, [pc, #156]	@ (8001c08 <HAL_GPIO_Init+0x2c0>)
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d006      	beq.n	8001b8a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b7c:	4b22      	ldr	r3, [pc, #136]	@ (8001c08 <HAL_GPIO_Init+0x2c0>)
 8001b7e:	68da      	ldr	r2, [r3, #12]
 8001b80:	4921      	ldr	r1, [pc, #132]	@ (8001c08 <HAL_GPIO_Init+0x2c0>)
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	60cb      	str	r3, [r1, #12]
 8001b88:	e006      	b.n	8001b98 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b8a:	4b1f      	ldr	r3, [pc, #124]	@ (8001c08 <HAL_GPIO_Init+0x2c0>)
 8001b8c:	68da      	ldr	r2, [r3, #12]
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	43db      	mvns	r3, r3
 8001b92:	491d      	ldr	r1, [pc, #116]	@ (8001c08 <HAL_GPIO_Init+0x2c0>)
 8001b94:	4013      	ands	r3, r2
 8001b96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d006      	beq.n	8001bb2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ba4:	4b18      	ldr	r3, [pc, #96]	@ (8001c08 <HAL_GPIO_Init+0x2c0>)
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	4917      	ldr	r1, [pc, #92]	@ (8001c08 <HAL_GPIO_Init+0x2c0>)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	604b      	str	r3, [r1, #4]
 8001bb0:	e006      	b.n	8001bc0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bb2:	4b15      	ldr	r3, [pc, #84]	@ (8001c08 <HAL_GPIO_Init+0x2c0>)
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	4913      	ldr	r1, [pc, #76]	@ (8001c08 <HAL_GPIO_Init+0x2c0>)
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d01f      	beq.n	8001c0c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bcc:	4b0e      	ldr	r3, [pc, #56]	@ (8001c08 <HAL_GPIO_Init+0x2c0>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	490d      	ldr	r1, [pc, #52]	@ (8001c08 <HAL_GPIO_Init+0x2c0>)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	600b      	str	r3, [r1, #0]
 8001bd8:	e01f      	b.n	8001c1a <HAL_GPIO_Init+0x2d2>
 8001bda:	bf00      	nop
 8001bdc:	10320000 	.word	0x10320000
 8001be0:	10310000 	.word	0x10310000
 8001be4:	10220000 	.word	0x10220000
 8001be8:	10210000 	.word	0x10210000
 8001bec:	10120000 	.word	0x10120000
 8001bf0:	10110000 	.word	0x10110000
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	40010000 	.word	0x40010000
 8001bfc:	40010800 	.word	0x40010800
 8001c00:	40010c00 	.word	0x40010c00
 8001c04:	40011000 	.word	0x40011000
 8001c08:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c3c <HAL_GPIO_Init+0x2f4>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	43db      	mvns	r3, r3
 8001c14:	4909      	ldr	r1, [pc, #36]	@ (8001c3c <HAL_GPIO_Init+0x2f4>)
 8001c16:	4013      	ands	r3, r2
 8001c18:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c26:	fa22 f303 	lsr.w	r3, r2, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f47f ae96 	bne.w	800195c <HAL_GPIO_Init+0x14>
  }
}
 8001c30:	bf00      	nop
 8001c32:	bf00      	nop
 8001c34:	372c      	adds	r7, #44	@ 0x2c
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr
 8001c3c:	40010400 	.word	0x40010400

08001c40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	807b      	strh	r3, [r7, #2]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c50:	787b      	ldrb	r3, [r7, #1]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c56:	887a      	ldrh	r2, [r7, #2]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c5c:	e003      	b.n	8001c66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c5e:	887b      	ldrh	r3, [r7, #2]
 8001c60:	041a      	lsls	r2, r3, #16
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	611a      	str	r2, [r3, #16]
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr

08001c70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e272      	b.n	8002168 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f000 8087 	beq.w	8001d9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c90:	4b92      	ldr	r3, [pc, #584]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 030c 	and.w	r3, r3, #12
 8001c98:	2b04      	cmp	r3, #4
 8001c9a:	d00c      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c9c:	4b8f      	ldr	r3, [pc, #572]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 030c 	and.w	r3, r3, #12
 8001ca4:	2b08      	cmp	r3, #8
 8001ca6:	d112      	bne.n	8001cce <HAL_RCC_OscConfig+0x5e>
 8001ca8:	4b8c      	ldr	r3, [pc, #560]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cb4:	d10b      	bne.n	8001cce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb6:	4b89      	ldr	r3, [pc, #548]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d06c      	beq.n	8001d9c <HAL_RCC_OscConfig+0x12c>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d168      	bne.n	8001d9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e24c      	b.n	8002168 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cd6:	d106      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x76>
 8001cd8:	4b80      	ldr	r3, [pc, #512]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a7f      	ldr	r2, [pc, #508]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001cde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ce2:	6013      	str	r3, [r2, #0]
 8001ce4:	e02e      	b.n	8001d44 <HAL_RCC_OscConfig+0xd4>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10c      	bne.n	8001d08 <HAL_RCC_OscConfig+0x98>
 8001cee:	4b7b      	ldr	r3, [pc, #492]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a7a      	ldr	r2, [pc, #488]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	4b78      	ldr	r3, [pc, #480]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a77      	ldr	r2, [pc, #476]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001d00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d04:	6013      	str	r3, [r2, #0]
 8001d06:	e01d      	b.n	8001d44 <HAL_RCC_OscConfig+0xd4>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d10:	d10c      	bne.n	8001d2c <HAL_RCC_OscConfig+0xbc>
 8001d12:	4b72      	ldr	r3, [pc, #456]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a71      	ldr	r2, [pc, #452]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001d18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	4b6f      	ldr	r3, [pc, #444]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a6e      	ldr	r2, [pc, #440]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001d24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	e00b      	b.n	8001d44 <HAL_RCC_OscConfig+0xd4>
 8001d2c:	4b6b      	ldr	r3, [pc, #428]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a6a      	ldr	r2, [pc, #424]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001d32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d36:	6013      	str	r3, [r2, #0]
 8001d38:	4b68      	ldr	r3, [pc, #416]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a67      	ldr	r2, [pc, #412]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001d3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d013      	beq.n	8001d74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4c:	f7ff fcea 	bl	8001724 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d54:	f7ff fce6 	bl	8001724 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b64      	cmp	r3, #100	@ 0x64
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e200      	b.n	8002168 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d66:	4b5d      	ldr	r3, [pc, #372]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0f0      	beq.n	8001d54 <HAL_RCC_OscConfig+0xe4>
 8001d72:	e014      	b.n	8001d9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d74:	f7ff fcd6 	bl	8001724 <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d7c:	f7ff fcd2 	bl	8001724 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b64      	cmp	r3, #100	@ 0x64
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e1ec      	b.n	8002168 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d8e:	4b53      	ldr	r3, [pc, #332]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f0      	bne.n	8001d7c <HAL_RCC_OscConfig+0x10c>
 8001d9a:	e000      	b.n	8001d9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d063      	beq.n	8001e72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001daa:	4b4c      	ldr	r3, [pc, #304]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f003 030c 	and.w	r3, r3, #12
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00b      	beq.n	8001dce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001db6:	4b49      	ldr	r3, [pc, #292]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f003 030c 	and.w	r3, r3, #12
 8001dbe:	2b08      	cmp	r3, #8
 8001dc0:	d11c      	bne.n	8001dfc <HAL_RCC_OscConfig+0x18c>
 8001dc2:	4b46      	ldr	r3, [pc, #280]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d116      	bne.n	8001dfc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dce:	4b43      	ldr	r3, [pc, #268]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d005      	beq.n	8001de6 <HAL_RCC_OscConfig+0x176>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d001      	beq.n	8001de6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e1c0      	b.n	8002168 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de6:	4b3d      	ldr	r3, [pc, #244]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	4939      	ldr	r1, [pc, #228]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dfa:	e03a      	b.n	8001e72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d020      	beq.n	8001e46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e04:	4b36      	ldr	r3, [pc, #216]	@ (8001ee0 <HAL_RCC_OscConfig+0x270>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0a:	f7ff fc8b 	bl	8001724 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e12:	f7ff fc87 	bl	8001724 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e1a1      	b.n	8002168 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e24:	4b2d      	ldr	r3, [pc, #180]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0f0      	beq.n	8001e12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e30:	4b2a      	ldr	r3, [pc, #168]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	695b      	ldr	r3, [r3, #20]
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	4927      	ldr	r1, [pc, #156]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	600b      	str	r3, [r1, #0]
 8001e44:	e015      	b.n	8001e72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e46:	4b26      	ldr	r3, [pc, #152]	@ (8001ee0 <HAL_RCC_OscConfig+0x270>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4c:	f7ff fc6a 	bl	8001724 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e54:	f7ff fc66 	bl	8001724 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e180      	b.n	8002168 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e66:	4b1d      	ldr	r3, [pc, #116]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f0      	bne.n	8001e54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0308 	and.w	r3, r3, #8
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d03a      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d019      	beq.n	8001eba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e86:	4b17      	ldr	r3, [pc, #92]	@ (8001ee4 <HAL_RCC_OscConfig+0x274>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e8c:	f7ff fc4a 	bl	8001724 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e94:	f7ff fc46 	bl	8001724 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e160      	b.n	8002168 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8001edc <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0f0      	beq.n	8001e94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001eb2:	2001      	movs	r0, #1
 8001eb4:	f000 face 	bl	8002454 <RCC_Delay>
 8001eb8:	e01c      	b.n	8001ef4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eba:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee4 <HAL_RCC_OscConfig+0x274>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec0:	f7ff fc30 	bl	8001724 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec6:	e00f      	b.n	8001ee8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec8:	f7ff fc2c 	bl	8001724 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d908      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e146      	b.n	8002168 <HAL_RCC_OscConfig+0x4f8>
 8001eda:	bf00      	nop
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	42420000 	.word	0x42420000
 8001ee4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ee8:	4b92      	ldr	r3, [pc, #584]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8001eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1e9      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f000 80a6 	beq.w	800204e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f02:	2300      	movs	r3, #0
 8001f04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f06:	4b8b      	ldr	r3, [pc, #556]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10d      	bne.n	8001f2e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f12:	4b88      	ldr	r3, [pc, #544]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	4a87      	ldr	r2, [pc, #540]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8001f18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f1c:	61d3      	str	r3, [r2, #28]
 8001f1e:	4b85      	ldr	r3, [pc, #532]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f26:	60bb      	str	r3, [r7, #8]
 8001f28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2e:	4b82      	ldr	r3, [pc, #520]	@ (8002138 <HAL_RCC_OscConfig+0x4c8>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d118      	bne.n	8001f6c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f3a:	4b7f      	ldr	r3, [pc, #508]	@ (8002138 <HAL_RCC_OscConfig+0x4c8>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a7e      	ldr	r2, [pc, #504]	@ (8002138 <HAL_RCC_OscConfig+0x4c8>)
 8001f40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f46:	f7ff fbed 	bl	8001724 <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f4c:	e008      	b.n	8001f60 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f4e:	f7ff fbe9 	bl	8001724 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b64      	cmp	r3, #100	@ 0x64
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e103      	b.n	8002168 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f60:	4b75      	ldr	r3, [pc, #468]	@ (8002138 <HAL_RCC_OscConfig+0x4c8>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0f0      	beq.n	8001f4e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d106      	bne.n	8001f82 <HAL_RCC_OscConfig+0x312>
 8001f74:	4b6f      	ldr	r3, [pc, #444]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	4a6e      	ldr	r2, [pc, #440]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	6213      	str	r3, [r2, #32]
 8001f80:	e02d      	b.n	8001fde <HAL_RCC_OscConfig+0x36e>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10c      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x334>
 8001f8a:	4b6a      	ldr	r3, [pc, #424]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	4a69      	ldr	r2, [pc, #420]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8001f90:	f023 0301 	bic.w	r3, r3, #1
 8001f94:	6213      	str	r3, [r2, #32]
 8001f96:	4b67      	ldr	r3, [pc, #412]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	4a66      	ldr	r2, [pc, #408]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8001f9c:	f023 0304 	bic.w	r3, r3, #4
 8001fa0:	6213      	str	r3, [r2, #32]
 8001fa2:	e01c      	b.n	8001fde <HAL_RCC_OscConfig+0x36e>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	2b05      	cmp	r3, #5
 8001faa:	d10c      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x356>
 8001fac:	4b61      	ldr	r3, [pc, #388]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	4a60      	ldr	r2, [pc, #384]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8001fb2:	f043 0304 	orr.w	r3, r3, #4
 8001fb6:	6213      	str	r3, [r2, #32]
 8001fb8:	4b5e      	ldr	r3, [pc, #376]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	4a5d      	ldr	r2, [pc, #372]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8001fbe:	f043 0301 	orr.w	r3, r3, #1
 8001fc2:	6213      	str	r3, [r2, #32]
 8001fc4:	e00b      	b.n	8001fde <HAL_RCC_OscConfig+0x36e>
 8001fc6:	4b5b      	ldr	r3, [pc, #364]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	4a5a      	ldr	r2, [pc, #360]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8001fcc:	f023 0301 	bic.w	r3, r3, #1
 8001fd0:	6213      	str	r3, [r2, #32]
 8001fd2:	4b58      	ldr	r3, [pc, #352]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	4a57      	ldr	r2, [pc, #348]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8001fd8:	f023 0304 	bic.w	r3, r3, #4
 8001fdc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d015      	beq.n	8002012 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe6:	f7ff fb9d 	bl	8001724 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fec:	e00a      	b.n	8002004 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fee:	f7ff fb99 	bl	8001724 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e0b1      	b.n	8002168 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002004:	4b4b      	ldr	r3, [pc, #300]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0ee      	beq.n	8001fee <HAL_RCC_OscConfig+0x37e>
 8002010:	e014      	b.n	800203c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002012:	f7ff fb87 	bl	8001724 <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002018:	e00a      	b.n	8002030 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800201a:	f7ff fb83 	bl	8001724 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002028:	4293      	cmp	r3, r2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e09b      	b.n	8002168 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002030:	4b40      	ldr	r3, [pc, #256]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1ee      	bne.n	800201a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800203c:	7dfb      	ldrb	r3, [r7, #23]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d105      	bne.n	800204e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002042:	4b3c      	ldr	r3, [pc, #240]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	4a3b      	ldr	r2, [pc, #236]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 8002048:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800204c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	2b00      	cmp	r3, #0
 8002054:	f000 8087 	beq.w	8002166 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002058:	4b36      	ldr	r3, [pc, #216]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 030c 	and.w	r3, r3, #12
 8002060:	2b08      	cmp	r3, #8
 8002062:	d061      	beq.n	8002128 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	69db      	ldr	r3, [r3, #28]
 8002068:	2b02      	cmp	r3, #2
 800206a:	d146      	bne.n	80020fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800206c:	4b33      	ldr	r3, [pc, #204]	@ (800213c <HAL_RCC_OscConfig+0x4cc>)
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002072:	f7ff fb57 	bl	8001724 <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800207a:	f7ff fb53 	bl	8001724 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e06d      	b.n	8002168 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800208c:	4b29      	ldr	r3, [pc, #164]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1f0      	bne.n	800207a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020a0:	d108      	bne.n	80020b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020a2:	4b24      	ldr	r3, [pc, #144]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	4921      	ldr	r1, [pc, #132]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a19      	ldr	r1, [r3, #32]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c4:	430b      	orrs	r3, r1
 80020c6:	491b      	ldr	r1, [pc, #108]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020cc:	4b1b      	ldr	r3, [pc, #108]	@ (800213c <HAL_RCC_OscConfig+0x4cc>)
 80020ce:	2201      	movs	r2, #1
 80020d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d2:	f7ff fb27 	bl	8001724 <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020d8:	e008      	b.n	80020ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020da:	f7ff fb23 	bl	8001724 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e03d      	b.n	8002168 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020ec:	4b11      	ldr	r3, [pc, #68]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0f0      	beq.n	80020da <HAL_RCC_OscConfig+0x46a>
 80020f8:	e035      	b.n	8002166 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020fa:	4b10      	ldr	r3, [pc, #64]	@ (800213c <HAL_RCC_OscConfig+0x4cc>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002100:	f7ff fb10 	bl	8001724 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002108:	f7ff fb0c 	bl	8001724 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e026      	b.n	8002168 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800211a:	4b06      	ldr	r3, [pc, #24]	@ (8002134 <HAL_RCC_OscConfig+0x4c4>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f0      	bne.n	8002108 <HAL_RCC_OscConfig+0x498>
 8002126:	e01e      	b.n	8002166 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	69db      	ldr	r3, [r3, #28]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d107      	bne.n	8002140 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e019      	b.n	8002168 <HAL_RCC_OscConfig+0x4f8>
 8002134:	40021000 	.word	0x40021000
 8002138:	40007000 	.word	0x40007000
 800213c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002140:	4b0b      	ldr	r3, [pc, #44]	@ (8002170 <HAL_RCC_OscConfig+0x500>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	429a      	cmp	r2, r3
 8002152:	d106      	bne.n	8002162 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800215e:	429a      	cmp	r2, r3
 8002160:	d001      	beq.n	8002166 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e000      	b.n	8002168 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40021000 	.word	0x40021000

08002174 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e0d0      	b.n	800232a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002188:	4b6a      	ldr	r3, [pc, #424]	@ (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d910      	bls.n	80021b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002196:	4b67      	ldr	r3, [pc, #412]	@ (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f023 0207 	bic.w	r2, r3, #7
 800219e:	4965      	ldr	r1, [pc, #404]	@ (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a6:	4b63      	ldr	r3, [pc, #396]	@ (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d001      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e0b8      	b.n	800232a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d020      	beq.n	8002206 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d005      	beq.n	80021dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021d0:	4b59      	ldr	r3, [pc, #356]	@ (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	4a58      	ldr	r2, [pc, #352]	@ (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 80021d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80021da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0308 	and.w	r3, r3, #8
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d005      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021e8:	4b53      	ldr	r3, [pc, #332]	@ (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	4a52      	ldr	r2, [pc, #328]	@ (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 80021ee:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80021f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021f4:	4b50      	ldr	r3, [pc, #320]	@ (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	494d      	ldr	r1, [pc, #308]	@ (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 8002202:	4313      	orrs	r3, r2
 8002204:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b00      	cmp	r3, #0
 8002210:	d040      	beq.n	8002294 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d107      	bne.n	800222a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800221a:	4b47      	ldr	r3, [pc, #284]	@ (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d115      	bne.n	8002252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e07f      	b.n	800232a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b02      	cmp	r3, #2
 8002230:	d107      	bne.n	8002242 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002232:	4b41      	ldr	r3, [pc, #260]	@ (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d109      	bne.n	8002252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e073      	b.n	800232a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002242:	4b3d      	ldr	r3, [pc, #244]	@ (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e06b      	b.n	800232a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002252:	4b39      	ldr	r3, [pc, #228]	@ (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f023 0203 	bic.w	r2, r3, #3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	4936      	ldr	r1, [pc, #216]	@ (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 8002260:	4313      	orrs	r3, r2
 8002262:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002264:	f7ff fa5e 	bl	8001724 <HAL_GetTick>
 8002268:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226a:	e00a      	b.n	8002282 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800226c:	f7ff fa5a 	bl	8001724 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	f241 3288 	movw	r2, #5000	@ 0x1388
 800227a:	4293      	cmp	r3, r2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e053      	b.n	800232a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002282:	4b2d      	ldr	r3, [pc, #180]	@ (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f003 020c 	and.w	r2, r3, #12
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	429a      	cmp	r2, r3
 8002292:	d1eb      	bne.n	800226c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002294:	4b27      	ldr	r3, [pc, #156]	@ (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d210      	bcs.n	80022c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a2:	4b24      	ldr	r3, [pc, #144]	@ (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f023 0207 	bic.w	r2, r3, #7
 80022aa:	4922      	ldr	r1, [pc, #136]	@ (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b2:	4b20      	ldr	r3, [pc, #128]	@ (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d001      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e032      	b.n	800232a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0304 	and.w	r3, r3, #4
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d008      	beq.n	80022e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022d0:	4b19      	ldr	r3, [pc, #100]	@ (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	4916      	ldr	r1, [pc, #88]	@ (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d009      	beq.n	8002302 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022ee:	4b12      	ldr	r3, [pc, #72]	@ (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	490e      	ldr	r1, [pc, #56]	@ (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002302:	f000 f821 	bl	8002348 <HAL_RCC_GetSysClockFreq>
 8002306:	4602      	mov	r2, r0
 8002308:	4b0b      	ldr	r3, [pc, #44]	@ (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	091b      	lsrs	r3, r3, #4
 800230e:	f003 030f 	and.w	r3, r3, #15
 8002312:	490a      	ldr	r1, [pc, #40]	@ (800233c <HAL_RCC_ClockConfig+0x1c8>)
 8002314:	5ccb      	ldrb	r3, [r1, r3]
 8002316:	fa22 f303 	lsr.w	r3, r2, r3
 800231a:	4a09      	ldr	r2, [pc, #36]	@ (8002340 <HAL_RCC_ClockConfig+0x1cc>)
 800231c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800231e:	4b09      	ldr	r3, [pc, #36]	@ (8002344 <HAL_RCC_ClockConfig+0x1d0>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff f9bc 	bl	80016a0 <HAL_InitTick>

  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40022000 	.word	0x40022000
 8002338:	40021000 	.word	0x40021000
 800233c:	08005e0c 	.word	0x08005e0c
 8002340:	20000000 	.word	0x20000000
 8002344:	20000004 	.word	0x20000004

08002348 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002348:	b480      	push	{r7}
 800234a:	b087      	sub	sp, #28
 800234c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	2300      	movs	r3, #0
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]
 800235a:	2300      	movs	r3, #0
 800235c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800235e:	2300      	movs	r3, #0
 8002360:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002362:	4b1e      	ldr	r3, [pc, #120]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x94>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f003 030c 	and.w	r3, r3, #12
 800236e:	2b04      	cmp	r3, #4
 8002370:	d002      	beq.n	8002378 <HAL_RCC_GetSysClockFreq+0x30>
 8002372:	2b08      	cmp	r3, #8
 8002374:	d003      	beq.n	800237e <HAL_RCC_GetSysClockFreq+0x36>
 8002376:	e027      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002378:	4b19      	ldr	r3, [pc, #100]	@ (80023e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800237a:	613b      	str	r3, [r7, #16]
      break;
 800237c:	e027      	b.n	80023ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	0c9b      	lsrs	r3, r3, #18
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	4a17      	ldr	r2, [pc, #92]	@ (80023e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002388:	5cd3      	ldrb	r3, [r2, r3]
 800238a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d010      	beq.n	80023b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002396:	4b11      	ldr	r3, [pc, #68]	@ (80023dc <HAL_RCC_GetSysClockFreq+0x94>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	0c5b      	lsrs	r3, r3, #17
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	4a11      	ldr	r2, [pc, #68]	@ (80023e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023a2:	5cd3      	ldrb	r3, [r2, r3]
 80023a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a0d      	ldr	r2, [pc, #52]	@ (80023e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80023aa:	fb03 f202 	mul.w	r2, r3, r2
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b4:	617b      	str	r3, [r7, #20]
 80023b6:	e004      	b.n	80023c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a0c      	ldr	r2, [pc, #48]	@ (80023ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80023bc:	fb02 f303 	mul.w	r3, r2, r3
 80023c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	613b      	str	r3, [r7, #16]
      break;
 80023c6:	e002      	b.n	80023ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023c8:	4b05      	ldr	r3, [pc, #20]	@ (80023e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80023ca:	613b      	str	r3, [r7, #16]
      break;
 80023cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023ce:	693b      	ldr	r3, [r7, #16]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	371c      	adds	r7, #28
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	40021000 	.word	0x40021000
 80023e0:	007a1200 	.word	0x007a1200
 80023e4:	08005e24 	.word	0x08005e24
 80023e8:	08005e34 	.word	0x08005e34
 80023ec:	003d0900 	.word	0x003d0900

080023f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023f4:	4b02      	ldr	r3, [pc, #8]	@ (8002400 <HAL_RCC_GetHCLKFreq+0x10>)
 80023f6:	681b      	ldr	r3, [r3, #0]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bc80      	pop	{r7}
 80023fe:	4770      	bx	lr
 8002400:	20000000 	.word	0x20000000

08002404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002408:	f7ff fff2 	bl	80023f0 <HAL_RCC_GetHCLKFreq>
 800240c:	4602      	mov	r2, r0
 800240e:	4b05      	ldr	r3, [pc, #20]	@ (8002424 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	0a1b      	lsrs	r3, r3, #8
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	4903      	ldr	r1, [pc, #12]	@ (8002428 <HAL_RCC_GetPCLK1Freq+0x24>)
 800241a:	5ccb      	ldrb	r3, [r1, r3]
 800241c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002420:	4618      	mov	r0, r3
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40021000 	.word	0x40021000
 8002428:	08005e1c 	.word	0x08005e1c

0800242c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002430:	f7ff ffde 	bl	80023f0 <HAL_RCC_GetHCLKFreq>
 8002434:	4602      	mov	r2, r0
 8002436:	4b05      	ldr	r3, [pc, #20]	@ (800244c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	0adb      	lsrs	r3, r3, #11
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	4903      	ldr	r1, [pc, #12]	@ (8002450 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002442:	5ccb      	ldrb	r3, [r1, r3]
 8002444:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002448:	4618      	mov	r0, r3
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40021000 	.word	0x40021000
 8002450:	08005e1c 	.word	0x08005e1c

08002454 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800245c:	4b0a      	ldr	r3, [pc, #40]	@ (8002488 <RCC_Delay+0x34>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a0a      	ldr	r2, [pc, #40]	@ (800248c <RCC_Delay+0x38>)
 8002462:	fba2 2303 	umull	r2, r3, r2, r3
 8002466:	0a5b      	lsrs	r3, r3, #9
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	fb02 f303 	mul.w	r3, r2, r3
 800246e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002470:	bf00      	nop
  }
  while (Delay --);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	1e5a      	subs	r2, r3, #1
 8002476:	60fa      	str	r2, [r7, #12]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1f9      	bne.n	8002470 <RCC_Delay+0x1c>
}
 800247c:	bf00      	nop
 800247e:	bf00      	nop
 8002480:	3714      	adds	r7, #20
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr
 8002488:	20000000 	.word	0x20000000
 800248c:	10624dd3 	.word	0x10624dd3

08002490 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e076      	b.n	8002590 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d108      	bne.n	80024bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80024b2:	d009      	beq.n	80024c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	61da      	str	r2, [r3, #28]
 80024ba:	e005      	b.n	80024c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d106      	bne.n	80024e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7fe ff16 	bl	8001314 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2202      	movs	r2, #2
 80024ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002510:	431a      	orrs	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	431a      	orrs	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	431a      	orrs	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002538:	431a      	orrs	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800254c:	ea42 0103 	orr.w	r1, r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002554:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	430a      	orrs	r2, r1
 800255e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	0c1a      	lsrs	r2, r3, #16
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f002 0204 	and.w	r2, r2, #4
 800256e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	69da      	ldr	r2, [r3, #28]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800257e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2201      	movs	r2, #1
 800258a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b08a      	sub	sp, #40	@ 0x28
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
 80025a4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80025a6:	2301      	movs	r3, #1
 80025a8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025aa:	f7ff f8bb 	bl	8001724 <HAL_GetTick>
 80025ae:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80025b6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80025be:	887b      	ldrh	r3, [r7, #2]
 80025c0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80025c2:	7ffb      	ldrb	r3, [r7, #31]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d00c      	beq.n	80025e2 <HAL_SPI_TransmitReceive+0x4a>
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80025ce:	d106      	bne.n	80025de <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d102      	bne.n	80025de <HAL_SPI_TransmitReceive+0x46>
 80025d8:	7ffb      	ldrb	r3, [r7, #31]
 80025da:	2b04      	cmp	r3, #4
 80025dc:	d001      	beq.n	80025e2 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80025de:	2302      	movs	r3, #2
 80025e0:	e17f      	b.n	80028e2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d005      	beq.n	80025f4 <HAL_SPI_TransmitReceive+0x5c>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d002      	beq.n	80025f4 <HAL_SPI_TransmitReceive+0x5c>
 80025ee:	887b      	ldrh	r3, [r7, #2]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e174      	b.n	80028e2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d101      	bne.n	8002606 <HAL_SPI_TransmitReceive+0x6e>
 8002602:	2302      	movs	r3, #2
 8002604:	e16d      	b.n	80028e2 <HAL_SPI_TransmitReceive+0x34a>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b04      	cmp	r3, #4
 8002618:	d003      	beq.n	8002622 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2205      	movs	r2, #5
 800261e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	887a      	ldrh	r2, [r7, #2]
 8002632:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	887a      	ldrh	r2, [r7, #2]
 8002638:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	68ba      	ldr	r2, [r7, #8]
 800263e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	887a      	ldrh	r2, [r7, #2]
 8002644:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	887a      	ldrh	r2, [r7, #2]
 800264a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002662:	2b40      	cmp	r3, #64	@ 0x40
 8002664:	d007      	beq.n	8002676 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002674:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800267e:	d17e      	bne.n	800277e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d002      	beq.n	800268e <HAL_SPI_TransmitReceive+0xf6>
 8002688:	8afb      	ldrh	r3, [r7, #22]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d16c      	bne.n	8002768 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002692:	881a      	ldrh	r2, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269e:	1c9a      	adds	r2, r3, #2
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	3b01      	subs	r3, #1
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026b2:	e059      	b.n	8002768 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d11b      	bne.n	80026fa <HAL_SPI_TransmitReceive+0x162>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d016      	beq.n	80026fa <HAL_SPI_TransmitReceive+0x162>
 80026cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d113      	bne.n	80026fa <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d6:	881a      	ldrh	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e2:	1c9a      	adds	r2, r3, #2
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	3b01      	subs	r3, #1
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b01      	cmp	r3, #1
 8002706:	d119      	bne.n	800273c <HAL_SPI_TransmitReceive+0x1a4>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800270c:	b29b      	uxth	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d014      	beq.n	800273c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68da      	ldr	r2, [r3, #12]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800271c:	b292      	uxth	r2, r2
 800271e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002724:	1c9a      	adds	r2, r3, #2
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800272e:	b29b      	uxth	r3, r3
 8002730:	3b01      	subs	r3, #1
 8002732:	b29a      	uxth	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002738:	2301      	movs	r3, #1
 800273a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800273c:	f7fe fff2 	bl	8001724 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002748:	429a      	cmp	r2, r3
 800274a:	d80d      	bhi.n	8002768 <HAL_SPI_TransmitReceive+0x1d0>
 800274c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800274e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002752:	d009      	beq.n	8002768 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e0bc      	b.n	80028e2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800276c:	b29b      	uxth	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1a0      	bne.n	80026b4 <HAL_SPI_TransmitReceive+0x11c>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002776:	b29b      	uxth	r3, r3
 8002778:	2b00      	cmp	r3, #0
 800277a:	d19b      	bne.n	80026b4 <HAL_SPI_TransmitReceive+0x11c>
 800277c:	e082      	b.n	8002884 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d002      	beq.n	800278c <HAL_SPI_TransmitReceive+0x1f4>
 8002786:	8afb      	ldrh	r3, [r7, #22]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d171      	bne.n	8002870 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	330c      	adds	r3, #12
 8002796:	7812      	ldrb	r2, [r2, #0]
 8002798:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279e:	1c5a      	adds	r2, r3, #1
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	3b01      	subs	r3, #1
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027b2:	e05d      	b.n	8002870 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d11c      	bne.n	80027fc <HAL_SPI_TransmitReceive+0x264>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d017      	beq.n	80027fc <HAL_SPI_TransmitReceive+0x264>
 80027cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d114      	bne.n	80027fc <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	330c      	adds	r3, #12
 80027dc:	7812      	ldrb	r2, [r2, #0]
 80027de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	3b01      	subs	r3, #1
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027f8:	2300      	movs	r3, #0
 80027fa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b01      	cmp	r3, #1
 8002808:	d119      	bne.n	800283e <HAL_SPI_TransmitReceive+0x2a6>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800280e:	b29b      	uxth	r3, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	d014      	beq.n	800283e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68da      	ldr	r2, [r3, #12]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002826:	1c5a      	adds	r2, r3, #1
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002830:	b29b      	uxth	r3, r3
 8002832:	3b01      	subs	r3, #1
 8002834:	b29a      	uxth	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800283a:	2301      	movs	r3, #1
 800283c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800283e:	f7fe ff71 	bl	8001724 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	6a3b      	ldr	r3, [r7, #32]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800284a:	429a      	cmp	r2, r3
 800284c:	d803      	bhi.n	8002856 <HAL_SPI_TransmitReceive+0x2be>
 800284e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002854:	d102      	bne.n	800285c <HAL_SPI_TransmitReceive+0x2c4>
 8002856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002858:	2b00      	cmp	r3, #0
 800285a:	d109      	bne.n	8002870 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e038      	b.n	80028e2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002874:	b29b      	uxth	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d19c      	bne.n	80027b4 <HAL_SPI_TransmitReceive+0x21c>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800287e:	b29b      	uxth	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	d197      	bne.n	80027b4 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002884:	6a3a      	ldr	r2, [r7, #32]
 8002886:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f000 f8b7 	bl	80029fc <SPI_EndRxTxTransaction>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d008      	beq.n	80028a6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2220      	movs	r2, #32
 8002898:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e01d      	b.n	80028e2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10a      	bne.n	80028c4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028ae:	2300      	movs	r3, #0
 80028b0:	613b      	str	r3, [r7, #16]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	613b      	str	r3, [r7, #16]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	613b      	str	r3, [r7, #16]
 80028c2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e000      	b.n	80028e2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80028e0:	2300      	movs	r3, #0
  }
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3728      	adds	r7, #40	@ 0x28
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
	...

080028ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	603b      	str	r3, [r7, #0]
 80028f8:	4613      	mov	r3, r2
 80028fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80028fc:	f7fe ff12 	bl	8001724 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002904:	1a9b      	subs	r3, r3, r2
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	4413      	add	r3, r2
 800290a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800290c:	f7fe ff0a 	bl	8001724 <HAL_GetTick>
 8002910:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002912:	4b39      	ldr	r3, [pc, #228]	@ (80029f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	015b      	lsls	r3, r3, #5
 8002918:	0d1b      	lsrs	r3, r3, #20
 800291a:	69fa      	ldr	r2, [r7, #28]
 800291c:	fb02 f303 	mul.w	r3, r2, r3
 8002920:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002922:	e054      	b.n	80029ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800292a:	d050      	beq.n	80029ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800292c:	f7fe fefa 	bl	8001724 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	69fa      	ldr	r2, [r7, #28]
 8002938:	429a      	cmp	r2, r3
 800293a:	d902      	bls.n	8002942 <SPI_WaitFlagStateUntilTimeout+0x56>
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d13d      	bne.n	80029be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002950:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800295a:	d111      	bne.n	8002980 <SPI_WaitFlagStateUntilTimeout+0x94>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002964:	d004      	beq.n	8002970 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800296e:	d107      	bne.n	8002980 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800297e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002984:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002988:	d10f      	bne.n	80029aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80029a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e017      	b.n	80029ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d101      	bne.n	80029c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	3b01      	subs	r3, #1
 80029cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	4013      	ands	r3, r2
 80029d8:	68ba      	ldr	r2, [r7, #8]
 80029da:	429a      	cmp	r2, r3
 80029dc:	bf0c      	ite	eq
 80029de:	2301      	moveq	r3, #1
 80029e0:	2300      	movne	r3, #0
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	461a      	mov	r2, r3
 80029e6:	79fb      	ldrb	r3, [r7, #7]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d19b      	bne.n	8002924 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3720      	adds	r7, #32
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	20000000 	.word	0x20000000

080029fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af02      	add	r7, sp, #8
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	2102      	movs	r1, #2
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f7ff ff6a 	bl	80028ec <SPI_WaitFlagStateUntilTimeout>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d007      	beq.n	8002a2e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a22:	f043 0220 	orr.w	r2, r3, #32
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e013      	b.n	8002a56 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	2200      	movs	r2, #0
 8002a36:	2180      	movs	r1, #128	@ 0x80
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f7ff ff57 	bl	80028ec <SPI_WaitFlagStateUntilTimeout>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d007      	beq.n	8002a54 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a48:	f043 0220 	orr.w	r2, r3, #32
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e000      	b.n	8002a56 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e042      	b.n	8002af6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d106      	bne.n	8002a8a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f7fe fc8f 	bl	80013a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2224      	movs	r2, #36	@ 0x24
 8002a8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68da      	ldr	r2, [r3, #12]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002aa0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 fa08 	bl	8002eb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	691a      	ldr	r2, [r3, #16]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ab6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	695a      	ldr	r2, [r3, #20]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ac6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ad6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2220      	movs	r2, #32
 8002ae2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2220      	movs	r2, #32
 8002aea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b08a      	sub	sp, #40	@ 0x28
 8002b02:	af02      	add	r7, sp, #8
 8002b04:	60f8      	str	r0, [r7, #12]
 8002b06:	60b9      	str	r1, [r7, #8]
 8002b08:	603b      	str	r3, [r7, #0]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b20      	cmp	r3, #32
 8002b1c:	d175      	bne.n	8002c0a <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d002      	beq.n	8002b2a <HAL_UART_Transmit+0x2c>
 8002b24:	88fb      	ldrh	r3, [r7, #6]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e06e      	b.n	8002c0c <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2221      	movs	r2, #33	@ 0x21
 8002b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b3c:	f7fe fdf2 	bl	8001724 <HAL_GetTick>
 8002b40:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	88fa      	ldrh	r2, [r7, #6]
 8002b46:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	88fa      	ldrh	r2, [r7, #6]
 8002b4c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b56:	d108      	bne.n	8002b6a <HAL_UART_Transmit+0x6c>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d104      	bne.n	8002b6a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002b60:	2300      	movs	r3, #0
 8002b62:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	61bb      	str	r3, [r7, #24]
 8002b68:	e003      	b.n	8002b72 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b72:	e02e      	b.n	8002bd2 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	2180      	movs	r1, #128	@ 0x80
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 f8df 	bl	8002d42 <UART_WaitOnFlagUntilTimeout>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d005      	beq.n	8002b96 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2220      	movs	r2, #32
 8002b8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e03a      	b.n	8002c0c <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10b      	bne.n	8002bb4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	881b      	ldrh	r3, [r3, #0]
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002baa:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	3302      	adds	r3, #2
 8002bb0:	61bb      	str	r3, [r7, #24]
 8002bb2:	e007      	b.n	8002bc4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	781a      	ldrb	r2, [r3, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1cb      	bne.n	8002b74 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	2200      	movs	r2, #0
 8002be4:	2140      	movs	r1, #64	@ 0x40
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f000 f8ab 	bl	8002d42 <UART_WaitOnFlagUntilTimeout>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d005      	beq.n	8002bfe <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e006      	b.n	8002c0c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2220      	movs	r2, #32
 8002c02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002c06:	2300      	movs	r3, #0
 8002c08:	e000      	b.n	8002c0c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002c0a:	2302      	movs	r3, #2
  }
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3720      	adds	r7, #32
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08a      	sub	sp, #40	@ 0x28
 8002c18:	af02      	add	r7, sp, #8
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	603b      	str	r3, [r7, #0]
 8002c20:	4613      	mov	r3, r2
 8002c22:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b20      	cmp	r3, #32
 8002c32:	f040 8081 	bne.w	8002d38 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d002      	beq.n	8002c42 <HAL_UART_Receive+0x2e>
 8002c3c:	88fb      	ldrh	r3, [r7, #6]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e079      	b.n	8002d3a <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2222      	movs	r2, #34	@ 0x22
 8002c50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c5a:	f7fe fd63 	bl	8001724 <HAL_GetTick>
 8002c5e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	88fa      	ldrh	r2, [r7, #6]
 8002c64:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	88fa      	ldrh	r2, [r7, #6]
 8002c6a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c74:	d108      	bne.n	8002c88 <HAL_UART_Receive+0x74>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d104      	bne.n	8002c88 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	61bb      	str	r3, [r7, #24]
 8002c86:	e003      	b.n	8002c90 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002c90:	e047      	b.n	8002d22 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	2120      	movs	r1, #32
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f000 f850 	bl	8002d42 <UART_WaitOnFlagUntilTimeout>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d005      	beq.n	8002cb4 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2220      	movs	r2, #32
 8002cac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e042      	b.n	8002d3a <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10c      	bne.n	8002cd4 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	3302      	adds	r3, #2
 8002cd0:	61bb      	str	r3, [r7, #24]
 8002cd2:	e01f      	b.n	8002d14 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cdc:	d007      	beq.n	8002cee <HAL_UART_Receive+0xda>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10a      	bne.n	8002cfc <HAL_UART_Receive+0xe8>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d106      	bne.n	8002cfc <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	701a      	strb	r2, [r3, #0]
 8002cfa:	e008      	b.n	8002d0e <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d08:	b2da      	uxtb	r2, r3
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	3301      	adds	r3, #1
 8002d12:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1b2      	bne.n	8002c92 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002d34:	2300      	movs	r3, #0
 8002d36:	e000      	b.n	8002d3a <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002d38:	2302      	movs	r3, #2
  }
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3720      	adds	r7, #32
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b086      	sub	sp, #24
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	60f8      	str	r0, [r7, #12]
 8002d4a:	60b9      	str	r1, [r7, #8]
 8002d4c:	603b      	str	r3, [r7, #0]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d52:	e03b      	b.n	8002dcc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5a:	d037      	beq.n	8002dcc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d5c:	f7fe fce2 	bl	8001724 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	6a3a      	ldr	r2, [r7, #32]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d302      	bcc.n	8002d72 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e03a      	b.n	8002dec <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d023      	beq.n	8002dcc <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2b80      	cmp	r3, #128	@ 0x80
 8002d88:	d020      	beq.n	8002dcc <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	2b40      	cmp	r3, #64	@ 0x40
 8002d8e:	d01d      	beq.n	8002dcc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0308 	and.w	r3, r3, #8
 8002d9a:	2b08      	cmp	r3, #8
 8002d9c:	d116      	bne.n	8002dcc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002d9e:	2300      	movs	r3, #0
 8002da0:	617b      	str	r3, [r7, #20]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	617b      	str	r3, [r7, #20]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	617b      	str	r3, [r7, #20]
 8002db2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f000 f81d 	bl	8002df4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2208      	movs	r2, #8
 8002dbe:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e00f      	b.n	8002dec <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	bf0c      	ite	eq
 8002ddc:	2301      	moveq	r3, #1
 8002dde:	2300      	movne	r3, #0
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	461a      	mov	r2, r3
 8002de4:	79fb      	ldrb	r3, [r7, #7]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d0b4      	beq.n	8002d54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b095      	sub	sp, #84	@ 0x54
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	330c      	adds	r3, #12
 8002e02:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e06:	e853 3f00 	ldrex	r3, [r3]
 8002e0a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	330c      	adds	r3, #12
 8002e1a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e1c:	643a      	str	r2, [r7, #64]	@ 0x40
 8002e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e20:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002e24:	e841 2300 	strex	r3, r2, [r1]
 8002e28:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1e5      	bne.n	8002dfc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	3314      	adds	r3, #20
 8002e36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e38:	6a3b      	ldr	r3, [r7, #32]
 8002e3a:	e853 3f00 	ldrex	r3, [r3]
 8002e3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	f023 0301 	bic.w	r3, r3, #1
 8002e46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	3314      	adds	r3, #20
 8002e4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e50:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e52:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e58:	e841 2300 	strex	r3, r2, [r1]
 8002e5c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1e5      	bne.n	8002e30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d119      	bne.n	8002ea0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	330c      	adds	r3, #12
 8002e72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	e853 3f00 	ldrex	r3, [r3]
 8002e7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	f023 0310 	bic.w	r3, r3, #16
 8002e82:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	330c      	adds	r3, #12
 8002e8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e8c:	61ba      	str	r2, [r7, #24]
 8002e8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e90:	6979      	ldr	r1, [r7, #20]
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	e841 2300 	strex	r3, r2, [r1]
 8002e98:	613b      	str	r3, [r7, #16]
   return(result);
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1e5      	bne.n	8002e6c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002eae:	bf00      	nop
 8002eb0:	3754      	adds	r7, #84	@ 0x54
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bc80      	pop	{r7}
 8002eb6:	4770      	bx	lr

08002eb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68da      	ldr	r2, [r3, #12]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689a      	ldr	r2, [r3, #8]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002ef2:	f023 030c 	bic.w	r3, r3, #12
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	6812      	ldr	r2, [r2, #0]
 8002efa:	68b9      	ldr	r1, [r7, #8]
 8002efc:	430b      	orrs	r3, r1
 8002efe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699a      	ldr	r2, [r3, #24]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a2c      	ldr	r2, [pc, #176]	@ (8002fcc <UART_SetConfig+0x114>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d103      	bne.n	8002f28 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f20:	f7ff fa84 	bl	800242c <HAL_RCC_GetPCLK2Freq>
 8002f24:	60f8      	str	r0, [r7, #12]
 8002f26:	e002      	b.n	8002f2e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f28:	f7ff fa6c 	bl	8002404 <HAL_RCC_GetPCLK1Freq>
 8002f2c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	4613      	mov	r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	4413      	add	r3, r2
 8002f36:	009a      	lsls	r2, r3, #2
 8002f38:	441a      	add	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f44:	4a22      	ldr	r2, [pc, #136]	@ (8002fd0 <UART_SetConfig+0x118>)
 8002f46:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4a:	095b      	lsrs	r3, r3, #5
 8002f4c:	0119      	lsls	r1, r3, #4
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	4613      	mov	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4413      	add	r3, r2
 8002f56:	009a      	lsls	r2, r3, #2
 8002f58:	441a      	add	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f64:	4b1a      	ldr	r3, [pc, #104]	@ (8002fd0 <UART_SetConfig+0x118>)
 8002f66:	fba3 0302 	umull	r0, r3, r3, r2
 8002f6a:	095b      	lsrs	r3, r3, #5
 8002f6c:	2064      	movs	r0, #100	@ 0x64
 8002f6e:	fb00 f303 	mul.w	r3, r0, r3
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	011b      	lsls	r3, r3, #4
 8002f76:	3332      	adds	r3, #50	@ 0x32
 8002f78:	4a15      	ldr	r2, [pc, #84]	@ (8002fd0 <UART_SetConfig+0x118>)
 8002f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7e:	095b      	lsrs	r3, r3, #5
 8002f80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f84:	4419      	add	r1, r3
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	009a      	lsls	r2, r3, #2
 8002f90:	441a      	add	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002fd0 <UART_SetConfig+0x118>)
 8002f9e:	fba3 0302 	umull	r0, r3, r3, r2
 8002fa2:	095b      	lsrs	r3, r3, #5
 8002fa4:	2064      	movs	r0, #100	@ 0x64
 8002fa6:	fb00 f303 	mul.w	r3, r0, r3
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	011b      	lsls	r3, r3, #4
 8002fae:	3332      	adds	r3, #50	@ 0x32
 8002fb0:	4a07      	ldr	r2, [pc, #28]	@ (8002fd0 <UART_SetConfig+0x118>)
 8002fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb6:	095b      	lsrs	r3, r3, #5
 8002fb8:	f003 020f 	and.w	r2, r3, #15
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	440a      	add	r2, r1
 8002fc2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002fc4:	bf00      	nop
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40013800 	.word	0x40013800
 8002fd0:	51eb851f 	.word	0x51eb851f

08002fd4 <__cvt>:
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fda:	461d      	mov	r5, r3
 8002fdc:	bfbb      	ittet	lt
 8002fde:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8002fe2:	461d      	movlt	r5, r3
 8002fe4:	2300      	movge	r3, #0
 8002fe6:	232d      	movlt	r3, #45	@ 0x2d
 8002fe8:	b088      	sub	sp, #32
 8002fea:	4614      	mov	r4, r2
 8002fec:	bfb8      	it	lt
 8002fee:	4614      	movlt	r4, r2
 8002ff0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8002ff2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8002ff4:	7013      	strb	r3, [r2, #0]
 8002ff6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8002ff8:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8002ffc:	f023 0820 	bic.w	r8, r3, #32
 8003000:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003004:	d005      	beq.n	8003012 <__cvt+0x3e>
 8003006:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800300a:	d100      	bne.n	800300e <__cvt+0x3a>
 800300c:	3601      	adds	r6, #1
 800300e:	2302      	movs	r3, #2
 8003010:	e000      	b.n	8003014 <__cvt+0x40>
 8003012:	2303      	movs	r3, #3
 8003014:	aa07      	add	r2, sp, #28
 8003016:	9204      	str	r2, [sp, #16]
 8003018:	aa06      	add	r2, sp, #24
 800301a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800301e:	e9cd 3600 	strd	r3, r6, [sp]
 8003022:	4622      	mov	r2, r4
 8003024:	462b      	mov	r3, r5
 8003026:	f000 fe83 	bl	8003d30 <_dtoa_r>
 800302a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800302e:	4607      	mov	r7, r0
 8003030:	d119      	bne.n	8003066 <__cvt+0x92>
 8003032:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003034:	07db      	lsls	r3, r3, #31
 8003036:	d50e      	bpl.n	8003056 <__cvt+0x82>
 8003038:	eb00 0906 	add.w	r9, r0, r6
 800303c:	2200      	movs	r2, #0
 800303e:	2300      	movs	r3, #0
 8003040:	4620      	mov	r0, r4
 8003042:	4629      	mov	r1, r5
 8003044:	f7fd fcb0 	bl	80009a8 <__aeabi_dcmpeq>
 8003048:	b108      	cbz	r0, 800304e <__cvt+0x7a>
 800304a:	f8cd 901c 	str.w	r9, [sp, #28]
 800304e:	2230      	movs	r2, #48	@ 0x30
 8003050:	9b07      	ldr	r3, [sp, #28]
 8003052:	454b      	cmp	r3, r9
 8003054:	d31e      	bcc.n	8003094 <__cvt+0xc0>
 8003056:	4638      	mov	r0, r7
 8003058:	9b07      	ldr	r3, [sp, #28]
 800305a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800305c:	1bdb      	subs	r3, r3, r7
 800305e:	6013      	str	r3, [r2, #0]
 8003060:	b008      	add	sp, #32
 8003062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003066:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800306a:	eb00 0906 	add.w	r9, r0, r6
 800306e:	d1e5      	bne.n	800303c <__cvt+0x68>
 8003070:	7803      	ldrb	r3, [r0, #0]
 8003072:	2b30      	cmp	r3, #48	@ 0x30
 8003074:	d10a      	bne.n	800308c <__cvt+0xb8>
 8003076:	2200      	movs	r2, #0
 8003078:	2300      	movs	r3, #0
 800307a:	4620      	mov	r0, r4
 800307c:	4629      	mov	r1, r5
 800307e:	f7fd fc93 	bl	80009a8 <__aeabi_dcmpeq>
 8003082:	b918      	cbnz	r0, 800308c <__cvt+0xb8>
 8003084:	f1c6 0601 	rsb	r6, r6, #1
 8003088:	f8ca 6000 	str.w	r6, [sl]
 800308c:	f8da 3000 	ldr.w	r3, [sl]
 8003090:	4499      	add	r9, r3
 8003092:	e7d3      	b.n	800303c <__cvt+0x68>
 8003094:	1c59      	adds	r1, r3, #1
 8003096:	9107      	str	r1, [sp, #28]
 8003098:	701a      	strb	r2, [r3, #0]
 800309a:	e7d9      	b.n	8003050 <__cvt+0x7c>

0800309c <__exponent>:
 800309c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800309e:	2900      	cmp	r1, #0
 80030a0:	bfb6      	itet	lt
 80030a2:	232d      	movlt	r3, #45	@ 0x2d
 80030a4:	232b      	movge	r3, #43	@ 0x2b
 80030a6:	4249      	neglt	r1, r1
 80030a8:	2909      	cmp	r1, #9
 80030aa:	7002      	strb	r2, [r0, #0]
 80030ac:	7043      	strb	r3, [r0, #1]
 80030ae:	dd29      	ble.n	8003104 <__exponent+0x68>
 80030b0:	f10d 0307 	add.w	r3, sp, #7
 80030b4:	461d      	mov	r5, r3
 80030b6:	270a      	movs	r7, #10
 80030b8:	fbb1 f6f7 	udiv	r6, r1, r7
 80030bc:	461a      	mov	r2, r3
 80030be:	fb07 1416 	mls	r4, r7, r6, r1
 80030c2:	3430      	adds	r4, #48	@ 0x30
 80030c4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80030c8:	460c      	mov	r4, r1
 80030ca:	2c63      	cmp	r4, #99	@ 0x63
 80030cc:	4631      	mov	r1, r6
 80030ce:	f103 33ff 	add.w	r3, r3, #4294967295
 80030d2:	dcf1      	bgt.n	80030b8 <__exponent+0x1c>
 80030d4:	3130      	adds	r1, #48	@ 0x30
 80030d6:	1e94      	subs	r4, r2, #2
 80030d8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80030dc:	4623      	mov	r3, r4
 80030de:	1c41      	adds	r1, r0, #1
 80030e0:	42ab      	cmp	r3, r5
 80030e2:	d30a      	bcc.n	80030fa <__exponent+0x5e>
 80030e4:	f10d 0309 	add.w	r3, sp, #9
 80030e8:	1a9b      	subs	r3, r3, r2
 80030ea:	42ac      	cmp	r4, r5
 80030ec:	bf88      	it	hi
 80030ee:	2300      	movhi	r3, #0
 80030f0:	3302      	adds	r3, #2
 80030f2:	4403      	add	r3, r0
 80030f4:	1a18      	subs	r0, r3, r0
 80030f6:	b003      	add	sp, #12
 80030f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030fa:	f813 6b01 	ldrb.w	r6, [r3], #1
 80030fe:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003102:	e7ed      	b.n	80030e0 <__exponent+0x44>
 8003104:	2330      	movs	r3, #48	@ 0x30
 8003106:	3130      	adds	r1, #48	@ 0x30
 8003108:	7083      	strb	r3, [r0, #2]
 800310a:	70c1      	strb	r1, [r0, #3]
 800310c:	1d03      	adds	r3, r0, #4
 800310e:	e7f1      	b.n	80030f4 <__exponent+0x58>

08003110 <_printf_float>:
 8003110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003114:	b091      	sub	sp, #68	@ 0x44
 8003116:	460c      	mov	r4, r1
 8003118:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800311c:	4616      	mov	r6, r2
 800311e:	461f      	mov	r7, r3
 8003120:	4605      	mov	r5, r0
 8003122:	f000 fcf5 	bl	8003b10 <_localeconv_r>
 8003126:	6803      	ldr	r3, [r0, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	9308      	str	r3, [sp, #32]
 800312c:	f7fd f810 	bl	8000150 <strlen>
 8003130:	2300      	movs	r3, #0
 8003132:	930e      	str	r3, [sp, #56]	@ 0x38
 8003134:	f8d8 3000 	ldr.w	r3, [r8]
 8003138:	9009      	str	r0, [sp, #36]	@ 0x24
 800313a:	3307      	adds	r3, #7
 800313c:	f023 0307 	bic.w	r3, r3, #7
 8003140:	f103 0208 	add.w	r2, r3, #8
 8003144:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003148:	f8d4 b000 	ldr.w	fp, [r4]
 800314c:	f8c8 2000 	str.w	r2, [r8]
 8003150:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003154:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003158:	930b      	str	r3, [sp, #44]	@ 0x2c
 800315a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800315e:	f04f 32ff 	mov.w	r2, #4294967295
 8003162:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003166:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800316a:	4b9c      	ldr	r3, [pc, #624]	@ (80033dc <_printf_float+0x2cc>)
 800316c:	f7fd fc4e 	bl	8000a0c <__aeabi_dcmpun>
 8003170:	bb70      	cbnz	r0, 80031d0 <_printf_float+0xc0>
 8003172:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003176:	f04f 32ff 	mov.w	r2, #4294967295
 800317a:	4b98      	ldr	r3, [pc, #608]	@ (80033dc <_printf_float+0x2cc>)
 800317c:	f7fd fc28 	bl	80009d0 <__aeabi_dcmple>
 8003180:	bb30      	cbnz	r0, 80031d0 <_printf_float+0xc0>
 8003182:	2200      	movs	r2, #0
 8003184:	2300      	movs	r3, #0
 8003186:	4640      	mov	r0, r8
 8003188:	4649      	mov	r1, r9
 800318a:	f7fd fc17 	bl	80009bc <__aeabi_dcmplt>
 800318e:	b110      	cbz	r0, 8003196 <_printf_float+0x86>
 8003190:	232d      	movs	r3, #45	@ 0x2d
 8003192:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003196:	4a92      	ldr	r2, [pc, #584]	@ (80033e0 <_printf_float+0x2d0>)
 8003198:	4b92      	ldr	r3, [pc, #584]	@ (80033e4 <_printf_float+0x2d4>)
 800319a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800319e:	bf8c      	ite	hi
 80031a0:	4690      	movhi	r8, r2
 80031a2:	4698      	movls	r8, r3
 80031a4:	2303      	movs	r3, #3
 80031a6:	f04f 0900 	mov.w	r9, #0
 80031aa:	6123      	str	r3, [r4, #16]
 80031ac:	f02b 0304 	bic.w	r3, fp, #4
 80031b0:	6023      	str	r3, [r4, #0]
 80031b2:	4633      	mov	r3, r6
 80031b4:	4621      	mov	r1, r4
 80031b6:	4628      	mov	r0, r5
 80031b8:	9700      	str	r7, [sp, #0]
 80031ba:	aa0f      	add	r2, sp, #60	@ 0x3c
 80031bc:	f000 f9d4 	bl	8003568 <_printf_common>
 80031c0:	3001      	adds	r0, #1
 80031c2:	f040 8090 	bne.w	80032e6 <_printf_float+0x1d6>
 80031c6:	f04f 30ff 	mov.w	r0, #4294967295
 80031ca:	b011      	add	sp, #68	@ 0x44
 80031cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031d0:	4642      	mov	r2, r8
 80031d2:	464b      	mov	r3, r9
 80031d4:	4640      	mov	r0, r8
 80031d6:	4649      	mov	r1, r9
 80031d8:	f7fd fc18 	bl	8000a0c <__aeabi_dcmpun>
 80031dc:	b148      	cbz	r0, 80031f2 <_printf_float+0xe2>
 80031de:	464b      	mov	r3, r9
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	bfb8      	it	lt
 80031e4:	232d      	movlt	r3, #45	@ 0x2d
 80031e6:	4a80      	ldr	r2, [pc, #512]	@ (80033e8 <_printf_float+0x2d8>)
 80031e8:	bfb8      	it	lt
 80031ea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80031ee:	4b7f      	ldr	r3, [pc, #508]	@ (80033ec <_printf_float+0x2dc>)
 80031f0:	e7d3      	b.n	800319a <_printf_float+0x8a>
 80031f2:	6863      	ldr	r3, [r4, #4]
 80031f4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80031f8:	1c5a      	adds	r2, r3, #1
 80031fa:	d13f      	bne.n	800327c <_printf_float+0x16c>
 80031fc:	2306      	movs	r3, #6
 80031fe:	6063      	str	r3, [r4, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003206:	6023      	str	r3, [r4, #0]
 8003208:	9206      	str	r2, [sp, #24]
 800320a:	aa0e      	add	r2, sp, #56	@ 0x38
 800320c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003210:	aa0d      	add	r2, sp, #52	@ 0x34
 8003212:	9203      	str	r2, [sp, #12]
 8003214:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003218:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800321c:	6863      	ldr	r3, [r4, #4]
 800321e:	4642      	mov	r2, r8
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	4628      	mov	r0, r5
 8003224:	464b      	mov	r3, r9
 8003226:	910a      	str	r1, [sp, #40]	@ 0x28
 8003228:	f7ff fed4 	bl	8002fd4 <__cvt>
 800322c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800322e:	4680      	mov	r8, r0
 8003230:	2947      	cmp	r1, #71	@ 0x47
 8003232:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003234:	d128      	bne.n	8003288 <_printf_float+0x178>
 8003236:	1cc8      	adds	r0, r1, #3
 8003238:	db02      	blt.n	8003240 <_printf_float+0x130>
 800323a:	6863      	ldr	r3, [r4, #4]
 800323c:	4299      	cmp	r1, r3
 800323e:	dd40      	ble.n	80032c2 <_printf_float+0x1b2>
 8003240:	f1aa 0a02 	sub.w	sl, sl, #2
 8003244:	fa5f fa8a 	uxtb.w	sl, sl
 8003248:	4652      	mov	r2, sl
 800324a:	3901      	subs	r1, #1
 800324c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003250:	910d      	str	r1, [sp, #52]	@ 0x34
 8003252:	f7ff ff23 	bl	800309c <__exponent>
 8003256:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003258:	4681      	mov	r9, r0
 800325a:	1813      	adds	r3, r2, r0
 800325c:	2a01      	cmp	r2, #1
 800325e:	6123      	str	r3, [r4, #16]
 8003260:	dc02      	bgt.n	8003268 <_printf_float+0x158>
 8003262:	6822      	ldr	r2, [r4, #0]
 8003264:	07d2      	lsls	r2, r2, #31
 8003266:	d501      	bpl.n	800326c <_printf_float+0x15c>
 8003268:	3301      	adds	r3, #1
 800326a:	6123      	str	r3, [r4, #16]
 800326c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003270:	2b00      	cmp	r3, #0
 8003272:	d09e      	beq.n	80031b2 <_printf_float+0xa2>
 8003274:	232d      	movs	r3, #45	@ 0x2d
 8003276:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800327a:	e79a      	b.n	80031b2 <_printf_float+0xa2>
 800327c:	2947      	cmp	r1, #71	@ 0x47
 800327e:	d1bf      	bne.n	8003200 <_printf_float+0xf0>
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1bd      	bne.n	8003200 <_printf_float+0xf0>
 8003284:	2301      	movs	r3, #1
 8003286:	e7ba      	b.n	80031fe <_printf_float+0xee>
 8003288:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800328c:	d9dc      	bls.n	8003248 <_printf_float+0x138>
 800328e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003292:	d118      	bne.n	80032c6 <_printf_float+0x1b6>
 8003294:	2900      	cmp	r1, #0
 8003296:	6863      	ldr	r3, [r4, #4]
 8003298:	dd0b      	ble.n	80032b2 <_printf_float+0x1a2>
 800329a:	6121      	str	r1, [r4, #16]
 800329c:	b913      	cbnz	r3, 80032a4 <_printf_float+0x194>
 800329e:	6822      	ldr	r2, [r4, #0]
 80032a0:	07d0      	lsls	r0, r2, #31
 80032a2:	d502      	bpl.n	80032aa <_printf_float+0x19a>
 80032a4:	3301      	adds	r3, #1
 80032a6:	440b      	add	r3, r1
 80032a8:	6123      	str	r3, [r4, #16]
 80032aa:	f04f 0900 	mov.w	r9, #0
 80032ae:	65a1      	str	r1, [r4, #88]	@ 0x58
 80032b0:	e7dc      	b.n	800326c <_printf_float+0x15c>
 80032b2:	b913      	cbnz	r3, 80032ba <_printf_float+0x1aa>
 80032b4:	6822      	ldr	r2, [r4, #0]
 80032b6:	07d2      	lsls	r2, r2, #31
 80032b8:	d501      	bpl.n	80032be <_printf_float+0x1ae>
 80032ba:	3302      	adds	r3, #2
 80032bc:	e7f4      	b.n	80032a8 <_printf_float+0x198>
 80032be:	2301      	movs	r3, #1
 80032c0:	e7f2      	b.n	80032a8 <_printf_float+0x198>
 80032c2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80032c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80032c8:	4299      	cmp	r1, r3
 80032ca:	db05      	blt.n	80032d8 <_printf_float+0x1c8>
 80032cc:	6823      	ldr	r3, [r4, #0]
 80032ce:	6121      	str	r1, [r4, #16]
 80032d0:	07d8      	lsls	r0, r3, #31
 80032d2:	d5ea      	bpl.n	80032aa <_printf_float+0x19a>
 80032d4:	1c4b      	adds	r3, r1, #1
 80032d6:	e7e7      	b.n	80032a8 <_printf_float+0x198>
 80032d8:	2900      	cmp	r1, #0
 80032da:	bfcc      	ite	gt
 80032dc:	2201      	movgt	r2, #1
 80032de:	f1c1 0202 	rsble	r2, r1, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	e7e0      	b.n	80032a8 <_printf_float+0x198>
 80032e6:	6823      	ldr	r3, [r4, #0]
 80032e8:	055a      	lsls	r2, r3, #21
 80032ea:	d407      	bmi.n	80032fc <_printf_float+0x1ec>
 80032ec:	6923      	ldr	r3, [r4, #16]
 80032ee:	4642      	mov	r2, r8
 80032f0:	4631      	mov	r1, r6
 80032f2:	4628      	mov	r0, r5
 80032f4:	47b8      	blx	r7
 80032f6:	3001      	adds	r0, #1
 80032f8:	d12b      	bne.n	8003352 <_printf_float+0x242>
 80032fa:	e764      	b.n	80031c6 <_printf_float+0xb6>
 80032fc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003300:	f240 80dc 	bls.w	80034bc <_printf_float+0x3ac>
 8003304:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003308:	2200      	movs	r2, #0
 800330a:	2300      	movs	r3, #0
 800330c:	f7fd fb4c 	bl	80009a8 <__aeabi_dcmpeq>
 8003310:	2800      	cmp	r0, #0
 8003312:	d033      	beq.n	800337c <_printf_float+0x26c>
 8003314:	2301      	movs	r3, #1
 8003316:	4631      	mov	r1, r6
 8003318:	4628      	mov	r0, r5
 800331a:	4a35      	ldr	r2, [pc, #212]	@ (80033f0 <_printf_float+0x2e0>)
 800331c:	47b8      	blx	r7
 800331e:	3001      	adds	r0, #1
 8003320:	f43f af51 	beq.w	80031c6 <_printf_float+0xb6>
 8003324:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003328:	4543      	cmp	r3, r8
 800332a:	db02      	blt.n	8003332 <_printf_float+0x222>
 800332c:	6823      	ldr	r3, [r4, #0]
 800332e:	07d8      	lsls	r0, r3, #31
 8003330:	d50f      	bpl.n	8003352 <_printf_float+0x242>
 8003332:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003336:	4631      	mov	r1, r6
 8003338:	4628      	mov	r0, r5
 800333a:	47b8      	blx	r7
 800333c:	3001      	adds	r0, #1
 800333e:	f43f af42 	beq.w	80031c6 <_printf_float+0xb6>
 8003342:	f04f 0900 	mov.w	r9, #0
 8003346:	f108 38ff 	add.w	r8, r8, #4294967295
 800334a:	f104 0a1a 	add.w	sl, r4, #26
 800334e:	45c8      	cmp	r8, r9
 8003350:	dc09      	bgt.n	8003366 <_printf_float+0x256>
 8003352:	6823      	ldr	r3, [r4, #0]
 8003354:	079b      	lsls	r3, r3, #30
 8003356:	f100 8102 	bmi.w	800355e <_printf_float+0x44e>
 800335a:	68e0      	ldr	r0, [r4, #12]
 800335c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800335e:	4298      	cmp	r0, r3
 8003360:	bfb8      	it	lt
 8003362:	4618      	movlt	r0, r3
 8003364:	e731      	b.n	80031ca <_printf_float+0xba>
 8003366:	2301      	movs	r3, #1
 8003368:	4652      	mov	r2, sl
 800336a:	4631      	mov	r1, r6
 800336c:	4628      	mov	r0, r5
 800336e:	47b8      	blx	r7
 8003370:	3001      	adds	r0, #1
 8003372:	f43f af28 	beq.w	80031c6 <_printf_float+0xb6>
 8003376:	f109 0901 	add.w	r9, r9, #1
 800337a:	e7e8      	b.n	800334e <_printf_float+0x23e>
 800337c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800337e:	2b00      	cmp	r3, #0
 8003380:	dc38      	bgt.n	80033f4 <_printf_float+0x2e4>
 8003382:	2301      	movs	r3, #1
 8003384:	4631      	mov	r1, r6
 8003386:	4628      	mov	r0, r5
 8003388:	4a19      	ldr	r2, [pc, #100]	@ (80033f0 <_printf_float+0x2e0>)
 800338a:	47b8      	blx	r7
 800338c:	3001      	adds	r0, #1
 800338e:	f43f af1a 	beq.w	80031c6 <_printf_float+0xb6>
 8003392:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003396:	ea59 0303 	orrs.w	r3, r9, r3
 800339a:	d102      	bne.n	80033a2 <_printf_float+0x292>
 800339c:	6823      	ldr	r3, [r4, #0]
 800339e:	07d9      	lsls	r1, r3, #31
 80033a0:	d5d7      	bpl.n	8003352 <_printf_float+0x242>
 80033a2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80033a6:	4631      	mov	r1, r6
 80033a8:	4628      	mov	r0, r5
 80033aa:	47b8      	blx	r7
 80033ac:	3001      	adds	r0, #1
 80033ae:	f43f af0a 	beq.w	80031c6 <_printf_float+0xb6>
 80033b2:	f04f 0a00 	mov.w	sl, #0
 80033b6:	f104 0b1a 	add.w	fp, r4, #26
 80033ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80033bc:	425b      	negs	r3, r3
 80033be:	4553      	cmp	r3, sl
 80033c0:	dc01      	bgt.n	80033c6 <_printf_float+0x2b6>
 80033c2:	464b      	mov	r3, r9
 80033c4:	e793      	b.n	80032ee <_printf_float+0x1de>
 80033c6:	2301      	movs	r3, #1
 80033c8:	465a      	mov	r2, fp
 80033ca:	4631      	mov	r1, r6
 80033cc:	4628      	mov	r0, r5
 80033ce:	47b8      	blx	r7
 80033d0:	3001      	adds	r0, #1
 80033d2:	f43f aef8 	beq.w	80031c6 <_printf_float+0xb6>
 80033d6:	f10a 0a01 	add.w	sl, sl, #1
 80033da:	e7ee      	b.n	80033ba <_printf_float+0x2aa>
 80033dc:	7fefffff 	.word	0x7fefffff
 80033e0:	08005e3a 	.word	0x08005e3a
 80033e4:	08005e36 	.word	0x08005e36
 80033e8:	08005e42 	.word	0x08005e42
 80033ec:	08005e3e 	.word	0x08005e3e
 80033f0:	08005e46 	.word	0x08005e46
 80033f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80033f6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80033fa:	4553      	cmp	r3, sl
 80033fc:	bfa8      	it	ge
 80033fe:	4653      	movge	r3, sl
 8003400:	2b00      	cmp	r3, #0
 8003402:	4699      	mov	r9, r3
 8003404:	dc36      	bgt.n	8003474 <_printf_float+0x364>
 8003406:	f04f 0b00 	mov.w	fp, #0
 800340a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800340e:	f104 021a 	add.w	r2, r4, #26
 8003412:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003414:	930a      	str	r3, [sp, #40]	@ 0x28
 8003416:	eba3 0309 	sub.w	r3, r3, r9
 800341a:	455b      	cmp	r3, fp
 800341c:	dc31      	bgt.n	8003482 <_printf_float+0x372>
 800341e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003420:	459a      	cmp	sl, r3
 8003422:	dc3a      	bgt.n	800349a <_printf_float+0x38a>
 8003424:	6823      	ldr	r3, [r4, #0]
 8003426:	07da      	lsls	r2, r3, #31
 8003428:	d437      	bmi.n	800349a <_printf_float+0x38a>
 800342a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800342c:	ebaa 0903 	sub.w	r9, sl, r3
 8003430:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003432:	ebaa 0303 	sub.w	r3, sl, r3
 8003436:	4599      	cmp	r9, r3
 8003438:	bfa8      	it	ge
 800343a:	4699      	movge	r9, r3
 800343c:	f1b9 0f00 	cmp.w	r9, #0
 8003440:	dc33      	bgt.n	80034aa <_printf_float+0x39a>
 8003442:	f04f 0800 	mov.w	r8, #0
 8003446:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800344a:	f104 0b1a 	add.w	fp, r4, #26
 800344e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003450:	ebaa 0303 	sub.w	r3, sl, r3
 8003454:	eba3 0309 	sub.w	r3, r3, r9
 8003458:	4543      	cmp	r3, r8
 800345a:	f77f af7a 	ble.w	8003352 <_printf_float+0x242>
 800345e:	2301      	movs	r3, #1
 8003460:	465a      	mov	r2, fp
 8003462:	4631      	mov	r1, r6
 8003464:	4628      	mov	r0, r5
 8003466:	47b8      	blx	r7
 8003468:	3001      	adds	r0, #1
 800346a:	f43f aeac 	beq.w	80031c6 <_printf_float+0xb6>
 800346e:	f108 0801 	add.w	r8, r8, #1
 8003472:	e7ec      	b.n	800344e <_printf_float+0x33e>
 8003474:	4642      	mov	r2, r8
 8003476:	4631      	mov	r1, r6
 8003478:	4628      	mov	r0, r5
 800347a:	47b8      	blx	r7
 800347c:	3001      	adds	r0, #1
 800347e:	d1c2      	bne.n	8003406 <_printf_float+0x2f6>
 8003480:	e6a1      	b.n	80031c6 <_printf_float+0xb6>
 8003482:	2301      	movs	r3, #1
 8003484:	4631      	mov	r1, r6
 8003486:	4628      	mov	r0, r5
 8003488:	920a      	str	r2, [sp, #40]	@ 0x28
 800348a:	47b8      	blx	r7
 800348c:	3001      	adds	r0, #1
 800348e:	f43f ae9a 	beq.w	80031c6 <_printf_float+0xb6>
 8003492:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003494:	f10b 0b01 	add.w	fp, fp, #1
 8003498:	e7bb      	b.n	8003412 <_printf_float+0x302>
 800349a:	4631      	mov	r1, r6
 800349c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80034a0:	4628      	mov	r0, r5
 80034a2:	47b8      	blx	r7
 80034a4:	3001      	adds	r0, #1
 80034a6:	d1c0      	bne.n	800342a <_printf_float+0x31a>
 80034a8:	e68d      	b.n	80031c6 <_printf_float+0xb6>
 80034aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80034ac:	464b      	mov	r3, r9
 80034ae:	4631      	mov	r1, r6
 80034b0:	4628      	mov	r0, r5
 80034b2:	4442      	add	r2, r8
 80034b4:	47b8      	blx	r7
 80034b6:	3001      	adds	r0, #1
 80034b8:	d1c3      	bne.n	8003442 <_printf_float+0x332>
 80034ba:	e684      	b.n	80031c6 <_printf_float+0xb6>
 80034bc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80034c0:	f1ba 0f01 	cmp.w	sl, #1
 80034c4:	dc01      	bgt.n	80034ca <_printf_float+0x3ba>
 80034c6:	07db      	lsls	r3, r3, #31
 80034c8:	d536      	bpl.n	8003538 <_printf_float+0x428>
 80034ca:	2301      	movs	r3, #1
 80034cc:	4642      	mov	r2, r8
 80034ce:	4631      	mov	r1, r6
 80034d0:	4628      	mov	r0, r5
 80034d2:	47b8      	blx	r7
 80034d4:	3001      	adds	r0, #1
 80034d6:	f43f ae76 	beq.w	80031c6 <_printf_float+0xb6>
 80034da:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80034de:	4631      	mov	r1, r6
 80034e0:	4628      	mov	r0, r5
 80034e2:	47b8      	blx	r7
 80034e4:	3001      	adds	r0, #1
 80034e6:	f43f ae6e 	beq.w	80031c6 <_printf_float+0xb6>
 80034ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80034ee:	2200      	movs	r2, #0
 80034f0:	2300      	movs	r3, #0
 80034f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80034f6:	f7fd fa57 	bl	80009a8 <__aeabi_dcmpeq>
 80034fa:	b9c0      	cbnz	r0, 800352e <_printf_float+0x41e>
 80034fc:	4653      	mov	r3, sl
 80034fe:	f108 0201 	add.w	r2, r8, #1
 8003502:	4631      	mov	r1, r6
 8003504:	4628      	mov	r0, r5
 8003506:	47b8      	blx	r7
 8003508:	3001      	adds	r0, #1
 800350a:	d10c      	bne.n	8003526 <_printf_float+0x416>
 800350c:	e65b      	b.n	80031c6 <_printf_float+0xb6>
 800350e:	2301      	movs	r3, #1
 8003510:	465a      	mov	r2, fp
 8003512:	4631      	mov	r1, r6
 8003514:	4628      	mov	r0, r5
 8003516:	47b8      	blx	r7
 8003518:	3001      	adds	r0, #1
 800351a:	f43f ae54 	beq.w	80031c6 <_printf_float+0xb6>
 800351e:	f108 0801 	add.w	r8, r8, #1
 8003522:	45d0      	cmp	r8, sl
 8003524:	dbf3      	blt.n	800350e <_printf_float+0x3fe>
 8003526:	464b      	mov	r3, r9
 8003528:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800352c:	e6e0      	b.n	80032f0 <_printf_float+0x1e0>
 800352e:	f04f 0800 	mov.w	r8, #0
 8003532:	f104 0b1a 	add.w	fp, r4, #26
 8003536:	e7f4      	b.n	8003522 <_printf_float+0x412>
 8003538:	2301      	movs	r3, #1
 800353a:	4642      	mov	r2, r8
 800353c:	e7e1      	b.n	8003502 <_printf_float+0x3f2>
 800353e:	2301      	movs	r3, #1
 8003540:	464a      	mov	r2, r9
 8003542:	4631      	mov	r1, r6
 8003544:	4628      	mov	r0, r5
 8003546:	47b8      	blx	r7
 8003548:	3001      	adds	r0, #1
 800354a:	f43f ae3c 	beq.w	80031c6 <_printf_float+0xb6>
 800354e:	f108 0801 	add.w	r8, r8, #1
 8003552:	68e3      	ldr	r3, [r4, #12]
 8003554:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003556:	1a5b      	subs	r3, r3, r1
 8003558:	4543      	cmp	r3, r8
 800355a:	dcf0      	bgt.n	800353e <_printf_float+0x42e>
 800355c:	e6fd      	b.n	800335a <_printf_float+0x24a>
 800355e:	f04f 0800 	mov.w	r8, #0
 8003562:	f104 0919 	add.w	r9, r4, #25
 8003566:	e7f4      	b.n	8003552 <_printf_float+0x442>

08003568 <_printf_common>:
 8003568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800356c:	4616      	mov	r6, r2
 800356e:	4698      	mov	r8, r3
 8003570:	688a      	ldr	r2, [r1, #8]
 8003572:	690b      	ldr	r3, [r1, #16]
 8003574:	4607      	mov	r7, r0
 8003576:	4293      	cmp	r3, r2
 8003578:	bfb8      	it	lt
 800357a:	4613      	movlt	r3, r2
 800357c:	6033      	str	r3, [r6, #0]
 800357e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003582:	460c      	mov	r4, r1
 8003584:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003588:	b10a      	cbz	r2, 800358e <_printf_common+0x26>
 800358a:	3301      	adds	r3, #1
 800358c:	6033      	str	r3, [r6, #0]
 800358e:	6823      	ldr	r3, [r4, #0]
 8003590:	0699      	lsls	r1, r3, #26
 8003592:	bf42      	ittt	mi
 8003594:	6833      	ldrmi	r3, [r6, #0]
 8003596:	3302      	addmi	r3, #2
 8003598:	6033      	strmi	r3, [r6, #0]
 800359a:	6825      	ldr	r5, [r4, #0]
 800359c:	f015 0506 	ands.w	r5, r5, #6
 80035a0:	d106      	bne.n	80035b0 <_printf_common+0x48>
 80035a2:	f104 0a19 	add.w	sl, r4, #25
 80035a6:	68e3      	ldr	r3, [r4, #12]
 80035a8:	6832      	ldr	r2, [r6, #0]
 80035aa:	1a9b      	subs	r3, r3, r2
 80035ac:	42ab      	cmp	r3, r5
 80035ae:	dc2b      	bgt.n	8003608 <_printf_common+0xa0>
 80035b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80035b4:	6822      	ldr	r2, [r4, #0]
 80035b6:	3b00      	subs	r3, #0
 80035b8:	bf18      	it	ne
 80035ba:	2301      	movne	r3, #1
 80035bc:	0692      	lsls	r2, r2, #26
 80035be:	d430      	bmi.n	8003622 <_printf_common+0xba>
 80035c0:	4641      	mov	r1, r8
 80035c2:	4638      	mov	r0, r7
 80035c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80035c8:	47c8      	blx	r9
 80035ca:	3001      	adds	r0, #1
 80035cc:	d023      	beq.n	8003616 <_printf_common+0xae>
 80035ce:	6823      	ldr	r3, [r4, #0]
 80035d0:	6922      	ldr	r2, [r4, #16]
 80035d2:	f003 0306 	and.w	r3, r3, #6
 80035d6:	2b04      	cmp	r3, #4
 80035d8:	bf14      	ite	ne
 80035da:	2500      	movne	r5, #0
 80035dc:	6833      	ldreq	r3, [r6, #0]
 80035de:	f04f 0600 	mov.w	r6, #0
 80035e2:	bf08      	it	eq
 80035e4:	68e5      	ldreq	r5, [r4, #12]
 80035e6:	f104 041a 	add.w	r4, r4, #26
 80035ea:	bf08      	it	eq
 80035ec:	1aed      	subeq	r5, r5, r3
 80035ee:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80035f2:	bf08      	it	eq
 80035f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035f8:	4293      	cmp	r3, r2
 80035fa:	bfc4      	itt	gt
 80035fc:	1a9b      	subgt	r3, r3, r2
 80035fe:	18ed      	addgt	r5, r5, r3
 8003600:	42b5      	cmp	r5, r6
 8003602:	d11a      	bne.n	800363a <_printf_common+0xd2>
 8003604:	2000      	movs	r0, #0
 8003606:	e008      	b.n	800361a <_printf_common+0xb2>
 8003608:	2301      	movs	r3, #1
 800360a:	4652      	mov	r2, sl
 800360c:	4641      	mov	r1, r8
 800360e:	4638      	mov	r0, r7
 8003610:	47c8      	blx	r9
 8003612:	3001      	adds	r0, #1
 8003614:	d103      	bne.n	800361e <_printf_common+0xb6>
 8003616:	f04f 30ff 	mov.w	r0, #4294967295
 800361a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800361e:	3501      	adds	r5, #1
 8003620:	e7c1      	b.n	80035a6 <_printf_common+0x3e>
 8003622:	2030      	movs	r0, #48	@ 0x30
 8003624:	18e1      	adds	r1, r4, r3
 8003626:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800362a:	1c5a      	adds	r2, r3, #1
 800362c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003630:	4422      	add	r2, r4
 8003632:	3302      	adds	r3, #2
 8003634:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003638:	e7c2      	b.n	80035c0 <_printf_common+0x58>
 800363a:	2301      	movs	r3, #1
 800363c:	4622      	mov	r2, r4
 800363e:	4641      	mov	r1, r8
 8003640:	4638      	mov	r0, r7
 8003642:	47c8      	blx	r9
 8003644:	3001      	adds	r0, #1
 8003646:	d0e6      	beq.n	8003616 <_printf_common+0xae>
 8003648:	3601      	adds	r6, #1
 800364a:	e7d9      	b.n	8003600 <_printf_common+0x98>

0800364c <_printf_i>:
 800364c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003650:	7e0f      	ldrb	r7, [r1, #24]
 8003652:	4691      	mov	r9, r2
 8003654:	2f78      	cmp	r7, #120	@ 0x78
 8003656:	4680      	mov	r8, r0
 8003658:	460c      	mov	r4, r1
 800365a:	469a      	mov	sl, r3
 800365c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800365e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003662:	d807      	bhi.n	8003674 <_printf_i+0x28>
 8003664:	2f62      	cmp	r7, #98	@ 0x62
 8003666:	d80a      	bhi.n	800367e <_printf_i+0x32>
 8003668:	2f00      	cmp	r7, #0
 800366a:	f000 80d1 	beq.w	8003810 <_printf_i+0x1c4>
 800366e:	2f58      	cmp	r7, #88	@ 0x58
 8003670:	f000 80b8 	beq.w	80037e4 <_printf_i+0x198>
 8003674:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003678:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800367c:	e03a      	b.n	80036f4 <_printf_i+0xa8>
 800367e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003682:	2b15      	cmp	r3, #21
 8003684:	d8f6      	bhi.n	8003674 <_printf_i+0x28>
 8003686:	a101      	add	r1, pc, #4	@ (adr r1, 800368c <_printf_i+0x40>)
 8003688:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800368c:	080036e5 	.word	0x080036e5
 8003690:	080036f9 	.word	0x080036f9
 8003694:	08003675 	.word	0x08003675
 8003698:	08003675 	.word	0x08003675
 800369c:	08003675 	.word	0x08003675
 80036a0:	08003675 	.word	0x08003675
 80036a4:	080036f9 	.word	0x080036f9
 80036a8:	08003675 	.word	0x08003675
 80036ac:	08003675 	.word	0x08003675
 80036b0:	08003675 	.word	0x08003675
 80036b4:	08003675 	.word	0x08003675
 80036b8:	080037f7 	.word	0x080037f7
 80036bc:	08003723 	.word	0x08003723
 80036c0:	080037b1 	.word	0x080037b1
 80036c4:	08003675 	.word	0x08003675
 80036c8:	08003675 	.word	0x08003675
 80036cc:	08003819 	.word	0x08003819
 80036d0:	08003675 	.word	0x08003675
 80036d4:	08003723 	.word	0x08003723
 80036d8:	08003675 	.word	0x08003675
 80036dc:	08003675 	.word	0x08003675
 80036e0:	080037b9 	.word	0x080037b9
 80036e4:	6833      	ldr	r3, [r6, #0]
 80036e6:	1d1a      	adds	r2, r3, #4
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6032      	str	r2, [r6, #0]
 80036ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80036f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80036f4:	2301      	movs	r3, #1
 80036f6:	e09c      	b.n	8003832 <_printf_i+0x1e6>
 80036f8:	6833      	ldr	r3, [r6, #0]
 80036fa:	6820      	ldr	r0, [r4, #0]
 80036fc:	1d19      	adds	r1, r3, #4
 80036fe:	6031      	str	r1, [r6, #0]
 8003700:	0606      	lsls	r6, r0, #24
 8003702:	d501      	bpl.n	8003708 <_printf_i+0xbc>
 8003704:	681d      	ldr	r5, [r3, #0]
 8003706:	e003      	b.n	8003710 <_printf_i+0xc4>
 8003708:	0645      	lsls	r5, r0, #25
 800370a:	d5fb      	bpl.n	8003704 <_printf_i+0xb8>
 800370c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003710:	2d00      	cmp	r5, #0
 8003712:	da03      	bge.n	800371c <_printf_i+0xd0>
 8003714:	232d      	movs	r3, #45	@ 0x2d
 8003716:	426d      	negs	r5, r5
 8003718:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800371c:	230a      	movs	r3, #10
 800371e:	4858      	ldr	r0, [pc, #352]	@ (8003880 <_printf_i+0x234>)
 8003720:	e011      	b.n	8003746 <_printf_i+0xfa>
 8003722:	6821      	ldr	r1, [r4, #0]
 8003724:	6833      	ldr	r3, [r6, #0]
 8003726:	0608      	lsls	r0, r1, #24
 8003728:	f853 5b04 	ldr.w	r5, [r3], #4
 800372c:	d402      	bmi.n	8003734 <_printf_i+0xe8>
 800372e:	0649      	lsls	r1, r1, #25
 8003730:	bf48      	it	mi
 8003732:	b2ad      	uxthmi	r5, r5
 8003734:	2f6f      	cmp	r7, #111	@ 0x6f
 8003736:	6033      	str	r3, [r6, #0]
 8003738:	bf14      	ite	ne
 800373a:	230a      	movne	r3, #10
 800373c:	2308      	moveq	r3, #8
 800373e:	4850      	ldr	r0, [pc, #320]	@ (8003880 <_printf_i+0x234>)
 8003740:	2100      	movs	r1, #0
 8003742:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003746:	6866      	ldr	r6, [r4, #4]
 8003748:	2e00      	cmp	r6, #0
 800374a:	60a6      	str	r6, [r4, #8]
 800374c:	db05      	blt.n	800375a <_printf_i+0x10e>
 800374e:	6821      	ldr	r1, [r4, #0]
 8003750:	432e      	orrs	r6, r5
 8003752:	f021 0104 	bic.w	r1, r1, #4
 8003756:	6021      	str	r1, [r4, #0]
 8003758:	d04b      	beq.n	80037f2 <_printf_i+0x1a6>
 800375a:	4616      	mov	r6, r2
 800375c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003760:	fb03 5711 	mls	r7, r3, r1, r5
 8003764:	5dc7      	ldrb	r7, [r0, r7]
 8003766:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800376a:	462f      	mov	r7, r5
 800376c:	42bb      	cmp	r3, r7
 800376e:	460d      	mov	r5, r1
 8003770:	d9f4      	bls.n	800375c <_printf_i+0x110>
 8003772:	2b08      	cmp	r3, #8
 8003774:	d10b      	bne.n	800378e <_printf_i+0x142>
 8003776:	6823      	ldr	r3, [r4, #0]
 8003778:	07df      	lsls	r7, r3, #31
 800377a:	d508      	bpl.n	800378e <_printf_i+0x142>
 800377c:	6923      	ldr	r3, [r4, #16]
 800377e:	6861      	ldr	r1, [r4, #4]
 8003780:	4299      	cmp	r1, r3
 8003782:	bfde      	ittt	le
 8003784:	2330      	movle	r3, #48	@ 0x30
 8003786:	f806 3c01 	strble.w	r3, [r6, #-1]
 800378a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800378e:	1b92      	subs	r2, r2, r6
 8003790:	6122      	str	r2, [r4, #16]
 8003792:	464b      	mov	r3, r9
 8003794:	4621      	mov	r1, r4
 8003796:	4640      	mov	r0, r8
 8003798:	f8cd a000 	str.w	sl, [sp]
 800379c:	aa03      	add	r2, sp, #12
 800379e:	f7ff fee3 	bl	8003568 <_printf_common>
 80037a2:	3001      	adds	r0, #1
 80037a4:	d14a      	bne.n	800383c <_printf_i+0x1f0>
 80037a6:	f04f 30ff 	mov.w	r0, #4294967295
 80037aa:	b004      	add	sp, #16
 80037ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037b0:	6823      	ldr	r3, [r4, #0]
 80037b2:	f043 0320 	orr.w	r3, r3, #32
 80037b6:	6023      	str	r3, [r4, #0]
 80037b8:	2778      	movs	r7, #120	@ 0x78
 80037ba:	4832      	ldr	r0, [pc, #200]	@ (8003884 <_printf_i+0x238>)
 80037bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80037c0:	6823      	ldr	r3, [r4, #0]
 80037c2:	6831      	ldr	r1, [r6, #0]
 80037c4:	061f      	lsls	r7, r3, #24
 80037c6:	f851 5b04 	ldr.w	r5, [r1], #4
 80037ca:	d402      	bmi.n	80037d2 <_printf_i+0x186>
 80037cc:	065f      	lsls	r7, r3, #25
 80037ce:	bf48      	it	mi
 80037d0:	b2ad      	uxthmi	r5, r5
 80037d2:	6031      	str	r1, [r6, #0]
 80037d4:	07d9      	lsls	r1, r3, #31
 80037d6:	bf44      	itt	mi
 80037d8:	f043 0320 	orrmi.w	r3, r3, #32
 80037dc:	6023      	strmi	r3, [r4, #0]
 80037de:	b11d      	cbz	r5, 80037e8 <_printf_i+0x19c>
 80037e0:	2310      	movs	r3, #16
 80037e2:	e7ad      	b.n	8003740 <_printf_i+0xf4>
 80037e4:	4826      	ldr	r0, [pc, #152]	@ (8003880 <_printf_i+0x234>)
 80037e6:	e7e9      	b.n	80037bc <_printf_i+0x170>
 80037e8:	6823      	ldr	r3, [r4, #0]
 80037ea:	f023 0320 	bic.w	r3, r3, #32
 80037ee:	6023      	str	r3, [r4, #0]
 80037f0:	e7f6      	b.n	80037e0 <_printf_i+0x194>
 80037f2:	4616      	mov	r6, r2
 80037f4:	e7bd      	b.n	8003772 <_printf_i+0x126>
 80037f6:	6833      	ldr	r3, [r6, #0]
 80037f8:	6825      	ldr	r5, [r4, #0]
 80037fa:	1d18      	adds	r0, r3, #4
 80037fc:	6961      	ldr	r1, [r4, #20]
 80037fe:	6030      	str	r0, [r6, #0]
 8003800:	062e      	lsls	r6, r5, #24
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	d501      	bpl.n	800380a <_printf_i+0x1be>
 8003806:	6019      	str	r1, [r3, #0]
 8003808:	e002      	b.n	8003810 <_printf_i+0x1c4>
 800380a:	0668      	lsls	r0, r5, #25
 800380c:	d5fb      	bpl.n	8003806 <_printf_i+0x1ba>
 800380e:	8019      	strh	r1, [r3, #0]
 8003810:	2300      	movs	r3, #0
 8003812:	4616      	mov	r6, r2
 8003814:	6123      	str	r3, [r4, #16]
 8003816:	e7bc      	b.n	8003792 <_printf_i+0x146>
 8003818:	6833      	ldr	r3, [r6, #0]
 800381a:	2100      	movs	r1, #0
 800381c:	1d1a      	adds	r2, r3, #4
 800381e:	6032      	str	r2, [r6, #0]
 8003820:	681e      	ldr	r6, [r3, #0]
 8003822:	6862      	ldr	r2, [r4, #4]
 8003824:	4630      	mov	r0, r6
 8003826:	f000 f9ea 	bl	8003bfe <memchr>
 800382a:	b108      	cbz	r0, 8003830 <_printf_i+0x1e4>
 800382c:	1b80      	subs	r0, r0, r6
 800382e:	6060      	str	r0, [r4, #4]
 8003830:	6863      	ldr	r3, [r4, #4]
 8003832:	6123      	str	r3, [r4, #16]
 8003834:	2300      	movs	r3, #0
 8003836:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800383a:	e7aa      	b.n	8003792 <_printf_i+0x146>
 800383c:	4632      	mov	r2, r6
 800383e:	4649      	mov	r1, r9
 8003840:	4640      	mov	r0, r8
 8003842:	6923      	ldr	r3, [r4, #16]
 8003844:	47d0      	blx	sl
 8003846:	3001      	adds	r0, #1
 8003848:	d0ad      	beq.n	80037a6 <_printf_i+0x15a>
 800384a:	6823      	ldr	r3, [r4, #0]
 800384c:	079b      	lsls	r3, r3, #30
 800384e:	d413      	bmi.n	8003878 <_printf_i+0x22c>
 8003850:	68e0      	ldr	r0, [r4, #12]
 8003852:	9b03      	ldr	r3, [sp, #12]
 8003854:	4298      	cmp	r0, r3
 8003856:	bfb8      	it	lt
 8003858:	4618      	movlt	r0, r3
 800385a:	e7a6      	b.n	80037aa <_printf_i+0x15e>
 800385c:	2301      	movs	r3, #1
 800385e:	4632      	mov	r2, r6
 8003860:	4649      	mov	r1, r9
 8003862:	4640      	mov	r0, r8
 8003864:	47d0      	blx	sl
 8003866:	3001      	adds	r0, #1
 8003868:	d09d      	beq.n	80037a6 <_printf_i+0x15a>
 800386a:	3501      	adds	r5, #1
 800386c:	68e3      	ldr	r3, [r4, #12]
 800386e:	9903      	ldr	r1, [sp, #12]
 8003870:	1a5b      	subs	r3, r3, r1
 8003872:	42ab      	cmp	r3, r5
 8003874:	dcf2      	bgt.n	800385c <_printf_i+0x210>
 8003876:	e7eb      	b.n	8003850 <_printf_i+0x204>
 8003878:	2500      	movs	r5, #0
 800387a:	f104 0619 	add.w	r6, r4, #25
 800387e:	e7f5      	b.n	800386c <_printf_i+0x220>
 8003880:	08005e48 	.word	0x08005e48
 8003884:	08005e59 	.word	0x08005e59

08003888 <std>:
 8003888:	2300      	movs	r3, #0
 800388a:	b510      	push	{r4, lr}
 800388c:	4604      	mov	r4, r0
 800388e:	e9c0 3300 	strd	r3, r3, [r0]
 8003892:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003896:	6083      	str	r3, [r0, #8]
 8003898:	8181      	strh	r1, [r0, #12]
 800389a:	6643      	str	r3, [r0, #100]	@ 0x64
 800389c:	81c2      	strh	r2, [r0, #14]
 800389e:	6183      	str	r3, [r0, #24]
 80038a0:	4619      	mov	r1, r3
 80038a2:	2208      	movs	r2, #8
 80038a4:	305c      	adds	r0, #92	@ 0x5c
 80038a6:	f000 f92a 	bl	8003afe <memset>
 80038aa:	4b0d      	ldr	r3, [pc, #52]	@ (80038e0 <std+0x58>)
 80038ac:	6224      	str	r4, [r4, #32]
 80038ae:	6263      	str	r3, [r4, #36]	@ 0x24
 80038b0:	4b0c      	ldr	r3, [pc, #48]	@ (80038e4 <std+0x5c>)
 80038b2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80038b4:	4b0c      	ldr	r3, [pc, #48]	@ (80038e8 <std+0x60>)
 80038b6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80038b8:	4b0c      	ldr	r3, [pc, #48]	@ (80038ec <std+0x64>)
 80038ba:	6323      	str	r3, [r4, #48]	@ 0x30
 80038bc:	4b0c      	ldr	r3, [pc, #48]	@ (80038f0 <std+0x68>)
 80038be:	429c      	cmp	r4, r3
 80038c0:	d006      	beq.n	80038d0 <std+0x48>
 80038c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80038c6:	4294      	cmp	r4, r2
 80038c8:	d002      	beq.n	80038d0 <std+0x48>
 80038ca:	33d0      	adds	r3, #208	@ 0xd0
 80038cc:	429c      	cmp	r4, r3
 80038ce:	d105      	bne.n	80038dc <std+0x54>
 80038d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80038d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038d8:	f000 b98e 	b.w	8003bf8 <__retarget_lock_init_recursive>
 80038dc:	bd10      	pop	{r4, pc}
 80038de:	bf00      	nop
 80038e0:	08003a79 	.word	0x08003a79
 80038e4:	08003a9b 	.word	0x08003a9b
 80038e8:	08003ad3 	.word	0x08003ad3
 80038ec:	08003af7 	.word	0x08003af7
 80038f0:	200003f8 	.word	0x200003f8

080038f4 <stdio_exit_handler>:
 80038f4:	4a02      	ldr	r2, [pc, #8]	@ (8003900 <stdio_exit_handler+0xc>)
 80038f6:	4903      	ldr	r1, [pc, #12]	@ (8003904 <stdio_exit_handler+0x10>)
 80038f8:	4803      	ldr	r0, [pc, #12]	@ (8003908 <stdio_exit_handler+0x14>)
 80038fa:	f000 b869 	b.w	80039d0 <_fwalk_sglue>
 80038fe:	bf00      	nop
 8003900:	2000000c 	.word	0x2000000c
 8003904:	08005579 	.word	0x08005579
 8003908:	2000001c 	.word	0x2000001c

0800390c <cleanup_stdio>:
 800390c:	6841      	ldr	r1, [r0, #4]
 800390e:	4b0c      	ldr	r3, [pc, #48]	@ (8003940 <cleanup_stdio+0x34>)
 8003910:	b510      	push	{r4, lr}
 8003912:	4299      	cmp	r1, r3
 8003914:	4604      	mov	r4, r0
 8003916:	d001      	beq.n	800391c <cleanup_stdio+0x10>
 8003918:	f001 fe2e 	bl	8005578 <_fflush_r>
 800391c:	68a1      	ldr	r1, [r4, #8]
 800391e:	4b09      	ldr	r3, [pc, #36]	@ (8003944 <cleanup_stdio+0x38>)
 8003920:	4299      	cmp	r1, r3
 8003922:	d002      	beq.n	800392a <cleanup_stdio+0x1e>
 8003924:	4620      	mov	r0, r4
 8003926:	f001 fe27 	bl	8005578 <_fflush_r>
 800392a:	68e1      	ldr	r1, [r4, #12]
 800392c:	4b06      	ldr	r3, [pc, #24]	@ (8003948 <cleanup_stdio+0x3c>)
 800392e:	4299      	cmp	r1, r3
 8003930:	d004      	beq.n	800393c <cleanup_stdio+0x30>
 8003932:	4620      	mov	r0, r4
 8003934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003938:	f001 be1e 	b.w	8005578 <_fflush_r>
 800393c:	bd10      	pop	{r4, pc}
 800393e:	bf00      	nop
 8003940:	200003f8 	.word	0x200003f8
 8003944:	20000460 	.word	0x20000460
 8003948:	200004c8 	.word	0x200004c8

0800394c <global_stdio_init.part.0>:
 800394c:	b510      	push	{r4, lr}
 800394e:	4b0b      	ldr	r3, [pc, #44]	@ (800397c <global_stdio_init.part.0+0x30>)
 8003950:	4c0b      	ldr	r4, [pc, #44]	@ (8003980 <global_stdio_init.part.0+0x34>)
 8003952:	4a0c      	ldr	r2, [pc, #48]	@ (8003984 <global_stdio_init.part.0+0x38>)
 8003954:	4620      	mov	r0, r4
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	2104      	movs	r1, #4
 800395a:	2200      	movs	r2, #0
 800395c:	f7ff ff94 	bl	8003888 <std>
 8003960:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003964:	2201      	movs	r2, #1
 8003966:	2109      	movs	r1, #9
 8003968:	f7ff ff8e 	bl	8003888 <std>
 800396c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003970:	2202      	movs	r2, #2
 8003972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003976:	2112      	movs	r1, #18
 8003978:	f7ff bf86 	b.w	8003888 <std>
 800397c:	20000530 	.word	0x20000530
 8003980:	200003f8 	.word	0x200003f8
 8003984:	080038f5 	.word	0x080038f5

08003988 <__sfp_lock_acquire>:
 8003988:	4801      	ldr	r0, [pc, #4]	@ (8003990 <__sfp_lock_acquire+0x8>)
 800398a:	f000 b936 	b.w	8003bfa <__retarget_lock_acquire_recursive>
 800398e:	bf00      	nop
 8003990:	20000539 	.word	0x20000539

08003994 <__sfp_lock_release>:
 8003994:	4801      	ldr	r0, [pc, #4]	@ (800399c <__sfp_lock_release+0x8>)
 8003996:	f000 b931 	b.w	8003bfc <__retarget_lock_release_recursive>
 800399a:	bf00      	nop
 800399c:	20000539 	.word	0x20000539

080039a0 <__sinit>:
 80039a0:	b510      	push	{r4, lr}
 80039a2:	4604      	mov	r4, r0
 80039a4:	f7ff fff0 	bl	8003988 <__sfp_lock_acquire>
 80039a8:	6a23      	ldr	r3, [r4, #32]
 80039aa:	b11b      	cbz	r3, 80039b4 <__sinit+0x14>
 80039ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039b0:	f7ff bff0 	b.w	8003994 <__sfp_lock_release>
 80039b4:	4b04      	ldr	r3, [pc, #16]	@ (80039c8 <__sinit+0x28>)
 80039b6:	6223      	str	r3, [r4, #32]
 80039b8:	4b04      	ldr	r3, [pc, #16]	@ (80039cc <__sinit+0x2c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1f5      	bne.n	80039ac <__sinit+0xc>
 80039c0:	f7ff ffc4 	bl	800394c <global_stdio_init.part.0>
 80039c4:	e7f2      	b.n	80039ac <__sinit+0xc>
 80039c6:	bf00      	nop
 80039c8:	0800390d 	.word	0x0800390d
 80039cc:	20000530 	.word	0x20000530

080039d0 <_fwalk_sglue>:
 80039d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039d4:	4607      	mov	r7, r0
 80039d6:	4688      	mov	r8, r1
 80039d8:	4614      	mov	r4, r2
 80039da:	2600      	movs	r6, #0
 80039dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80039e0:	f1b9 0901 	subs.w	r9, r9, #1
 80039e4:	d505      	bpl.n	80039f2 <_fwalk_sglue+0x22>
 80039e6:	6824      	ldr	r4, [r4, #0]
 80039e8:	2c00      	cmp	r4, #0
 80039ea:	d1f7      	bne.n	80039dc <_fwalk_sglue+0xc>
 80039ec:	4630      	mov	r0, r6
 80039ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039f2:	89ab      	ldrh	r3, [r5, #12]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d907      	bls.n	8003a08 <_fwalk_sglue+0x38>
 80039f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80039fc:	3301      	adds	r3, #1
 80039fe:	d003      	beq.n	8003a08 <_fwalk_sglue+0x38>
 8003a00:	4629      	mov	r1, r5
 8003a02:	4638      	mov	r0, r7
 8003a04:	47c0      	blx	r8
 8003a06:	4306      	orrs	r6, r0
 8003a08:	3568      	adds	r5, #104	@ 0x68
 8003a0a:	e7e9      	b.n	80039e0 <_fwalk_sglue+0x10>

08003a0c <sniprintf>:
 8003a0c:	b40c      	push	{r2, r3}
 8003a0e:	b530      	push	{r4, r5, lr}
 8003a10:	4b18      	ldr	r3, [pc, #96]	@ (8003a74 <sniprintf+0x68>)
 8003a12:	1e0c      	subs	r4, r1, #0
 8003a14:	681d      	ldr	r5, [r3, #0]
 8003a16:	b09d      	sub	sp, #116	@ 0x74
 8003a18:	da08      	bge.n	8003a2c <sniprintf+0x20>
 8003a1a:	238b      	movs	r3, #139	@ 0x8b
 8003a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a20:	602b      	str	r3, [r5, #0]
 8003a22:	b01d      	add	sp, #116	@ 0x74
 8003a24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a28:	b002      	add	sp, #8
 8003a2a:	4770      	bx	lr
 8003a2c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003a30:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003a34:	f04f 0300 	mov.w	r3, #0
 8003a38:	931b      	str	r3, [sp, #108]	@ 0x6c
 8003a3a:	bf0c      	ite	eq
 8003a3c:	4623      	moveq	r3, r4
 8003a3e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003a42:	9304      	str	r3, [sp, #16]
 8003a44:	9307      	str	r3, [sp, #28]
 8003a46:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a4a:	9002      	str	r0, [sp, #8]
 8003a4c:	9006      	str	r0, [sp, #24]
 8003a4e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003a52:	4628      	mov	r0, r5
 8003a54:	ab21      	add	r3, sp, #132	@ 0x84
 8003a56:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003a58:	a902      	add	r1, sp, #8
 8003a5a:	9301      	str	r3, [sp, #4]
 8003a5c:	f001 fc10 	bl	8005280 <_svfiprintf_r>
 8003a60:	1c43      	adds	r3, r0, #1
 8003a62:	bfbc      	itt	lt
 8003a64:	238b      	movlt	r3, #139	@ 0x8b
 8003a66:	602b      	strlt	r3, [r5, #0]
 8003a68:	2c00      	cmp	r4, #0
 8003a6a:	d0da      	beq.n	8003a22 <sniprintf+0x16>
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	9b02      	ldr	r3, [sp, #8]
 8003a70:	701a      	strb	r2, [r3, #0]
 8003a72:	e7d6      	b.n	8003a22 <sniprintf+0x16>
 8003a74:	20000018 	.word	0x20000018

08003a78 <__sread>:
 8003a78:	b510      	push	{r4, lr}
 8003a7a:	460c      	mov	r4, r1
 8003a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a80:	f000 f86c 	bl	8003b5c <_read_r>
 8003a84:	2800      	cmp	r0, #0
 8003a86:	bfab      	itete	ge
 8003a88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003a8a:	89a3      	ldrhlt	r3, [r4, #12]
 8003a8c:	181b      	addge	r3, r3, r0
 8003a8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003a92:	bfac      	ite	ge
 8003a94:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003a96:	81a3      	strhlt	r3, [r4, #12]
 8003a98:	bd10      	pop	{r4, pc}

08003a9a <__swrite>:
 8003a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a9e:	461f      	mov	r7, r3
 8003aa0:	898b      	ldrh	r3, [r1, #12]
 8003aa2:	4605      	mov	r5, r0
 8003aa4:	05db      	lsls	r3, r3, #23
 8003aa6:	460c      	mov	r4, r1
 8003aa8:	4616      	mov	r6, r2
 8003aaa:	d505      	bpl.n	8003ab8 <__swrite+0x1e>
 8003aac:	2302      	movs	r3, #2
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ab4:	f000 f840 	bl	8003b38 <_lseek_r>
 8003ab8:	89a3      	ldrh	r3, [r4, #12]
 8003aba:	4632      	mov	r2, r6
 8003abc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ac0:	81a3      	strh	r3, [r4, #12]
 8003ac2:	4628      	mov	r0, r5
 8003ac4:	463b      	mov	r3, r7
 8003ac6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003aca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ace:	f000 b857 	b.w	8003b80 <_write_r>

08003ad2 <__sseek>:
 8003ad2:	b510      	push	{r4, lr}
 8003ad4:	460c      	mov	r4, r1
 8003ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ada:	f000 f82d 	bl	8003b38 <_lseek_r>
 8003ade:	1c43      	adds	r3, r0, #1
 8003ae0:	89a3      	ldrh	r3, [r4, #12]
 8003ae2:	bf15      	itete	ne
 8003ae4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003ae6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003aea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003aee:	81a3      	strheq	r3, [r4, #12]
 8003af0:	bf18      	it	ne
 8003af2:	81a3      	strhne	r3, [r4, #12]
 8003af4:	bd10      	pop	{r4, pc}

08003af6 <__sclose>:
 8003af6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003afa:	f000 b80d 	b.w	8003b18 <_close_r>

08003afe <memset>:
 8003afe:	4603      	mov	r3, r0
 8003b00:	4402      	add	r2, r0
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d100      	bne.n	8003b08 <memset+0xa>
 8003b06:	4770      	bx	lr
 8003b08:	f803 1b01 	strb.w	r1, [r3], #1
 8003b0c:	e7f9      	b.n	8003b02 <memset+0x4>
	...

08003b10 <_localeconv_r>:
 8003b10:	4800      	ldr	r0, [pc, #0]	@ (8003b14 <_localeconv_r+0x4>)
 8003b12:	4770      	bx	lr
 8003b14:	20000158 	.word	0x20000158

08003b18 <_close_r>:
 8003b18:	b538      	push	{r3, r4, r5, lr}
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	4d05      	ldr	r5, [pc, #20]	@ (8003b34 <_close_r+0x1c>)
 8003b1e:	4604      	mov	r4, r0
 8003b20:	4608      	mov	r0, r1
 8003b22:	602b      	str	r3, [r5, #0]
 8003b24:	f7fd fd13 	bl	800154e <_close>
 8003b28:	1c43      	adds	r3, r0, #1
 8003b2a:	d102      	bne.n	8003b32 <_close_r+0x1a>
 8003b2c:	682b      	ldr	r3, [r5, #0]
 8003b2e:	b103      	cbz	r3, 8003b32 <_close_r+0x1a>
 8003b30:	6023      	str	r3, [r4, #0]
 8003b32:	bd38      	pop	{r3, r4, r5, pc}
 8003b34:	20000534 	.word	0x20000534

08003b38 <_lseek_r>:
 8003b38:	b538      	push	{r3, r4, r5, lr}
 8003b3a:	4604      	mov	r4, r0
 8003b3c:	4608      	mov	r0, r1
 8003b3e:	4611      	mov	r1, r2
 8003b40:	2200      	movs	r2, #0
 8003b42:	4d05      	ldr	r5, [pc, #20]	@ (8003b58 <_lseek_r+0x20>)
 8003b44:	602a      	str	r2, [r5, #0]
 8003b46:	461a      	mov	r2, r3
 8003b48:	f7fd fd25 	bl	8001596 <_lseek>
 8003b4c:	1c43      	adds	r3, r0, #1
 8003b4e:	d102      	bne.n	8003b56 <_lseek_r+0x1e>
 8003b50:	682b      	ldr	r3, [r5, #0]
 8003b52:	b103      	cbz	r3, 8003b56 <_lseek_r+0x1e>
 8003b54:	6023      	str	r3, [r4, #0]
 8003b56:	bd38      	pop	{r3, r4, r5, pc}
 8003b58:	20000534 	.word	0x20000534

08003b5c <_read_r>:
 8003b5c:	b538      	push	{r3, r4, r5, lr}
 8003b5e:	4604      	mov	r4, r0
 8003b60:	4608      	mov	r0, r1
 8003b62:	4611      	mov	r1, r2
 8003b64:	2200      	movs	r2, #0
 8003b66:	4d05      	ldr	r5, [pc, #20]	@ (8003b7c <_read_r+0x20>)
 8003b68:	602a      	str	r2, [r5, #0]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	f7fd fcb6 	bl	80014dc <_read>
 8003b70:	1c43      	adds	r3, r0, #1
 8003b72:	d102      	bne.n	8003b7a <_read_r+0x1e>
 8003b74:	682b      	ldr	r3, [r5, #0]
 8003b76:	b103      	cbz	r3, 8003b7a <_read_r+0x1e>
 8003b78:	6023      	str	r3, [r4, #0]
 8003b7a:	bd38      	pop	{r3, r4, r5, pc}
 8003b7c:	20000534 	.word	0x20000534

08003b80 <_write_r>:
 8003b80:	b538      	push	{r3, r4, r5, lr}
 8003b82:	4604      	mov	r4, r0
 8003b84:	4608      	mov	r0, r1
 8003b86:	4611      	mov	r1, r2
 8003b88:	2200      	movs	r2, #0
 8003b8a:	4d05      	ldr	r5, [pc, #20]	@ (8003ba0 <_write_r+0x20>)
 8003b8c:	602a      	str	r2, [r5, #0]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	f7fd fcc1 	bl	8001516 <_write>
 8003b94:	1c43      	adds	r3, r0, #1
 8003b96:	d102      	bne.n	8003b9e <_write_r+0x1e>
 8003b98:	682b      	ldr	r3, [r5, #0]
 8003b9a:	b103      	cbz	r3, 8003b9e <_write_r+0x1e>
 8003b9c:	6023      	str	r3, [r4, #0]
 8003b9e:	bd38      	pop	{r3, r4, r5, pc}
 8003ba0:	20000534 	.word	0x20000534

08003ba4 <__errno>:
 8003ba4:	4b01      	ldr	r3, [pc, #4]	@ (8003bac <__errno+0x8>)
 8003ba6:	6818      	ldr	r0, [r3, #0]
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	20000018 	.word	0x20000018

08003bb0 <__libc_init_array>:
 8003bb0:	b570      	push	{r4, r5, r6, lr}
 8003bb2:	2600      	movs	r6, #0
 8003bb4:	4d0c      	ldr	r5, [pc, #48]	@ (8003be8 <__libc_init_array+0x38>)
 8003bb6:	4c0d      	ldr	r4, [pc, #52]	@ (8003bec <__libc_init_array+0x3c>)
 8003bb8:	1b64      	subs	r4, r4, r5
 8003bba:	10a4      	asrs	r4, r4, #2
 8003bbc:	42a6      	cmp	r6, r4
 8003bbe:	d109      	bne.n	8003bd4 <__libc_init_array+0x24>
 8003bc0:	f002 f8bc 	bl	8005d3c <_init>
 8003bc4:	2600      	movs	r6, #0
 8003bc6:	4d0a      	ldr	r5, [pc, #40]	@ (8003bf0 <__libc_init_array+0x40>)
 8003bc8:	4c0a      	ldr	r4, [pc, #40]	@ (8003bf4 <__libc_init_array+0x44>)
 8003bca:	1b64      	subs	r4, r4, r5
 8003bcc:	10a4      	asrs	r4, r4, #2
 8003bce:	42a6      	cmp	r6, r4
 8003bd0:	d105      	bne.n	8003bde <__libc_init_array+0x2e>
 8003bd2:	bd70      	pop	{r4, r5, r6, pc}
 8003bd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bd8:	4798      	blx	r3
 8003bda:	3601      	adds	r6, #1
 8003bdc:	e7ee      	b.n	8003bbc <__libc_init_array+0xc>
 8003bde:	f855 3b04 	ldr.w	r3, [r5], #4
 8003be2:	4798      	blx	r3
 8003be4:	3601      	adds	r6, #1
 8003be6:	e7f2      	b.n	8003bce <__libc_init_array+0x1e>
 8003be8:	080061b4 	.word	0x080061b4
 8003bec:	080061b4 	.word	0x080061b4
 8003bf0:	080061b4 	.word	0x080061b4
 8003bf4:	080061b8 	.word	0x080061b8

08003bf8 <__retarget_lock_init_recursive>:
 8003bf8:	4770      	bx	lr

08003bfa <__retarget_lock_acquire_recursive>:
 8003bfa:	4770      	bx	lr

08003bfc <__retarget_lock_release_recursive>:
 8003bfc:	4770      	bx	lr

08003bfe <memchr>:
 8003bfe:	4603      	mov	r3, r0
 8003c00:	b510      	push	{r4, lr}
 8003c02:	b2c9      	uxtb	r1, r1
 8003c04:	4402      	add	r2, r0
 8003c06:	4293      	cmp	r3, r2
 8003c08:	4618      	mov	r0, r3
 8003c0a:	d101      	bne.n	8003c10 <memchr+0x12>
 8003c0c:	2000      	movs	r0, #0
 8003c0e:	e003      	b.n	8003c18 <memchr+0x1a>
 8003c10:	7804      	ldrb	r4, [r0, #0]
 8003c12:	3301      	adds	r3, #1
 8003c14:	428c      	cmp	r4, r1
 8003c16:	d1f6      	bne.n	8003c06 <memchr+0x8>
 8003c18:	bd10      	pop	{r4, pc}

08003c1a <quorem>:
 8003c1a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c1e:	6903      	ldr	r3, [r0, #16]
 8003c20:	690c      	ldr	r4, [r1, #16]
 8003c22:	4607      	mov	r7, r0
 8003c24:	42a3      	cmp	r3, r4
 8003c26:	db7e      	blt.n	8003d26 <quorem+0x10c>
 8003c28:	3c01      	subs	r4, #1
 8003c2a:	00a3      	lsls	r3, r4, #2
 8003c2c:	f100 0514 	add.w	r5, r0, #20
 8003c30:	f101 0814 	add.w	r8, r1, #20
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003c3a:	9301      	str	r3, [sp, #4]
 8003c3c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003c40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003c44:	3301      	adds	r3, #1
 8003c46:	429a      	cmp	r2, r3
 8003c48:	fbb2 f6f3 	udiv	r6, r2, r3
 8003c4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003c50:	d32e      	bcc.n	8003cb0 <quorem+0x96>
 8003c52:	f04f 0a00 	mov.w	sl, #0
 8003c56:	46c4      	mov	ip, r8
 8003c58:	46ae      	mov	lr, r5
 8003c5a:	46d3      	mov	fp, sl
 8003c5c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003c60:	b298      	uxth	r0, r3
 8003c62:	fb06 a000 	mla	r0, r6, r0, sl
 8003c66:	0c1b      	lsrs	r3, r3, #16
 8003c68:	0c02      	lsrs	r2, r0, #16
 8003c6a:	fb06 2303 	mla	r3, r6, r3, r2
 8003c6e:	f8de 2000 	ldr.w	r2, [lr]
 8003c72:	b280      	uxth	r0, r0
 8003c74:	b292      	uxth	r2, r2
 8003c76:	1a12      	subs	r2, r2, r0
 8003c78:	445a      	add	r2, fp
 8003c7a:	f8de 0000 	ldr.w	r0, [lr]
 8003c7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003c88:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003c8c:	b292      	uxth	r2, r2
 8003c8e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003c92:	45e1      	cmp	r9, ip
 8003c94:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003c98:	f84e 2b04 	str.w	r2, [lr], #4
 8003c9c:	d2de      	bcs.n	8003c5c <quorem+0x42>
 8003c9e:	9b00      	ldr	r3, [sp, #0]
 8003ca0:	58eb      	ldr	r3, [r5, r3]
 8003ca2:	b92b      	cbnz	r3, 8003cb0 <quorem+0x96>
 8003ca4:	9b01      	ldr	r3, [sp, #4]
 8003ca6:	3b04      	subs	r3, #4
 8003ca8:	429d      	cmp	r5, r3
 8003caa:	461a      	mov	r2, r3
 8003cac:	d32f      	bcc.n	8003d0e <quorem+0xf4>
 8003cae:	613c      	str	r4, [r7, #16]
 8003cb0:	4638      	mov	r0, r7
 8003cb2:	f001 f981 	bl	8004fb8 <__mcmp>
 8003cb6:	2800      	cmp	r0, #0
 8003cb8:	db25      	blt.n	8003d06 <quorem+0xec>
 8003cba:	4629      	mov	r1, r5
 8003cbc:	2000      	movs	r0, #0
 8003cbe:	f858 2b04 	ldr.w	r2, [r8], #4
 8003cc2:	f8d1 c000 	ldr.w	ip, [r1]
 8003cc6:	fa1f fe82 	uxth.w	lr, r2
 8003cca:	fa1f f38c 	uxth.w	r3, ip
 8003cce:	eba3 030e 	sub.w	r3, r3, lr
 8003cd2:	4403      	add	r3, r0
 8003cd4:	0c12      	lsrs	r2, r2, #16
 8003cd6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003cda:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003ce4:	45c1      	cmp	r9, r8
 8003ce6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003cea:	f841 3b04 	str.w	r3, [r1], #4
 8003cee:	d2e6      	bcs.n	8003cbe <quorem+0xa4>
 8003cf0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003cf4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003cf8:	b922      	cbnz	r2, 8003d04 <quorem+0xea>
 8003cfa:	3b04      	subs	r3, #4
 8003cfc:	429d      	cmp	r5, r3
 8003cfe:	461a      	mov	r2, r3
 8003d00:	d30b      	bcc.n	8003d1a <quorem+0x100>
 8003d02:	613c      	str	r4, [r7, #16]
 8003d04:	3601      	adds	r6, #1
 8003d06:	4630      	mov	r0, r6
 8003d08:	b003      	add	sp, #12
 8003d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d0e:	6812      	ldr	r2, [r2, #0]
 8003d10:	3b04      	subs	r3, #4
 8003d12:	2a00      	cmp	r2, #0
 8003d14:	d1cb      	bne.n	8003cae <quorem+0x94>
 8003d16:	3c01      	subs	r4, #1
 8003d18:	e7c6      	b.n	8003ca8 <quorem+0x8e>
 8003d1a:	6812      	ldr	r2, [r2, #0]
 8003d1c:	3b04      	subs	r3, #4
 8003d1e:	2a00      	cmp	r2, #0
 8003d20:	d1ef      	bne.n	8003d02 <quorem+0xe8>
 8003d22:	3c01      	subs	r4, #1
 8003d24:	e7ea      	b.n	8003cfc <quorem+0xe2>
 8003d26:	2000      	movs	r0, #0
 8003d28:	e7ee      	b.n	8003d08 <quorem+0xee>
 8003d2a:	0000      	movs	r0, r0
 8003d2c:	0000      	movs	r0, r0
	...

08003d30 <_dtoa_r>:
 8003d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d34:	4614      	mov	r4, r2
 8003d36:	461d      	mov	r5, r3
 8003d38:	69c7      	ldr	r7, [r0, #28]
 8003d3a:	b097      	sub	sp, #92	@ 0x5c
 8003d3c:	4681      	mov	r9, r0
 8003d3e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003d42:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8003d44:	b97f      	cbnz	r7, 8003d66 <_dtoa_r+0x36>
 8003d46:	2010      	movs	r0, #16
 8003d48:	f000 fe0e 	bl	8004968 <malloc>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	f8c9 001c 	str.w	r0, [r9, #28]
 8003d52:	b920      	cbnz	r0, 8003d5e <_dtoa_r+0x2e>
 8003d54:	21ef      	movs	r1, #239	@ 0xef
 8003d56:	4bac      	ldr	r3, [pc, #688]	@ (8004008 <_dtoa_r+0x2d8>)
 8003d58:	48ac      	ldr	r0, [pc, #688]	@ (800400c <_dtoa_r+0x2dc>)
 8003d5a:	f001 fc6d 	bl	8005638 <__assert_func>
 8003d5e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003d62:	6007      	str	r7, [r0, #0]
 8003d64:	60c7      	str	r7, [r0, #12]
 8003d66:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003d6a:	6819      	ldr	r1, [r3, #0]
 8003d6c:	b159      	cbz	r1, 8003d86 <_dtoa_r+0x56>
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	2301      	movs	r3, #1
 8003d72:	4093      	lsls	r3, r2
 8003d74:	604a      	str	r2, [r1, #4]
 8003d76:	608b      	str	r3, [r1, #8]
 8003d78:	4648      	mov	r0, r9
 8003d7a:	f000 feeb 	bl	8004b54 <_Bfree>
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	1e2b      	subs	r3, r5, #0
 8003d88:	bfaf      	iteee	ge
 8003d8a:	2300      	movge	r3, #0
 8003d8c:	2201      	movlt	r2, #1
 8003d8e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003d92:	9307      	strlt	r3, [sp, #28]
 8003d94:	bfa8      	it	ge
 8003d96:	6033      	strge	r3, [r6, #0]
 8003d98:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8003d9c:	4b9c      	ldr	r3, [pc, #624]	@ (8004010 <_dtoa_r+0x2e0>)
 8003d9e:	bfb8      	it	lt
 8003da0:	6032      	strlt	r2, [r6, #0]
 8003da2:	ea33 0308 	bics.w	r3, r3, r8
 8003da6:	d112      	bne.n	8003dce <_dtoa_r+0x9e>
 8003da8:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003dac:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003dae:	6013      	str	r3, [r2, #0]
 8003db0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8003db4:	4323      	orrs	r3, r4
 8003db6:	f000 855e 	beq.w	8004876 <_dtoa_r+0xb46>
 8003dba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003dbc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8004014 <_dtoa_r+0x2e4>
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 8560 	beq.w	8004886 <_dtoa_r+0xb56>
 8003dc6:	f10a 0303 	add.w	r3, sl, #3
 8003dca:	f000 bd5a 	b.w	8004882 <_dtoa_r+0xb52>
 8003dce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003dd2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8003dd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003dda:	2200      	movs	r2, #0
 8003ddc:	2300      	movs	r3, #0
 8003dde:	f7fc fde3 	bl	80009a8 <__aeabi_dcmpeq>
 8003de2:	4607      	mov	r7, r0
 8003de4:	b158      	cbz	r0, 8003dfe <_dtoa_r+0xce>
 8003de6:	2301      	movs	r3, #1
 8003de8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003dea:	6013      	str	r3, [r2, #0]
 8003dec:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003dee:	b113      	cbz	r3, 8003df6 <_dtoa_r+0xc6>
 8003df0:	4b89      	ldr	r3, [pc, #548]	@ (8004018 <_dtoa_r+0x2e8>)
 8003df2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8003df4:	6013      	str	r3, [r2, #0]
 8003df6:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800401c <_dtoa_r+0x2ec>
 8003dfa:	f000 bd44 	b.w	8004886 <_dtoa_r+0xb56>
 8003dfe:	ab14      	add	r3, sp, #80	@ 0x50
 8003e00:	9301      	str	r3, [sp, #4]
 8003e02:	ab15      	add	r3, sp, #84	@ 0x54
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	4648      	mov	r0, r9
 8003e08:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8003e0c:	f001 f984 	bl	8005118 <__d2b>
 8003e10:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8003e14:	9003      	str	r0, [sp, #12]
 8003e16:	2e00      	cmp	r6, #0
 8003e18:	d078      	beq.n	8003f0c <_dtoa_r+0x1dc>
 8003e1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003e1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003e20:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003e24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e28:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003e2c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003e30:	9712      	str	r7, [sp, #72]	@ 0x48
 8003e32:	4619      	mov	r1, r3
 8003e34:	2200      	movs	r2, #0
 8003e36:	4b7a      	ldr	r3, [pc, #488]	@ (8004020 <_dtoa_r+0x2f0>)
 8003e38:	f7fc f996 	bl	8000168 <__aeabi_dsub>
 8003e3c:	a36c      	add	r3, pc, #432	@ (adr r3, 8003ff0 <_dtoa_r+0x2c0>)
 8003e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e42:	f7fc fb49 	bl	80004d8 <__aeabi_dmul>
 8003e46:	a36c      	add	r3, pc, #432	@ (adr r3, 8003ff8 <_dtoa_r+0x2c8>)
 8003e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4c:	f7fc f98e 	bl	800016c <__adddf3>
 8003e50:	4604      	mov	r4, r0
 8003e52:	4630      	mov	r0, r6
 8003e54:	460d      	mov	r5, r1
 8003e56:	f7fc fad5 	bl	8000404 <__aeabi_i2d>
 8003e5a:	a369      	add	r3, pc, #420	@ (adr r3, 8004000 <_dtoa_r+0x2d0>)
 8003e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e60:	f7fc fb3a 	bl	80004d8 <__aeabi_dmul>
 8003e64:	4602      	mov	r2, r0
 8003e66:	460b      	mov	r3, r1
 8003e68:	4620      	mov	r0, r4
 8003e6a:	4629      	mov	r1, r5
 8003e6c:	f7fc f97e 	bl	800016c <__adddf3>
 8003e70:	4604      	mov	r4, r0
 8003e72:	460d      	mov	r5, r1
 8003e74:	f7fc fde0 	bl	8000a38 <__aeabi_d2iz>
 8003e78:	2200      	movs	r2, #0
 8003e7a:	4607      	mov	r7, r0
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	4620      	mov	r0, r4
 8003e80:	4629      	mov	r1, r5
 8003e82:	f7fc fd9b 	bl	80009bc <__aeabi_dcmplt>
 8003e86:	b140      	cbz	r0, 8003e9a <_dtoa_r+0x16a>
 8003e88:	4638      	mov	r0, r7
 8003e8a:	f7fc fabb 	bl	8000404 <__aeabi_i2d>
 8003e8e:	4622      	mov	r2, r4
 8003e90:	462b      	mov	r3, r5
 8003e92:	f7fc fd89 	bl	80009a8 <__aeabi_dcmpeq>
 8003e96:	b900      	cbnz	r0, 8003e9a <_dtoa_r+0x16a>
 8003e98:	3f01      	subs	r7, #1
 8003e9a:	2f16      	cmp	r7, #22
 8003e9c:	d854      	bhi.n	8003f48 <_dtoa_r+0x218>
 8003e9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003ea2:	4b60      	ldr	r3, [pc, #384]	@ (8004024 <_dtoa_r+0x2f4>)
 8003ea4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eac:	f7fc fd86 	bl	80009bc <__aeabi_dcmplt>
 8003eb0:	2800      	cmp	r0, #0
 8003eb2:	d04b      	beq.n	8003f4c <_dtoa_r+0x21c>
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	3f01      	subs	r7, #1
 8003eb8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003eba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003ebc:	1b9b      	subs	r3, r3, r6
 8003ebe:	1e5a      	subs	r2, r3, #1
 8003ec0:	bf49      	itett	mi
 8003ec2:	f1c3 0301 	rsbmi	r3, r3, #1
 8003ec6:	2300      	movpl	r3, #0
 8003ec8:	9304      	strmi	r3, [sp, #16]
 8003eca:	2300      	movmi	r3, #0
 8003ecc:	9209      	str	r2, [sp, #36]	@ 0x24
 8003ece:	bf54      	ite	pl
 8003ed0:	9304      	strpl	r3, [sp, #16]
 8003ed2:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8003ed4:	2f00      	cmp	r7, #0
 8003ed6:	db3b      	blt.n	8003f50 <_dtoa_r+0x220>
 8003ed8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003eda:	970e      	str	r7, [sp, #56]	@ 0x38
 8003edc:	443b      	add	r3, r7
 8003ede:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	930a      	str	r3, [sp, #40]	@ 0x28
 8003ee4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003ee6:	2b09      	cmp	r3, #9
 8003ee8:	d865      	bhi.n	8003fb6 <_dtoa_r+0x286>
 8003eea:	2b05      	cmp	r3, #5
 8003eec:	bfc4      	itt	gt
 8003eee:	3b04      	subgt	r3, #4
 8003ef0:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8003ef2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003ef4:	bfc8      	it	gt
 8003ef6:	2400      	movgt	r4, #0
 8003ef8:	f1a3 0302 	sub.w	r3, r3, #2
 8003efc:	bfd8      	it	le
 8003efe:	2401      	movle	r4, #1
 8003f00:	2b03      	cmp	r3, #3
 8003f02:	d864      	bhi.n	8003fce <_dtoa_r+0x29e>
 8003f04:	e8df f003 	tbb	[pc, r3]
 8003f08:	2c385553 	.word	0x2c385553
 8003f0c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8003f10:	441e      	add	r6, r3
 8003f12:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003f16:	2b20      	cmp	r3, #32
 8003f18:	bfc1      	itttt	gt
 8003f1a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003f1e:	fa08 f803 	lslgt.w	r8, r8, r3
 8003f22:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003f26:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003f2a:	bfd6      	itet	le
 8003f2c:	f1c3 0320 	rsble	r3, r3, #32
 8003f30:	ea48 0003 	orrgt.w	r0, r8, r3
 8003f34:	fa04 f003 	lslle.w	r0, r4, r3
 8003f38:	f7fc fa54 	bl	80003e4 <__aeabi_ui2d>
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003f42:	3e01      	subs	r6, #1
 8003f44:	9212      	str	r2, [sp, #72]	@ 0x48
 8003f46:	e774      	b.n	8003e32 <_dtoa_r+0x102>
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e7b5      	b.n	8003eb8 <_dtoa_r+0x188>
 8003f4c:	900f      	str	r0, [sp, #60]	@ 0x3c
 8003f4e:	e7b4      	b.n	8003eba <_dtoa_r+0x18a>
 8003f50:	9b04      	ldr	r3, [sp, #16]
 8003f52:	1bdb      	subs	r3, r3, r7
 8003f54:	9304      	str	r3, [sp, #16]
 8003f56:	427b      	negs	r3, r7
 8003f58:	930a      	str	r3, [sp, #40]	@ 0x28
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	930e      	str	r3, [sp, #56]	@ 0x38
 8003f5e:	e7c1      	b.n	8003ee4 <_dtoa_r+0x1b4>
 8003f60:	2301      	movs	r3, #1
 8003f62:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003f64:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003f66:	eb07 0b03 	add.w	fp, r7, r3
 8003f6a:	f10b 0301 	add.w	r3, fp, #1
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	9308      	str	r3, [sp, #32]
 8003f72:	bfb8      	it	lt
 8003f74:	2301      	movlt	r3, #1
 8003f76:	e006      	b.n	8003f86 <_dtoa_r+0x256>
 8003f78:	2301      	movs	r3, #1
 8003f7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003f7c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	dd28      	ble.n	8003fd4 <_dtoa_r+0x2a4>
 8003f82:	469b      	mov	fp, r3
 8003f84:	9308      	str	r3, [sp, #32]
 8003f86:	2100      	movs	r1, #0
 8003f88:	2204      	movs	r2, #4
 8003f8a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8003f8e:	f102 0514 	add.w	r5, r2, #20
 8003f92:	429d      	cmp	r5, r3
 8003f94:	d926      	bls.n	8003fe4 <_dtoa_r+0x2b4>
 8003f96:	6041      	str	r1, [r0, #4]
 8003f98:	4648      	mov	r0, r9
 8003f9a:	f000 fd9b 	bl	8004ad4 <_Balloc>
 8003f9e:	4682      	mov	sl, r0
 8003fa0:	2800      	cmp	r0, #0
 8003fa2:	d143      	bne.n	800402c <_dtoa_r+0x2fc>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	f240 11af 	movw	r1, #431	@ 0x1af
 8003faa:	4b1f      	ldr	r3, [pc, #124]	@ (8004028 <_dtoa_r+0x2f8>)
 8003fac:	e6d4      	b.n	8003d58 <_dtoa_r+0x28>
 8003fae:	2300      	movs	r3, #0
 8003fb0:	e7e3      	b.n	8003f7a <_dtoa_r+0x24a>
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	e7d5      	b.n	8003f62 <_dtoa_r+0x232>
 8003fb6:	2401      	movs	r4, #1
 8003fb8:	2300      	movs	r3, #0
 8003fba:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003fbc:	9320      	str	r3, [sp, #128]	@ 0x80
 8003fbe:	f04f 3bff 	mov.w	fp, #4294967295
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	2312      	movs	r3, #18
 8003fc6:	f8cd b020 	str.w	fp, [sp, #32]
 8003fca:	9221      	str	r2, [sp, #132]	@ 0x84
 8003fcc:	e7db      	b.n	8003f86 <_dtoa_r+0x256>
 8003fce:	2301      	movs	r3, #1
 8003fd0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003fd2:	e7f4      	b.n	8003fbe <_dtoa_r+0x28e>
 8003fd4:	f04f 0b01 	mov.w	fp, #1
 8003fd8:	465b      	mov	r3, fp
 8003fda:	f8cd b020 	str.w	fp, [sp, #32]
 8003fde:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8003fe2:	e7d0      	b.n	8003f86 <_dtoa_r+0x256>
 8003fe4:	3101      	adds	r1, #1
 8003fe6:	0052      	lsls	r2, r2, #1
 8003fe8:	e7d1      	b.n	8003f8e <_dtoa_r+0x25e>
 8003fea:	bf00      	nop
 8003fec:	f3af 8000 	nop.w
 8003ff0:	636f4361 	.word	0x636f4361
 8003ff4:	3fd287a7 	.word	0x3fd287a7
 8003ff8:	8b60c8b3 	.word	0x8b60c8b3
 8003ffc:	3fc68a28 	.word	0x3fc68a28
 8004000:	509f79fb 	.word	0x509f79fb
 8004004:	3fd34413 	.word	0x3fd34413
 8004008:	08005e77 	.word	0x08005e77
 800400c:	08005e8e 	.word	0x08005e8e
 8004010:	7ff00000 	.word	0x7ff00000
 8004014:	08005e73 	.word	0x08005e73
 8004018:	08005e47 	.word	0x08005e47
 800401c:	08005e46 	.word	0x08005e46
 8004020:	3ff80000 	.word	0x3ff80000
 8004024:	08005fe0 	.word	0x08005fe0
 8004028:	08005ee6 	.word	0x08005ee6
 800402c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004030:	6018      	str	r0, [r3, #0]
 8004032:	9b08      	ldr	r3, [sp, #32]
 8004034:	2b0e      	cmp	r3, #14
 8004036:	f200 80a1 	bhi.w	800417c <_dtoa_r+0x44c>
 800403a:	2c00      	cmp	r4, #0
 800403c:	f000 809e 	beq.w	800417c <_dtoa_r+0x44c>
 8004040:	2f00      	cmp	r7, #0
 8004042:	dd33      	ble.n	80040ac <_dtoa_r+0x37c>
 8004044:	4b9c      	ldr	r3, [pc, #624]	@ (80042b8 <_dtoa_r+0x588>)
 8004046:	f007 020f 	and.w	r2, r7, #15
 800404a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800404e:	05f8      	lsls	r0, r7, #23
 8004050:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004054:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8004058:	ea4f 1427 	mov.w	r4, r7, asr #4
 800405c:	d516      	bpl.n	800408c <_dtoa_r+0x35c>
 800405e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004062:	4b96      	ldr	r3, [pc, #600]	@ (80042bc <_dtoa_r+0x58c>)
 8004064:	2603      	movs	r6, #3
 8004066:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800406a:	f7fc fb5f 	bl	800072c <__aeabi_ddiv>
 800406e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004072:	f004 040f 	and.w	r4, r4, #15
 8004076:	4d91      	ldr	r5, [pc, #580]	@ (80042bc <_dtoa_r+0x58c>)
 8004078:	b954      	cbnz	r4, 8004090 <_dtoa_r+0x360>
 800407a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800407e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004082:	f7fc fb53 	bl	800072c <__aeabi_ddiv>
 8004086:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800408a:	e028      	b.n	80040de <_dtoa_r+0x3ae>
 800408c:	2602      	movs	r6, #2
 800408e:	e7f2      	b.n	8004076 <_dtoa_r+0x346>
 8004090:	07e1      	lsls	r1, r4, #31
 8004092:	d508      	bpl.n	80040a6 <_dtoa_r+0x376>
 8004094:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004098:	e9d5 2300 	ldrd	r2, r3, [r5]
 800409c:	f7fc fa1c 	bl	80004d8 <__aeabi_dmul>
 80040a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80040a4:	3601      	adds	r6, #1
 80040a6:	1064      	asrs	r4, r4, #1
 80040a8:	3508      	adds	r5, #8
 80040aa:	e7e5      	b.n	8004078 <_dtoa_r+0x348>
 80040ac:	f000 80af 	beq.w	800420e <_dtoa_r+0x4de>
 80040b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80040b4:	427c      	negs	r4, r7
 80040b6:	4b80      	ldr	r3, [pc, #512]	@ (80042b8 <_dtoa_r+0x588>)
 80040b8:	f004 020f 	and.w	r2, r4, #15
 80040bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80040c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c4:	f7fc fa08 	bl	80004d8 <__aeabi_dmul>
 80040c8:	2602      	movs	r6, #2
 80040ca:	2300      	movs	r3, #0
 80040cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80040d0:	4d7a      	ldr	r5, [pc, #488]	@ (80042bc <_dtoa_r+0x58c>)
 80040d2:	1124      	asrs	r4, r4, #4
 80040d4:	2c00      	cmp	r4, #0
 80040d6:	f040 808f 	bne.w	80041f8 <_dtoa_r+0x4c8>
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1d3      	bne.n	8004086 <_dtoa_r+0x356>
 80040de:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80040e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f000 8094 	beq.w	8004212 <_dtoa_r+0x4e2>
 80040ea:	2200      	movs	r2, #0
 80040ec:	4620      	mov	r0, r4
 80040ee:	4629      	mov	r1, r5
 80040f0:	4b73      	ldr	r3, [pc, #460]	@ (80042c0 <_dtoa_r+0x590>)
 80040f2:	f7fc fc63 	bl	80009bc <__aeabi_dcmplt>
 80040f6:	2800      	cmp	r0, #0
 80040f8:	f000 808b 	beq.w	8004212 <_dtoa_r+0x4e2>
 80040fc:	9b08      	ldr	r3, [sp, #32]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f000 8087 	beq.w	8004212 <_dtoa_r+0x4e2>
 8004104:	f1bb 0f00 	cmp.w	fp, #0
 8004108:	dd34      	ble.n	8004174 <_dtoa_r+0x444>
 800410a:	4620      	mov	r0, r4
 800410c:	2200      	movs	r2, #0
 800410e:	4629      	mov	r1, r5
 8004110:	4b6c      	ldr	r3, [pc, #432]	@ (80042c4 <_dtoa_r+0x594>)
 8004112:	f7fc f9e1 	bl	80004d8 <__aeabi_dmul>
 8004116:	465c      	mov	r4, fp
 8004118:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800411c:	f107 38ff 	add.w	r8, r7, #4294967295
 8004120:	3601      	adds	r6, #1
 8004122:	4630      	mov	r0, r6
 8004124:	f7fc f96e 	bl	8000404 <__aeabi_i2d>
 8004128:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800412c:	f7fc f9d4 	bl	80004d8 <__aeabi_dmul>
 8004130:	2200      	movs	r2, #0
 8004132:	4b65      	ldr	r3, [pc, #404]	@ (80042c8 <_dtoa_r+0x598>)
 8004134:	f7fc f81a 	bl	800016c <__adddf3>
 8004138:	4605      	mov	r5, r0
 800413a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800413e:	2c00      	cmp	r4, #0
 8004140:	d16a      	bne.n	8004218 <_dtoa_r+0x4e8>
 8004142:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004146:	2200      	movs	r2, #0
 8004148:	4b60      	ldr	r3, [pc, #384]	@ (80042cc <_dtoa_r+0x59c>)
 800414a:	f7fc f80d 	bl	8000168 <__aeabi_dsub>
 800414e:	4602      	mov	r2, r0
 8004150:	460b      	mov	r3, r1
 8004152:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004156:	462a      	mov	r2, r5
 8004158:	4633      	mov	r3, r6
 800415a:	f7fc fc4d 	bl	80009f8 <__aeabi_dcmpgt>
 800415e:	2800      	cmp	r0, #0
 8004160:	f040 8298 	bne.w	8004694 <_dtoa_r+0x964>
 8004164:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004168:	462a      	mov	r2, r5
 800416a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800416e:	f7fc fc25 	bl	80009bc <__aeabi_dcmplt>
 8004172:	bb38      	cbnz	r0, 80041c4 <_dtoa_r+0x494>
 8004174:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004178:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800417c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800417e:	2b00      	cmp	r3, #0
 8004180:	f2c0 8157 	blt.w	8004432 <_dtoa_r+0x702>
 8004184:	2f0e      	cmp	r7, #14
 8004186:	f300 8154 	bgt.w	8004432 <_dtoa_r+0x702>
 800418a:	4b4b      	ldr	r3, [pc, #300]	@ (80042b8 <_dtoa_r+0x588>)
 800418c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004190:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004194:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004198:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800419a:	2b00      	cmp	r3, #0
 800419c:	f280 80e5 	bge.w	800436a <_dtoa_r+0x63a>
 80041a0:	9b08      	ldr	r3, [sp, #32]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f300 80e1 	bgt.w	800436a <_dtoa_r+0x63a>
 80041a8:	d10c      	bne.n	80041c4 <_dtoa_r+0x494>
 80041aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80041ae:	2200      	movs	r2, #0
 80041b0:	4b46      	ldr	r3, [pc, #280]	@ (80042cc <_dtoa_r+0x59c>)
 80041b2:	f7fc f991 	bl	80004d8 <__aeabi_dmul>
 80041b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80041ba:	f7fc fc13 	bl	80009e4 <__aeabi_dcmpge>
 80041be:	2800      	cmp	r0, #0
 80041c0:	f000 8266 	beq.w	8004690 <_dtoa_r+0x960>
 80041c4:	2400      	movs	r4, #0
 80041c6:	4625      	mov	r5, r4
 80041c8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80041ca:	4656      	mov	r6, sl
 80041cc:	ea6f 0803 	mvn.w	r8, r3
 80041d0:	2700      	movs	r7, #0
 80041d2:	4621      	mov	r1, r4
 80041d4:	4648      	mov	r0, r9
 80041d6:	f000 fcbd 	bl	8004b54 <_Bfree>
 80041da:	2d00      	cmp	r5, #0
 80041dc:	f000 80bd 	beq.w	800435a <_dtoa_r+0x62a>
 80041e0:	b12f      	cbz	r7, 80041ee <_dtoa_r+0x4be>
 80041e2:	42af      	cmp	r7, r5
 80041e4:	d003      	beq.n	80041ee <_dtoa_r+0x4be>
 80041e6:	4639      	mov	r1, r7
 80041e8:	4648      	mov	r0, r9
 80041ea:	f000 fcb3 	bl	8004b54 <_Bfree>
 80041ee:	4629      	mov	r1, r5
 80041f0:	4648      	mov	r0, r9
 80041f2:	f000 fcaf 	bl	8004b54 <_Bfree>
 80041f6:	e0b0      	b.n	800435a <_dtoa_r+0x62a>
 80041f8:	07e2      	lsls	r2, r4, #31
 80041fa:	d505      	bpl.n	8004208 <_dtoa_r+0x4d8>
 80041fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004200:	f7fc f96a 	bl	80004d8 <__aeabi_dmul>
 8004204:	2301      	movs	r3, #1
 8004206:	3601      	adds	r6, #1
 8004208:	1064      	asrs	r4, r4, #1
 800420a:	3508      	adds	r5, #8
 800420c:	e762      	b.n	80040d4 <_dtoa_r+0x3a4>
 800420e:	2602      	movs	r6, #2
 8004210:	e765      	b.n	80040de <_dtoa_r+0x3ae>
 8004212:	46b8      	mov	r8, r7
 8004214:	9c08      	ldr	r4, [sp, #32]
 8004216:	e784      	b.n	8004122 <_dtoa_r+0x3f2>
 8004218:	4b27      	ldr	r3, [pc, #156]	@ (80042b8 <_dtoa_r+0x588>)
 800421a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800421c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004220:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004224:	4454      	add	r4, sl
 8004226:	2900      	cmp	r1, #0
 8004228:	d054      	beq.n	80042d4 <_dtoa_r+0x5a4>
 800422a:	2000      	movs	r0, #0
 800422c:	4928      	ldr	r1, [pc, #160]	@ (80042d0 <_dtoa_r+0x5a0>)
 800422e:	f7fc fa7d 	bl	800072c <__aeabi_ddiv>
 8004232:	4633      	mov	r3, r6
 8004234:	462a      	mov	r2, r5
 8004236:	f7fb ff97 	bl	8000168 <__aeabi_dsub>
 800423a:	4656      	mov	r6, sl
 800423c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004240:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004244:	f7fc fbf8 	bl	8000a38 <__aeabi_d2iz>
 8004248:	4605      	mov	r5, r0
 800424a:	f7fc f8db 	bl	8000404 <__aeabi_i2d>
 800424e:	4602      	mov	r2, r0
 8004250:	460b      	mov	r3, r1
 8004252:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004256:	f7fb ff87 	bl	8000168 <__aeabi_dsub>
 800425a:	4602      	mov	r2, r0
 800425c:	460b      	mov	r3, r1
 800425e:	3530      	adds	r5, #48	@ 0x30
 8004260:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004264:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004268:	f806 5b01 	strb.w	r5, [r6], #1
 800426c:	f7fc fba6 	bl	80009bc <__aeabi_dcmplt>
 8004270:	2800      	cmp	r0, #0
 8004272:	d172      	bne.n	800435a <_dtoa_r+0x62a>
 8004274:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004278:	2000      	movs	r0, #0
 800427a:	4911      	ldr	r1, [pc, #68]	@ (80042c0 <_dtoa_r+0x590>)
 800427c:	f7fb ff74 	bl	8000168 <__aeabi_dsub>
 8004280:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004284:	f7fc fb9a 	bl	80009bc <__aeabi_dcmplt>
 8004288:	2800      	cmp	r0, #0
 800428a:	f040 80b4 	bne.w	80043f6 <_dtoa_r+0x6c6>
 800428e:	42a6      	cmp	r6, r4
 8004290:	f43f af70 	beq.w	8004174 <_dtoa_r+0x444>
 8004294:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004298:	2200      	movs	r2, #0
 800429a:	4b0a      	ldr	r3, [pc, #40]	@ (80042c4 <_dtoa_r+0x594>)
 800429c:	f7fc f91c 	bl	80004d8 <__aeabi_dmul>
 80042a0:	2200      	movs	r2, #0
 80042a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80042a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80042aa:	4b06      	ldr	r3, [pc, #24]	@ (80042c4 <_dtoa_r+0x594>)
 80042ac:	f7fc f914 	bl	80004d8 <__aeabi_dmul>
 80042b0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80042b4:	e7c4      	b.n	8004240 <_dtoa_r+0x510>
 80042b6:	bf00      	nop
 80042b8:	08005fe0 	.word	0x08005fe0
 80042bc:	08005fb8 	.word	0x08005fb8
 80042c0:	3ff00000 	.word	0x3ff00000
 80042c4:	40240000 	.word	0x40240000
 80042c8:	401c0000 	.word	0x401c0000
 80042cc:	40140000 	.word	0x40140000
 80042d0:	3fe00000 	.word	0x3fe00000
 80042d4:	4631      	mov	r1, r6
 80042d6:	4628      	mov	r0, r5
 80042d8:	f7fc f8fe 	bl	80004d8 <__aeabi_dmul>
 80042dc:	4656      	mov	r6, sl
 80042de:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80042e2:	9413      	str	r4, [sp, #76]	@ 0x4c
 80042e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80042e8:	f7fc fba6 	bl	8000a38 <__aeabi_d2iz>
 80042ec:	4605      	mov	r5, r0
 80042ee:	f7fc f889 	bl	8000404 <__aeabi_i2d>
 80042f2:	4602      	mov	r2, r0
 80042f4:	460b      	mov	r3, r1
 80042f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80042fa:	f7fb ff35 	bl	8000168 <__aeabi_dsub>
 80042fe:	4602      	mov	r2, r0
 8004300:	460b      	mov	r3, r1
 8004302:	3530      	adds	r5, #48	@ 0x30
 8004304:	f806 5b01 	strb.w	r5, [r6], #1
 8004308:	42a6      	cmp	r6, r4
 800430a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800430e:	f04f 0200 	mov.w	r2, #0
 8004312:	d124      	bne.n	800435e <_dtoa_r+0x62e>
 8004314:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004318:	4bae      	ldr	r3, [pc, #696]	@ (80045d4 <_dtoa_r+0x8a4>)
 800431a:	f7fb ff27 	bl	800016c <__adddf3>
 800431e:	4602      	mov	r2, r0
 8004320:	460b      	mov	r3, r1
 8004322:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004326:	f7fc fb67 	bl	80009f8 <__aeabi_dcmpgt>
 800432a:	2800      	cmp	r0, #0
 800432c:	d163      	bne.n	80043f6 <_dtoa_r+0x6c6>
 800432e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004332:	2000      	movs	r0, #0
 8004334:	49a7      	ldr	r1, [pc, #668]	@ (80045d4 <_dtoa_r+0x8a4>)
 8004336:	f7fb ff17 	bl	8000168 <__aeabi_dsub>
 800433a:	4602      	mov	r2, r0
 800433c:	460b      	mov	r3, r1
 800433e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004342:	f7fc fb3b 	bl	80009bc <__aeabi_dcmplt>
 8004346:	2800      	cmp	r0, #0
 8004348:	f43f af14 	beq.w	8004174 <_dtoa_r+0x444>
 800434c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800434e:	1e73      	subs	r3, r6, #1
 8004350:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004352:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004356:	2b30      	cmp	r3, #48	@ 0x30
 8004358:	d0f8      	beq.n	800434c <_dtoa_r+0x61c>
 800435a:	4647      	mov	r7, r8
 800435c:	e03b      	b.n	80043d6 <_dtoa_r+0x6a6>
 800435e:	4b9e      	ldr	r3, [pc, #632]	@ (80045d8 <_dtoa_r+0x8a8>)
 8004360:	f7fc f8ba 	bl	80004d8 <__aeabi_dmul>
 8004364:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004368:	e7bc      	b.n	80042e4 <_dtoa_r+0x5b4>
 800436a:	4656      	mov	r6, sl
 800436c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8004370:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004374:	4620      	mov	r0, r4
 8004376:	4629      	mov	r1, r5
 8004378:	f7fc f9d8 	bl	800072c <__aeabi_ddiv>
 800437c:	f7fc fb5c 	bl	8000a38 <__aeabi_d2iz>
 8004380:	4680      	mov	r8, r0
 8004382:	f7fc f83f 	bl	8000404 <__aeabi_i2d>
 8004386:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800438a:	f7fc f8a5 	bl	80004d8 <__aeabi_dmul>
 800438e:	4602      	mov	r2, r0
 8004390:	460b      	mov	r3, r1
 8004392:	4620      	mov	r0, r4
 8004394:	4629      	mov	r1, r5
 8004396:	f7fb fee7 	bl	8000168 <__aeabi_dsub>
 800439a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800439e:	9d08      	ldr	r5, [sp, #32]
 80043a0:	f806 4b01 	strb.w	r4, [r6], #1
 80043a4:	eba6 040a 	sub.w	r4, r6, sl
 80043a8:	42a5      	cmp	r5, r4
 80043aa:	4602      	mov	r2, r0
 80043ac:	460b      	mov	r3, r1
 80043ae:	d133      	bne.n	8004418 <_dtoa_r+0x6e8>
 80043b0:	f7fb fedc 	bl	800016c <__adddf3>
 80043b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043b8:	4604      	mov	r4, r0
 80043ba:	460d      	mov	r5, r1
 80043bc:	f7fc fb1c 	bl	80009f8 <__aeabi_dcmpgt>
 80043c0:	b9c0      	cbnz	r0, 80043f4 <_dtoa_r+0x6c4>
 80043c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043c6:	4620      	mov	r0, r4
 80043c8:	4629      	mov	r1, r5
 80043ca:	f7fc faed 	bl	80009a8 <__aeabi_dcmpeq>
 80043ce:	b110      	cbz	r0, 80043d6 <_dtoa_r+0x6a6>
 80043d0:	f018 0f01 	tst.w	r8, #1
 80043d4:	d10e      	bne.n	80043f4 <_dtoa_r+0x6c4>
 80043d6:	4648      	mov	r0, r9
 80043d8:	9903      	ldr	r1, [sp, #12]
 80043da:	f000 fbbb 	bl	8004b54 <_Bfree>
 80043de:	2300      	movs	r3, #0
 80043e0:	7033      	strb	r3, [r6, #0]
 80043e2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80043e4:	3701      	adds	r7, #1
 80043e6:	601f      	str	r7, [r3, #0]
 80043e8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f000 824b 	beq.w	8004886 <_dtoa_r+0xb56>
 80043f0:	601e      	str	r6, [r3, #0]
 80043f2:	e248      	b.n	8004886 <_dtoa_r+0xb56>
 80043f4:	46b8      	mov	r8, r7
 80043f6:	4633      	mov	r3, r6
 80043f8:	461e      	mov	r6, r3
 80043fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80043fe:	2a39      	cmp	r2, #57	@ 0x39
 8004400:	d106      	bne.n	8004410 <_dtoa_r+0x6e0>
 8004402:	459a      	cmp	sl, r3
 8004404:	d1f8      	bne.n	80043f8 <_dtoa_r+0x6c8>
 8004406:	2230      	movs	r2, #48	@ 0x30
 8004408:	f108 0801 	add.w	r8, r8, #1
 800440c:	f88a 2000 	strb.w	r2, [sl]
 8004410:	781a      	ldrb	r2, [r3, #0]
 8004412:	3201      	adds	r2, #1
 8004414:	701a      	strb	r2, [r3, #0]
 8004416:	e7a0      	b.n	800435a <_dtoa_r+0x62a>
 8004418:	2200      	movs	r2, #0
 800441a:	4b6f      	ldr	r3, [pc, #444]	@ (80045d8 <_dtoa_r+0x8a8>)
 800441c:	f7fc f85c 	bl	80004d8 <__aeabi_dmul>
 8004420:	2200      	movs	r2, #0
 8004422:	2300      	movs	r3, #0
 8004424:	4604      	mov	r4, r0
 8004426:	460d      	mov	r5, r1
 8004428:	f7fc fabe 	bl	80009a8 <__aeabi_dcmpeq>
 800442c:	2800      	cmp	r0, #0
 800442e:	d09f      	beq.n	8004370 <_dtoa_r+0x640>
 8004430:	e7d1      	b.n	80043d6 <_dtoa_r+0x6a6>
 8004432:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004434:	2a00      	cmp	r2, #0
 8004436:	f000 80ea 	beq.w	800460e <_dtoa_r+0x8de>
 800443a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800443c:	2a01      	cmp	r2, #1
 800443e:	f300 80cd 	bgt.w	80045dc <_dtoa_r+0x8ac>
 8004442:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004444:	2a00      	cmp	r2, #0
 8004446:	f000 80c1 	beq.w	80045cc <_dtoa_r+0x89c>
 800444a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800444e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004450:	9e04      	ldr	r6, [sp, #16]
 8004452:	9a04      	ldr	r2, [sp, #16]
 8004454:	2101      	movs	r1, #1
 8004456:	441a      	add	r2, r3
 8004458:	9204      	str	r2, [sp, #16]
 800445a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800445c:	4648      	mov	r0, r9
 800445e:	441a      	add	r2, r3
 8004460:	9209      	str	r2, [sp, #36]	@ 0x24
 8004462:	f000 fc2b 	bl	8004cbc <__i2b>
 8004466:	4605      	mov	r5, r0
 8004468:	b166      	cbz	r6, 8004484 <_dtoa_r+0x754>
 800446a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800446c:	2b00      	cmp	r3, #0
 800446e:	dd09      	ble.n	8004484 <_dtoa_r+0x754>
 8004470:	42b3      	cmp	r3, r6
 8004472:	bfa8      	it	ge
 8004474:	4633      	movge	r3, r6
 8004476:	9a04      	ldr	r2, [sp, #16]
 8004478:	1af6      	subs	r6, r6, r3
 800447a:	1ad2      	subs	r2, r2, r3
 800447c:	9204      	str	r2, [sp, #16]
 800447e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	9309      	str	r3, [sp, #36]	@ 0x24
 8004484:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004486:	b30b      	cbz	r3, 80044cc <_dtoa_r+0x79c>
 8004488:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800448a:	2b00      	cmp	r3, #0
 800448c:	f000 80c6 	beq.w	800461c <_dtoa_r+0x8ec>
 8004490:	2c00      	cmp	r4, #0
 8004492:	f000 80c0 	beq.w	8004616 <_dtoa_r+0x8e6>
 8004496:	4629      	mov	r1, r5
 8004498:	4622      	mov	r2, r4
 800449a:	4648      	mov	r0, r9
 800449c:	f000 fcc6 	bl	8004e2c <__pow5mult>
 80044a0:	9a03      	ldr	r2, [sp, #12]
 80044a2:	4601      	mov	r1, r0
 80044a4:	4605      	mov	r5, r0
 80044a6:	4648      	mov	r0, r9
 80044a8:	f000 fc1e 	bl	8004ce8 <__multiply>
 80044ac:	9903      	ldr	r1, [sp, #12]
 80044ae:	4680      	mov	r8, r0
 80044b0:	4648      	mov	r0, r9
 80044b2:	f000 fb4f 	bl	8004b54 <_Bfree>
 80044b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80044b8:	1b1b      	subs	r3, r3, r4
 80044ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80044bc:	f000 80b1 	beq.w	8004622 <_dtoa_r+0x8f2>
 80044c0:	4641      	mov	r1, r8
 80044c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80044c4:	4648      	mov	r0, r9
 80044c6:	f000 fcb1 	bl	8004e2c <__pow5mult>
 80044ca:	9003      	str	r0, [sp, #12]
 80044cc:	2101      	movs	r1, #1
 80044ce:	4648      	mov	r0, r9
 80044d0:	f000 fbf4 	bl	8004cbc <__i2b>
 80044d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80044d6:	4604      	mov	r4, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 81d8 	beq.w	800488e <_dtoa_r+0xb5e>
 80044de:	461a      	mov	r2, r3
 80044e0:	4601      	mov	r1, r0
 80044e2:	4648      	mov	r0, r9
 80044e4:	f000 fca2 	bl	8004e2c <__pow5mult>
 80044e8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80044ea:	4604      	mov	r4, r0
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	f300 809f 	bgt.w	8004630 <_dtoa_r+0x900>
 80044f2:	9b06      	ldr	r3, [sp, #24]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f040 8097 	bne.w	8004628 <_dtoa_r+0x8f8>
 80044fa:	9b07      	ldr	r3, [sp, #28]
 80044fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004500:	2b00      	cmp	r3, #0
 8004502:	f040 8093 	bne.w	800462c <_dtoa_r+0x8fc>
 8004506:	9b07      	ldr	r3, [sp, #28]
 8004508:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800450c:	0d1b      	lsrs	r3, r3, #20
 800450e:	051b      	lsls	r3, r3, #20
 8004510:	b133      	cbz	r3, 8004520 <_dtoa_r+0x7f0>
 8004512:	9b04      	ldr	r3, [sp, #16]
 8004514:	3301      	adds	r3, #1
 8004516:	9304      	str	r3, [sp, #16]
 8004518:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800451a:	3301      	adds	r3, #1
 800451c:	9309      	str	r3, [sp, #36]	@ 0x24
 800451e:	2301      	movs	r3, #1
 8004520:	930a      	str	r3, [sp, #40]	@ 0x28
 8004522:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 81b8 	beq.w	800489a <_dtoa_r+0xb6a>
 800452a:	6923      	ldr	r3, [r4, #16]
 800452c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004530:	6918      	ldr	r0, [r3, #16]
 8004532:	f000 fb77 	bl	8004c24 <__hi0bits>
 8004536:	f1c0 0020 	rsb	r0, r0, #32
 800453a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800453c:	4418      	add	r0, r3
 800453e:	f010 001f 	ands.w	r0, r0, #31
 8004542:	f000 8082 	beq.w	800464a <_dtoa_r+0x91a>
 8004546:	f1c0 0320 	rsb	r3, r0, #32
 800454a:	2b04      	cmp	r3, #4
 800454c:	dd73      	ble.n	8004636 <_dtoa_r+0x906>
 800454e:	9b04      	ldr	r3, [sp, #16]
 8004550:	f1c0 001c 	rsb	r0, r0, #28
 8004554:	4403      	add	r3, r0
 8004556:	9304      	str	r3, [sp, #16]
 8004558:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800455a:	4406      	add	r6, r0
 800455c:	4403      	add	r3, r0
 800455e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004560:	9b04      	ldr	r3, [sp, #16]
 8004562:	2b00      	cmp	r3, #0
 8004564:	dd05      	ble.n	8004572 <_dtoa_r+0x842>
 8004566:	461a      	mov	r2, r3
 8004568:	4648      	mov	r0, r9
 800456a:	9903      	ldr	r1, [sp, #12]
 800456c:	f000 fcb8 	bl	8004ee0 <__lshift>
 8004570:	9003      	str	r0, [sp, #12]
 8004572:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004574:	2b00      	cmp	r3, #0
 8004576:	dd05      	ble.n	8004584 <_dtoa_r+0x854>
 8004578:	4621      	mov	r1, r4
 800457a:	461a      	mov	r2, r3
 800457c:	4648      	mov	r0, r9
 800457e:	f000 fcaf 	bl	8004ee0 <__lshift>
 8004582:	4604      	mov	r4, r0
 8004584:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004586:	2b00      	cmp	r3, #0
 8004588:	d061      	beq.n	800464e <_dtoa_r+0x91e>
 800458a:	4621      	mov	r1, r4
 800458c:	9803      	ldr	r0, [sp, #12]
 800458e:	f000 fd13 	bl	8004fb8 <__mcmp>
 8004592:	2800      	cmp	r0, #0
 8004594:	da5b      	bge.n	800464e <_dtoa_r+0x91e>
 8004596:	2300      	movs	r3, #0
 8004598:	220a      	movs	r2, #10
 800459a:	4648      	mov	r0, r9
 800459c:	9903      	ldr	r1, [sp, #12]
 800459e:	f000 fafb 	bl	8004b98 <__multadd>
 80045a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80045a4:	f107 38ff 	add.w	r8, r7, #4294967295
 80045a8:	9003      	str	r0, [sp, #12]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f000 8177 	beq.w	800489e <_dtoa_r+0xb6e>
 80045b0:	4629      	mov	r1, r5
 80045b2:	2300      	movs	r3, #0
 80045b4:	220a      	movs	r2, #10
 80045b6:	4648      	mov	r0, r9
 80045b8:	f000 faee 	bl	8004b98 <__multadd>
 80045bc:	f1bb 0f00 	cmp.w	fp, #0
 80045c0:	4605      	mov	r5, r0
 80045c2:	dc6f      	bgt.n	80046a4 <_dtoa_r+0x974>
 80045c4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	dc49      	bgt.n	800465e <_dtoa_r+0x92e>
 80045ca:	e06b      	b.n	80046a4 <_dtoa_r+0x974>
 80045cc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80045ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80045d2:	e73c      	b.n	800444e <_dtoa_r+0x71e>
 80045d4:	3fe00000 	.word	0x3fe00000
 80045d8:	40240000 	.word	0x40240000
 80045dc:	9b08      	ldr	r3, [sp, #32]
 80045de:	1e5c      	subs	r4, r3, #1
 80045e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80045e2:	42a3      	cmp	r3, r4
 80045e4:	db09      	blt.n	80045fa <_dtoa_r+0x8ca>
 80045e6:	1b1c      	subs	r4, r3, r4
 80045e8:	9b08      	ldr	r3, [sp, #32]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f6bf af30 	bge.w	8004450 <_dtoa_r+0x720>
 80045f0:	9b04      	ldr	r3, [sp, #16]
 80045f2:	9a08      	ldr	r2, [sp, #32]
 80045f4:	1a9e      	subs	r6, r3, r2
 80045f6:	2300      	movs	r3, #0
 80045f8:	e72b      	b.n	8004452 <_dtoa_r+0x722>
 80045fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80045fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80045fe:	1ae3      	subs	r3, r4, r3
 8004600:	441a      	add	r2, r3
 8004602:	940a      	str	r4, [sp, #40]	@ 0x28
 8004604:	9e04      	ldr	r6, [sp, #16]
 8004606:	2400      	movs	r4, #0
 8004608:	9b08      	ldr	r3, [sp, #32]
 800460a:	920e      	str	r2, [sp, #56]	@ 0x38
 800460c:	e721      	b.n	8004452 <_dtoa_r+0x722>
 800460e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004610:	9e04      	ldr	r6, [sp, #16]
 8004612:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004614:	e728      	b.n	8004468 <_dtoa_r+0x738>
 8004616:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800461a:	e751      	b.n	80044c0 <_dtoa_r+0x790>
 800461c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800461e:	9903      	ldr	r1, [sp, #12]
 8004620:	e750      	b.n	80044c4 <_dtoa_r+0x794>
 8004622:	f8cd 800c 	str.w	r8, [sp, #12]
 8004626:	e751      	b.n	80044cc <_dtoa_r+0x79c>
 8004628:	2300      	movs	r3, #0
 800462a:	e779      	b.n	8004520 <_dtoa_r+0x7f0>
 800462c:	9b06      	ldr	r3, [sp, #24]
 800462e:	e777      	b.n	8004520 <_dtoa_r+0x7f0>
 8004630:	2300      	movs	r3, #0
 8004632:	930a      	str	r3, [sp, #40]	@ 0x28
 8004634:	e779      	b.n	800452a <_dtoa_r+0x7fa>
 8004636:	d093      	beq.n	8004560 <_dtoa_r+0x830>
 8004638:	9a04      	ldr	r2, [sp, #16]
 800463a:	331c      	adds	r3, #28
 800463c:	441a      	add	r2, r3
 800463e:	9204      	str	r2, [sp, #16]
 8004640:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004642:	441e      	add	r6, r3
 8004644:	441a      	add	r2, r3
 8004646:	9209      	str	r2, [sp, #36]	@ 0x24
 8004648:	e78a      	b.n	8004560 <_dtoa_r+0x830>
 800464a:	4603      	mov	r3, r0
 800464c:	e7f4      	b.n	8004638 <_dtoa_r+0x908>
 800464e:	9b08      	ldr	r3, [sp, #32]
 8004650:	46b8      	mov	r8, r7
 8004652:	2b00      	cmp	r3, #0
 8004654:	dc20      	bgt.n	8004698 <_dtoa_r+0x968>
 8004656:	469b      	mov	fp, r3
 8004658:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800465a:	2b02      	cmp	r3, #2
 800465c:	dd1e      	ble.n	800469c <_dtoa_r+0x96c>
 800465e:	f1bb 0f00 	cmp.w	fp, #0
 8004662:	f47f adb1 	bne.w	80041c8 <_dtoa_r+0x498>
 8004666:	4621      	mov	r1, r4
 8004668:	465b      	mov	r3, fp
 800466a:	2205      	movs	r2, #5
 800466c:	4648      	mov	r0, r9
 800466e:	f000 fa93 	bl	8004b98 <__multadd>
 8004672:	4601      	mov	r1, r0
 8004674:	4604      	mov	r4, r0
 8004676:	9803      	ldr	r0, [sp, #12]
 8004678:	f000 fc9e 	bl	8004fb8 <__mcmp>
 800467c:	2800      	cmp	r0, #0
 800467e:	f77f ada3 	ble.w	80041c8 <_dtoa_r+0x498>
 8004682:	4656      	mov	r6, sl
 8004684:	2331      	movs	r3, #49	@ 0x31
 8004686:	f108 0801 	add.w	r8, r8, #1
 800468a:	f806 3b01 	strb.w	r3, [r6], #1
 800468e:	e59f      	b.n	80041d0 <_dtoa_r+0x4a0>
 8004690:	46b8      	mov	r8, r7
 8004692:	9c08      	ldr	r4, [sp, #32]
 8004694:	4625      	mov	r5, r4
 8004696:	e7f4      	b.n	8004682 <_dtoa_r+0x952>
 8004698:	f8dd b020 	ldr.w	fp, [sp, #32]
 800469c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 8101 	beq.w	80048a6 <_dtoa_r+0xb76>
 80046a4:	2e00      	cmp	r6, #0
 80046a6:	dd05      	ble.n	80046b4 <_dtoa_r+0x984>
 80046a8:	4629      	mov	r1, r5
 80046aa:	4632      	mov	r2, r6
 80046ac:	4648      	mov	r0, r9
 80046ae:	f000 fc17 	bl	8004ee0 <__lshift>
 80046b2:	4605      	mov	r5, r0
 80046b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d05c      	beq.n	8004774 <_dtoa_r+0xa44>
 80046ba:	4648      	mov	r0, r9
 80046bc:	6869      	ldr	r1, [r5, #4]
 80046be:	f000 fa09 	bl	8004ad4 <_Balloc>
 80046c2:	4606      	mov	r6, r0
 80046c4:	b928      	cbnz	r0, 80046d2 <_dtoa_r+0x9a2>
 80046c6:	4602      	mov	r2, r0
 80046c8:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80046cc:	4b80      	ldr	r3, [pc, #512]	@ (80048d0 <_dtoa_r+0xba0>)
 80046ce:	f7ff bb43 	b.w	8003d58 <_dtoa_r+0x28>
 80046d2:	692a      	ldr	r2, [r5, #16]
 80046d4:	f105 010c 	add.w	r1, r5, #12
 80046d8:	3202      	adds	r2, #2
 80046da:	0092      	lsls	r2, r2, #2
 80046dc:	300c      	adds	r0, #12
 80046de:	f000 ff9d 	bl	800561c <memcpy>
 80046e2:	2201      	movs	r2, #1
 80046e4:	4631      	mov	r1, r6
 80046e6:	4648      	mov	r0, r9
 80046e8:	f000 fbfa 	bl	8004ee0 <__lshift>
 80046ec:	462f      	mov	r7, r5
 80046ee:	4605      	mov	r5, r0
 80046f0:	f10a 0301 	add.w	r3, sl, #1
 80046f4:	9304      	str	r3, [sp, #16]
 80046f6:	eb0a 030b 	add.w	r3, sl, fp
 80046fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80046fc:	9b06      	ldr	r3, [sp, #24]
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	9309      	str	r3, [sp, #36]	@ 0x24
 8004704:	9b04      	ldr	r3, [sp, #16]
 8004706:	4621      	mov	r1, r4
 8004708:	9803      	ldr	r0, [sp, #12]
 800470a:	f103 3bff 	add.w	fp, r3, #4294967295
 800470e:	f7ff fa84 	bl	8003c1a <quorem>
 8004712:	4603      	mov	r3, r0
 8004714:	4639      	mov	r1, r7
 8004716:	3330      	adds	r3, #48	@ 0x30
 8004718:	9006      	str	r0, [sp, #24]
 800471a:	9803      	ldr	r0, [sp, #12]
 800471c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800471e:	f000 fc4b 	bl	8004fb8 <__mcmp>
 8004722:	462a      	mov	r2, r5
 8004724:	9008      	str	r0, [sp, #32]
 8004726:	4621      	mov	r1, r4
 8004728:	4648      	mov	r0, r9
 800472a:	f000 fc61 	bl	8004ff0 <__mdiff>
 800472e:	68c2      	ldr	r2, [r0, #12]
 8004730:	4606      	mov	r6, r0
 8004732:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004734:	bb02      	cbnz	r2, 8004778 <_dtoa_r+0xa48>
 8004736:	4601      	mov	r1, r0
 8004738:	9803      	ldr	r0, [sp, #12]
 800473a:	f000 fc3d 	bl	8004fb8 <__mcmp>
 800473e:	4602      	mov	r2, r0
 8004740:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004742:	4631      	mov	r1, r6
 8004744:	4648      	mov	r0, r9
 8004746:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800474a:	f000 fa03 	bl	8004b54 <_Bfree>
 800474e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004750:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004752:	9e04      	ldr	r6, [sp, #16]
 8004754:	ea42 0103 	orr.w	r1, r2, r3
 8004758:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800475a:	4319      	orrs	r1, r3
 800475c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800475e:	d10d      	bne.n	800477c <_dtoa_r+0xa4c>
 8004760:	2b39      	cmp	r3, #57	@ 0x39
 8004762:	d027      	beq.n	80047b4 <_dtoa_r+0xa84>
 8004764:	9a08      	ldr	r2, [sp, #32]
 8004766:	2a00      	cmp	r2, #0
 8004768:	dd01      	ble.n	800476e <_dtoa_r+0xa3e>
 800476a:	9b06      	ldr	r3, [sp, #24]
 800476c:	3331      	adds	r3, #49	@ 0x31
 800476e:	f88b 3000 	strb.w	r3, [fp]
 8004772:	e52e      	b.n	80041d2 <_dtoa_r+0x4a2>
 8004774:	4628      	mov	r0, r5
 8004776:	e7b9      	b.n	80046ec <_dtoa_r+0x9bc>
 8004778:	2201      	movs	r2, #1
 800477a:	e7e2      	b.n	8004742 <_dtoa_r+0xa12>
 800477c:	9908      	ldr	r1, [sp, #32]
 800477e:	2900      	cmp	r1, #0
 8004780:	db04      	blt.n	800478c <_dtoa_r+0xa5c>
 8004782:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8004784:	4301      	orrs	r1, r0
 8004786:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004788:	4301      	orrs	r1, r0
 800478a:	d120      	bne.n	80047ce <_dtoa_r+0xa9e>
 800478c:	2a00      	cmp	r2, #0
 800478e:	ddee      	ble.n	800476e <_dtoa_r+0xa3e>
 8004790:	2201      	movs	r2, #1
 8004792:	9903      	ldr	r1, [sp, #12]
 8004794:	4648      	mov	r0, r9
 8004796:	9304      	str	r3, [sp, #16]
 8004798:	f000 fba2 	bl	8004ee0 <__lshift>
 800479c:	4621      	mov	r1, r4
 800479e:	9003      	str	r0, [sp, #12]
 80047a0:	f000 fc0a 	bl	8004fb8 <__mcmp>
 80047a4:	2800      	cmp	r0, #0
 80047a6:	9b04      	ldr	r3, [sp, #16]
 80047a8:	dc02      	bgt.n	80047b0 <_dtoa_r+0xa80>
 80047aa:	d1e0      	bne.n	800476e <_dtoa_r+0xa3e>
 80047ac:	07da      	lsls	r2, r3, #31
 80047ae:	d5de      	bpl.n	800476e <_dtoa_r+0xa3e>
 80047b0:	2b39      	cmp	r3, #57	@ 0x39
 80047b2:	d1da      	bne.n	800476a <_dtoa_r+0xa3a>
 80047b4:	2339      	movs	r3, #57	@ 0x39
 80047b6:	f88b 3000 	strb.w	r3, [fp]
 80047ba:	4633      	mov	r3, r6
 80047bc:	461e      	mov	r6, r3
 80047be:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80047c2:	3b01      	subs	r3, #1
 80047c4:	2a39      	cmp	r2, #57	@ 0x39
 80047c6:	d04e      	beq.n	8004866 <_dtoa_r+0xb36>
 80047c8:	3201      	adds	r2, #1
 80047ca:	701a      	strb	r2, [r3, #0]
 80047cc:	e501      	b.n	80041d2 <_dtoa_r+0x4a2>
 80047ce:	2a00      	cmp	r2, #0
 80047d0:	dd03      	ble.n	80047da <_dtoa_r+0xaaa>
 80047d2:	2b39      	cmp	r3, #57	@ 0x39
 80047d4:	d0ee      	beq.n	80047b4 <_dtoa_r+0xa84>
 80047d6:	3301      	adds	r3, #1
 80047d8:	e7c9      	b.n	800476e <_dtoa_r+0xa3e>
 80047da:	9a04      	ldr	r2, [sp, #16]
 80047dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80047de:	f802 3c01 	strb.w	r3, [r2, #-1]
 80047e2:	428a      	cmp	r2, r1
 80047e4:	d028      	beq.n	8004838 <_dtoa_r+0xb08>
 80047e6:	2300      	movs	r3, #0
 80047e8:	220a      	movs	r2, #10
 80047ea:	9903      	ldr	r1, [sp, #12]
 80047ec:	4648      	mov	r0, r9
 80047ee:	f000 f9d3 	bl	8004b98 <__multadd>
 80047f2:	42af      	cmp	r7, r5
 80047f4:	9003      	str	r0, [sp, #12]
 80047f6:	f04f 0300 	mov.w	r3, #0
 80047fa:	f04f 020a 	mov.w	r2, #10
 80047fe:	4639      	mov	r1, r7
 8004800:	4648      	mov	r0, r9
 8004802:	d107      	bne.n	8004814 <_dtoa_r+0xae4>
 8004804:	f000 f9c8 	bl	8004b98 <__multadd>
 8004808:	4607      	mov	r7, r0
 800480a:	4605      	mov	r5, r0
 800480c:	9b04      	ldr	r3, [sp, #16]
 800480e:	3301      	adds	r3, #1
 8004810:	9304      	str	r3, [sp, #16]
 8004812:	e777      	b.n	8004704 <_dtoa_r+0x9d4>
 8004814:	f000 f9c0 	bl	8004b98 <__multadd>
 8004818:	4629      	mov	r1, r5
 800481a:	4607      	mov	r7, r0
 800481c:	2300      	movs	r3, #0
 800481e:	220a      	movs	r2, #10
 8004820:	4648      	mov	r0, r9
 8004822:	f000 f9b9 	bl	8004b98 <__multadd>
 8004826:	4605      	mov	r5, r0
 8004828:	e7f0      	b.n	800480c <_dtoa_r+0xadc>
 800482a:	f1bb 0f00 	cmp.w	fp, #0
 800482e:	bfcc      	ite	gt
 8004830:	465e      	movgt	r6, fp
 8004832:	2601      	movle	r6, #1
 8004834:	2700      	movs	r7, #0
 8004836:	4456      	add	r6, sl
 8004838:	2201      	movs	r2, #1
 800483a:	9903      	ldr	r1, [sp, #12]
 800483c:	4648      	mov	r0, r9
 800483e:	9304      	str	r3, [sp, #16]
 8004840:	f000 fb4e 	bl	8004ee0 <__lshift>
 8004844:	4621      	mov	r1, r4
 8004846:	9003      	str	r0, [sp, #12]
 8004848:	f000 fbb6 	bl	8004fb8 <__mcmp>
 800484c:	2800      	cmp	r0, #0
 800484e:	dcb4      	bgt.n	80047ba <_dtoa_r+0xa8a>
 8004850:	d102      	bne.n	8004858 <_dtoa_r+0xb28>
 8004852:	9b04      	ldr	r3, [sp, #16]
 8004854:	07db      	lsls	r3, r3, #31
 8004856:	d4b0      	bmi.n	80047ba <_dtoa_r+0xa8a>
 8004858:	4633      	mov	r3, r6
 800485a:	461e      	mov	r6, r3
 800485c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004860:	2a30      	cmp	r2, #48	@ 0x30
 8004862:	d0fa      	beq.n	800485a <_dtoa_r+0xb2a>
 8004864:	e4b5      	b.n	80041d2 <_dtoa_r+0x4a2>
 8004866:	459a      	cmp	sl, r3
 8004868:	d1a8      	bne.n	80047bc <_dtoa_r+0xa8c>
 800486a:	2331      	movs	r3, #49	@ 0x31
 800486c:	f108 0801 	add.w	r8, r8, #1
 8004870:	f88a 3000 	strb.w	r3, [sl]
 8004874:	e4ad      	b.n	80041d2 <_dtoa_r+0x4a2>
 8004876:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004878:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80048d4 <_dtoa_r+0xba4>
 800487c:	b11b      	cbz	r3, 8004886 <_dtoa_r+0xb56>
 800487e:	f10a 0308 	add.w	r3, sl, #8
 8004882:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004884:	6013      	str	r3, [r2, #0]
 8004886:	4650      	mov	r0, sl
 8004888:	b017      	add	sp, #92	@ 0x5c
 800488a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800488e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004890:	2b01      	cmp	r3, #1
 8004892:	f77f ae2e 	ble.w	80044f2 <_dtoa_r+0x7c2>
 8004896:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004898:	930a      	str	r3, [sp, #40]	@ 0x28
 800489a:	2001      	movs	r0, #1
 800489c:	e64d      	b.n	800453a <_dtoa_r+0x80a>
 800489e:	f1bb 0f00 	cmp.w	fp, #0
 80048a2:	f77f aed9 	ble.w	8004658 <_dtoa_r+0x928>
 80048a6:	4656      	mov	r6, sl
 80048a8:	4621      	mov	r1, r4
 80048aa:	9803      	ldr	r0, [sp, #12]
 80048ac:	f7ff f9b5 	bl	8003c1a <quorem>
 80048b0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80048b4:	f806 3b01 	strb.w	r3, [r6], #1
 80048b8:	eba6 020a 	sub.w	r2, r6, sl
 80048bc:	4593      	cmp	fp, r2
 80048be:	ddb4      	ble.n	800482a <_dtoa_r+0xafa>
 80048c0:	2300      	movs	r3, #0
 80048c2:	220a      	movs	r2, #10
 80048c4:	4648      	mov	r0, r9
 80048c6:	9903      	ldr	r1, [sp, #12]
 80048c8:	f000 f966 	bl	8004b98 <__multadd>
 80048cc:	9003      	str	r0, [sp, #12]
 80048ce:	e7eb      	b.n	80048a8 <_dtoa_r+0xb78>
 80048d0:	08005ee6 	.word	0x08005ee6
 80048d4:	08005e6a 	.word	0x08005e6a

080048d8 <_free_r>:
 80048d8:	b538      	push	{r3, r4, r5, lr}
 80048da:	4605      	mov	r5, r0
 80048dc:	2900      	cmp	r1, #0
 80048de:	d040      	beq.n	8004962 <_free_r+0x8a>
 80048e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048e4:	1f0c      	subs	r4, r1, #4
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	bfb8      	it	lt
 80048ea:	18e4      	addlt	r4, r4, r3
 80048ec:	f000 f8e6 	bl	8004abc <__malloc_lock>
 80048f0:	4a1c      	ldr	r2, [pc, #112]	@ (8004964 <_free_r+0x8c>)
 80048f2:	6813      	ldr	r3, [r2, #0]
 80048f4:	b933      	cbnz	r3, 8004904 <_free_r+0x2c>
 80048f6:	6063      	str	r3, [r4, #4]
 80048f8:	6014      	str	r4, [r2, #0]
 80048fa:	4628      	mov	r0, r5
 80048fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004900:	f000 b8e2 	b.w	8004ac8 <__malloc_unlock>
 8004904:	42a3      	cmp	r3, r4
 8004906:	d908      	bls.n	800491a <_free_r+0x42>
 8004908:	6820      	ldr	r0, [r4, #0]
 800490a:	1821      	adds	r1, r4, r0
 800490c:	428b      	cmp	r3, r1
 800490e:	bf01      	itttt	eq
 8004910:	6819      	ldreq	r1, [r3, #0]
 8004912:	685b      	ldreq	r3, [r3, #4]
 8004914:	1809      	addeq	r1, r1, r0
 8004916:	6021      	streq	r1, [r4, #0]
 8004918:	e7ed      	b.n	80048f6 <_free_r+0x1e>
 800491a:	461a      	mov	r2, r3
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	b10b      	cbz	r3, 8004924 <_free_r+0x4c>
 8004920:	42a3      	cmp	r3, r4
 8004922:	d9fa      	bls.n	800491a <_free_r+0x42>
 8004924:	6811      	ldr	r1, [r2, #0]
 8004926:	1850      	adds	r0, r2, r1
 8004928:	42a0      	cmp	r0, r4
 800492a:	d10b      	bne.n	8004944 <_free_r+0x6c>
 800492c:	6820      	ldr	r0, [r4, #0]
 800492e:	4401      	add	r1, r0
 8004930:	1850      	adds	r0, r2, r1
 8004932:	4283      	cmp	r3, r0
 8004934:	6011      	str	r1, [r2, #0]
 8004936:	d1e0      	bne.n	80048fa <_free_r+0x22>
 8004938:	6818      	ldr	r0, [r3, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	4408      	add	r0, r1
 800493e:	6010      	str	r0, [r2, #0]
 8004940:	6053      	str	r3, [r2, #4]
 8004942:	e7da      	b.n	80048fa <_free_r+0x22>
 8004944:	d902      	bls.n	800494c <_free_r+0x74>
 8004946:	230c      	movs	r3, #12
 8004948:	602b      	str	r3, [r5, #0]
 800494a:	e7d6      	b.n	80048fa <_free_r+0x22>
 800494c:	6820      	ldr	r0, [r4, #0]
 800494e:	1821      	adds	r1, r4, r0
 8004950:	428b      	cmp	r3, r1
 8004952:	bf01      	itttt	eq
 8004954:	6819      	ldreq	r1, [r3, #0]
 8004956:	685b      	ldreq	r3, [r3, #4]
 8004958:	1809      	addeq	r1, r1, r0
 800495a:	6021      	streq	r1, [r4, #0]
 800495c:	6063      	str	r3, [r4, #4]
 800495e:	6054      	str	r4, [r2, #4]
 8004960:	e7cb      	b.n	80048fa <_free_r+0x22>
 8004962:	bd38      	pop	{r3, r4, r5, pc}
 8004964:	20000540 	.word	0x20000540

08004968 <malloc>:
 8004968:	4b02      	ldr	r3, [pc, #8]	@ (8004974 <malloc+0xc>)
 800496a:	4601      	mov	r1, r0
 800496c:	6818      	ldr	r0, [r3, #0]
 800496e:	f000 b825 	b.w	80049bc <_malloc_r>
 8004972:	bf00      	nop
 8004974:	20000018 	.word	0x20000018

08004978 <sbrk_aligned>:
 8004978:	b570      	push	{r4, r5, r6, lr}
 800497a:	4e0f      	ldr	r6, [pc, #60]	@ (80049b8 <sbrk_aligned+0x40>)
 800497c:	460c      	mov	r4, r1
 800497e:	6831      	ldr	r1, [r6, #0]
 8004980:	4605      	mov	r5, r0
 8004982:	b911      	cbnz	r1, 800498a <sbrk_aligned+0x12>
 8004984:	f000 fe3a 	bl	80055fc <_sbrk_r>
 8004988:	6030      	str	r0, [r6, #0]
 800498a:	4621      	mov	r1, r4
 800498c:	4628      	mov	r0, r5
 800498e:	f000 fe35 	bl	80055fc <_sbrk_r>
 8004992:	1c43      	adds	r3, r0, #1
 8004994:	d103      	bne.n	800499e <sbrk_aligned+0x26>
 8004996:	f04f 34ff 	mov.w	r4, #4294967295
 800499a:	4620      	mov	r0, r4
 800499c:	bd70      	pop	{r4, r5, r6, pc}
 800499e:	1cc4      	adds	r4, r0, #3
 80049a0:	f024 0403 	bic.w	r4, r4, #3
 80049a4:	42a0      	cmp	r0, r4
 80049a6:	d0f8      	beq.n	800499a <sbrk_aligned+0x22>
 80049a8:	1a21      	subs	r1, r4, r0
 80049aa:	4628      	mov	r0, r5
 80049ac:	f000 fe26 	bl	80055fc <_sbrk_r>
 80049b0:	3001      	adds	r0, #1
 80049b2:	d1f2      	bne.n	800499a <sbrk_aligned+0x22>
 80049b4:	e7ef      	b.n	8004996 <sbrk_aligned+0x1e>
 80049b6:	bf00      	nop
 80049b8:	2000053c 	.word	0x2000053c

080049bc <_malloc_r>:
 80049bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049c0:	1ccd      	adds	r5, r1, #3
 80049c2:	f025 0503 	bic.w	r5, r5, #3
 80049c6:	3508      	adds	r5, #8
 80049c8:	2d0c      	cmp	r5, #12
 80049ca:	bf38      	it	cc
 80049cc:	250c      	movcc	r5, #12
 80049ce:	2d00      	cmp	r5, #0
 80049d0:	4606      	mov	r6, r0
 80049d2:	db01      	blt.n	80049d8 <_malloc_r+0x1c>
 80049d4:	42a9      	cmp	r1, r5
 80049d6:	d904      	bls.n	80049e2 <_malloc_r+0x26>
 80049d8:	230c      	movs	r3, #12
 80049da:	6033      	str	r3, [r6, #0]
 80049dc:	2000      	movs	r0, #0
 80049de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004ab8 <_malloc_r+0xfc>
 80049e6:	f000 f869 	bl	8004abc <__malloc_lock>
 80049ea:	f8d8 3000 	ldr.w	r3, [r8]
 80049ee:	461c      	mov	r4, r3
 80049f0:	bb44      	cbnz	r4, 8004a44 <_malloc_r+0x88>
 80049f2:	4629      	mov	r1, r5
 80049f4:	4630      	mov	r0, r6
 80049f6:	f7ff ffbf 	bl	8004978 <sbrk_aligned>
 80049fa:	1c43      	adds	r3, r0, #1
 80049fc:	4604      	mov	r4, r0
 80049fe:	d158      	bne.n	8004ab2 <_malloc_r+0xf6>
 8004a00:	f8d8 4000 	ldr.w	r4, [r8]
 8004a04:	4627      	mov	r7, r4
 8004a06:	2f00      	cmp	r7, #0
 8004a08:	d143      	bne.n	8004a92 <_malloc_r+0xd6>
 8004a0a:	2c00      	cmp	r4, #0
 8004a0c:	d04b      	beq.n	8004aa6 <_malloc_r+0xea>
 8004a0e:	6823      	ldr	r3, [r4, #0]
 8004a10:	4639      	mov	r1, r7
 8004a12:	4630      	mov	r0, r6
 8004a14:	eb04 0903 	add.w	r9, r4, r3
 8004a18:	f000 fdf0 	bl	80055fc <_sbrk_r>
 8004a1c:	4581      	cmp	r9, r0
 8004a1e:	d142      	bne.n	8004aa6 <_malloc_r+0xea>
 8004a20:	6821      	ldr	r1, [r4, #0]
 8004a22:	4630      	mov	r0, r6
 8004a24:	1a6d      	subs	r5, r5, r1
 8004a26:	4629      	mov	r1, r5
 8004a28:	f7ff ffa6 	bl	8004978 <sbrk_aligned>
 8004a2c:	3001      	adds	r0, #1
 8004a2e:	d03a      	beq.n	8004aa6 <_malloc_r+0xea>
 8004a30:	6823      	ldr	r3, [r4, #0]
 8004a32:	442b      	add	r3, r5
 8004a34:	6023      	str	r3, [r4, #0]
 8004a36:	f8d8 3000 	ldr.w	r3, [r8]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	bb62      	cbnz	r2, 8004a98 <_malloc_r+0xdc>
 8004a3e:	f8c8 7000 	str.w	r7, [r8]
 8004a42:	e00f      	b.n	8004a64 <_malloc_r+0xa8>
 8004a44:	6822      	ldr	r2, [r4, #0]
 8004a46:	1b52      	subs	r2, r2, r5
 8004a48:	d420      	bmi.n	8004a8c <_malloc_r+0xd0>
 8004a4a:	2a0b      	cmp	r2, #11
 8004a4c:	d917      	bls.n	8004a7e <_malloc_r+0xc2>
 8004a4e:	1961      	adds	r1, r4, r5
 8004a50:	42a3      	cmp	r3, r4
 8004a52:	6025      	str	r5, [r4, #0]
 8004a54:	bf18      	it	ne
 8004a56:	6059      	strne	r1, [r3, #4]
 8004a58:	6863      	ldr	r3, [r4, #4]
 8004a5a:	bf08      	it	eq
 8004a5c:	f8c8 1000 	streq.w	r1, [r8]
 8004a60:	5162      	str	r2, [r4, r5]
 8004a62:	604b      	str	r3, [r1, #4]
 8004a64:	4630      	mov	r0, r6
 8004a66:	f000 f82f 	bl	8004ac8 <__malloc_unlock>
 8004a6a:	f104 000b 	add.w	r0, r4, #11
 8004a6e:	1d23      	adds	r3, r4, #4
 8004a70:	f020 0007 	bic.w	r0, r0, #7
 8004a74:	1ac2      	subs	r2, r0, r3
 8004a76:	bf1c      	itt	ne
 8004a78:	1a1b      	subne	r3, r3, r0
 8004a7a:	50a3      	strne	r3, [r4, r2]
 8004a7c:	e7af      	b.n	80049de <_malloc_r+0x22>
 8004a7e:	6862      	ldr	r2, [r4, #4]
 8004a80:	42a3      	cmp	r3, r4
 8004a82:	bf0c      	ite	eq
 8004a84:	f8c8 2000 	streq.w	r2, [r8]
 8004a88:	605a      	strne	r2, [r3, #4]
 8004a8a:	e7eb      	b.n	8004a64 <_malloc_r+0xa8>
 8004a8c:	4623      	mov	r3, r4
 8004a8e:	6864      	ldr	r4, [r4, #4]
 8004a90:	e7ae      	b.n	80049f0 <_malloc_r+0x34>
 8004a92:	463c      	mov	r4, r7
 8004a94:	687f      	ldr	r7, [r7, #4]
 8004a96:	e7b6      	b.n	8004a06 <_malloc_r+0x4a>
 8004a98:	461a      	mov	r2, r3
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	42a3      	cmp	r3, r4
 8004a9e:	d1fb      	bne.n	8004a98 <_malloc_r+0xdc>
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	6053      	str	r3, [r2, #4]
 8004aa4:	e7de      	b.n	8004a64 <_malloc_r+0xa8>
 8004aa6:	230c      	movs	r3, #12
 8004aa8:	4630      	mov	r0, r6
 8004aaa:	6033      	str	r3, [r6, #0]
 8004aac:	f000 f80c 	bl	8004ac8 <__malloc_unlock>
 8004ab0:	e794      	b.n	80049dc <_malloc_r+0x20>
 8004ab2:	6005      	str	r5, [r0, #0]
 8004ab4:	e7d6      	b.n	8004a64 <_malloc_r+0xa8>
 8004ab6:	bf00      	nop
 8004ab8:	20000540 	.word	0x20000540

08004abc <__malloc_lock>:
 8004abc:	4801      	ldr	r0, [pc, #4]	@ (8004ac4 <__malloc_lock+0x8>)
 8004abe:	f7ff b89c 	b.w	8003bfa <__retarget_lock_acquire_recursive>
 8004ac2:	bf00      	nop
 8004ac4:	20000538 	.word	0x20000538

08004ac8 <__malloc_unlock>:
 8004ac8:	4801      	ldr	r0, [pc, #4]	@ (8004ad0 <__malloc_unlock+0x8>)
 8004aca:	f7ff b897 	b.w	8003bfc <__retarget_lock_release_recursive>
 8004ace:	bf00      	nop
 8004ad0:	20000538 	.word	0x20000538

08004ad4 <_Balloc>:
 8004ad4:	b570      	push	{r4, r5, r6, lr}
 8004ad6:	69c6      	ldr	r6, [r0, #28]
 8004ad8:	4604      	mov	r4, r0
 8004ada:	460d      	mov	r5, r1
 8004adc:	b976      	cbnz	r6, 8004afc <_Balloc+0x28>
 8004ade:	2010      	movs	r0, #16
 8004ae0:	f7ff ff42 	bl	8004968 <malloc>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	61e0      	str	r0, [r4, #28]
 8004ae8:	b920      	cbnz	r0, 8004af4 <_Balloc+0x20>
 8004aea:	216b      	movs	r1, #107	@ 0x6b
 8004aec:	4b17      	ldr	r3, [pc, #92]	@ (8004b4c <_Balloc+0x78>)
 8004aee:	4818      	ldr	r0, [pc, #96]	@ (8004b50 <_Balloc+0x7c>)
 8004af0:	f000 fda2 	bl	8005638 <__assert_func>
 8004af4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004af8:	6006      	str	r6, [r0, #0]
 8004afa:	60c6      	str	r6, [r0, #12]
 8004afc:	69e6      	ldr	r6, [r4, #28]
 8004afe:	68f3      	ldr	r3, [r6, #12]
 8004b00:	b183      	cbz	r3, 8004b24 <_Balloc+0x50>
 8004b02:	69e3      	ldr	r3, [r4, #28]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004b0a:	b9b8      	cbnz	r0, 8004b3c <_Balloc+0x68>
 8004b0c:	2101      	movs	r1, #1
 8004b0e:	fa01 f605 	lsl.w	r6, r1, r5
 8004b12:	1d72      	adds	r2, r6, #5
 8004b14:	4620      	mov	r0, r4
 8004b16:	0092      	lsls	r2, r2, #2
 8004b18:	f000 fdac 	bl	8005674 <_calloc_r>
 8004b1c:	b160      	cbz	r0, 8004b38 <_Balloc+0x64>
 8004b1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004b22:	e00e      	b.n	8004b42 <_Balloc+0x6e>
 8004b24:	2221      	movs	r2, #33	@ 0x21
 8004b26:	2104      	movs	r1, #4
 8004b28:	4620      	mov	r0, r4
 8004b2a:	f000 fda3 	bl	8005674 <_calloc_r>
 8004b2e:	69e3      	ldr	r3, [r4, #28]
 8004b30:	60f0      	str	r0, [r6, #12]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1e4      	bne.n	8004b02 <_Balloc+0x2e>
 8004b38:	2000      	movs	r0, #0
 8004b3a:	bd70      	pop	{r4, r5, r6, pc}
 8004b3c:	6802      	ldr	r2, [r0, #0]
 8004b3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004b42:	2300      	movs	r3, #0
 8004b44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004b48:	e7f7      	b.n	8004b3a <_Balloc+0x66>
 8004b4a:	bf00      	nop
 8004b4c:	08005e77 	.word	0x08005e77
 8004b50:	08005ef7 	.word	0x08005ef7

08004b54 <_Bfree>:
 8004b54:	b570      	push	{r4, r5, r6, lr}
 8004b56:	69c6      	ldr	r6, [r0, #28]
 8004b58:	4605      	mov	r5, r0
 8004b5a:	460c      	mov	r4, r1
 8004b5c:	b976      	cbnz	r6, 8004b7c <_Bfree+0x28>
 8004b5e:	2010      	movs	r0, #16
 8004b60:	f7ff ff02 	bl	8004968 <malloc>
 8004b64:	4602      	mov	r2, r0
 8004b66:	61e8      	str	r0, [r5, #28]
 8004b68:	b920      	cbnz	r0, 8004b74 <_Bfree+0x20>
 8004b6a:	218f      	movs	r1, #143	@ 0x8f
 8004b6c:	4b08      	ldr	r3, [pc, #32]	@ (8004b90 <_Bfree+0x3c>)
 8004b6e:	4809      	ldr	r0, [pc, #36]	@ (8004b94 <_Bfree+0x40>)
 8004b70:	f000 fd62 	bl	8005638 <__assert_func>
 8004b74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004b78:	6006      	str	r6, [r0, #0]
 8004b7a:	60c6      	str	r6, [r0, #12]
 8004b7c:	b13c      	cbz	r4, 8004b8e <_Bfree+0x3a>
 8004b7e:	69eb      	ldr	r3, [r5, #28]
 8004b80:	6862      	ldr	r2, [r4, #4]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b88:	6021      	str	r1, [r4, #0]
 8004b8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004b8e:	bd70      	pop	{r4, r5, r6, pc}
 8004b90:	08005e77 	.word	0x08005e77
 8004b94:	08005ef7 	.word	0x08005ef7

08004b98 <__multadd>:
 8004b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b9c:	4607      	mov	r7, r0
 8004b9e:	460c      	mov	r4, r1
 8004ba0:	461e      	mov	r6, r3
 8004ba2:	2000      	movs	r0, #0
 8004ba4:	690d      	ldr	r5, [r1, #16]
 8004ba6:	f101 0c14 	add.w	ip, r1, #20
 8004baa:	f8dc 3000 	ldr.w	r3, [ip]
 8004bae:	3001      	adds	r0, #1
 8004bb0:	b299      	uxth	r1, r3
 8004bb2:	fb02 6101 	mla	r1, r2, r1, r6
 8004bb6:	0c1e      	lsrs	r6, r3, #16
 8004bb8:	0c0b      	lsrs	r3, r1, #16
 8004bba:	fb02 3306 	mla	r3, r2, r6, r3
 8004bbe:	b289      	uxth	r1, r1
 8004bc0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004bc4:	4285      	cmp	r5, r0
 8004bc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004bca:	f84c 1b04 	str.w	r1, [ip], #4
 8004bce:	dcec      	bgt.n	8004baa <__multadd+0x12>
 8004bd0:	b30e      	cbz	r6, 8004c16 <__multadd+0x7e>
 8004bd2:	68a3      	ldr	r3, [r4, #8]
 8004bd4:	42ab      	cmp	r3, r5
 8004bd6:	dc19      	bgt.n	8004c0c <__multadd+0x74>
 8004bd8:	6861      	ldr	r1, [r4, #4]
 8004bda:	4638      	mov	r0, r7
 8004bdc:	3101      	adds	r1, #1
 8004bde:	f7ff ff79 	bl	8004ad4 <_Balloc>
 8004be2:	4680      	mov	r8, r0
 8004be4:	b928      	cbnz	r0, 8004bf2 <__multadd+0x5a>
 8004be6:	4602      	mov	r2, r0
 8004be8:	21ba      	movs	r1, #186	@ 0xba
 8004bea:	4b0c      	ldr	r3, [pc, #48]	@ (8004c1c <__multadd+0x84>)
 8004bec:	480c      	ldr	r0, [pc, #48]	@ (8004c20 <__multadd+0x88>)
 8004bee:	f000 fd23 	bl	8005638 <__assert_func>
 8004bf2:	6922      	ldr	r2, [r4, #16]
 8004bf4:	f104 010c 	add.w	r1, r4, #12
 8004bf8:	3202      	adds	r2, #2
 8004bfa:	0092      	lsls	r2, r2, #2
 8004bfc:	300c      	adds	r0, #12
 8004bfe:	f000 fd0d 	bl	800561c <memcpy>
 8004c02:	4621      	mov	r1, r4
 8004c04:	4638      	mov	r0, r7
 8004c06:	f7ff ffa5 	bl	8004b54 <_Bfree>
 8004c0a:	4644      	mov	r4, r8
 8004c0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004c10:	3501      	adds	r5, #1
 8004c12:	615e      	str	r6, [r3, #20]
 8004c14:	6125      	str	r5, [r4, #16]
 8004c16:	4620      	mov	r0, r4
 8004c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c1c:	08005ee6 	.word	0x08005ee6
 8004c20:	08005ef7 	.word	0x08005ef7

08004c24 <__hi0bits>:
 8004c24:	4603      	mov	r3, r0
 8004c26:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004c2a:	bf3a      	itte	cc
 8004c2c:	0403      	lslcc	r3, r0, #16
 8004c2e:	2010      	movcc	r0, #16
 8004c30:	2000      	movcs	r0, #0
 8004c32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c36:	bf3c      	itt	cc
 8004c38:	021b      	lslcc	r3, r3, #8
 8004c3a:	3008      	addcc	r0, #8
 8004c3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c40:	bf3c      	itt	cc
 8004c42:	011b      	lslcc	r3, r3, #4
 8004c44:	3004      	addcc	r0, #4
 8004c46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c4a:	bf3c      	itt	cc
 8004c4c:	009b      	lslcc	r3, r3, #2
 8004c4e:	3002      	addcc	r0, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	db05      	blt.n	8004c60 <__hi0bits+0x3c>
 8004c54:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004c58:	f100 0001 	add.w	r0, r0, #1
 8004c5c:	bf08      	it	eq
 8004c5e:	2020      	moveq	r0, #32
 8004c60:	4770      	bx	lr

08004c62 <__lo0bits>:
 8004c62:	6803      	ldr	r3, [r0, #0]
 8004c64:	4602      	mov	r2, r0
 8004c66:	f013 0007 	ands.w	r0, r3, #7
 8004c6a:	d00b      	beq.n	8004c84 <__lo0bits+0x22>
 8004c6c:	07d9      	lsls	r1, r3, #31
 8004c6e:	d421      	bmi.n	8004cb4 <__lo0bits+0x52>
 8004c70:	0798      	lsls	r0, r3, #30
 8004c72:	bf49      	itett	mi
 8004c74:	085b      	lsrmi	r3, r3, #1
 8004c76:	089b      	lsrpl	r3, r3, #2
 8004c78:	2001      	movmi	r0, #1
 8004c7a:	6013      	strmi	r3, [r2, #0]
 8004c7c:	bf5c      	itt	pl
 8004c7e:	2002      	movpl	r0, #2
 8004c80:	6013      	strpl	r3, [r2, #0]
 8004c82:	4770      	bx	lr
 8004c84:	b299      	uxth	r1, r3
 8004c86:	b909      	cbnz	r1, 8004c8c <__lo0bits+0x2a>
 8004c88:	2010      	movs	r0, #16
 8004c8a:	0c1b      	lsrs	r3, r3, #16
 8004c8c:	b2d9      	uxtb	r1, r3
 8004c8e:	b909      	cbnz	r1, 8004c94 <__lo0bits+0x32>
 8004c90:	3008      	adds	r0, #8
 8004c92:	0a1b      	lsrs	r3, r3, #8
 8004c94:	0719      	lsls	r1, r3, #28
 8004c96:	bf04      	itt	eq
 8004c98:	091b      	lsreq	r3, r3, #4
 8004c9a:	3004      	addeq	r0, #4
 8004c9c:	0799      	lsls	r1, r3, #30
 8004c9e:	bf04      	itt	eq
 8004ca0:	089b      	lsreq	r3, r3, #2
 8004ca2:	3002      	addeq	r0, #2
 8004ca4:	07d9      	lsls	r1, r3, #31
 8004ca6:	d403      	bmi.n	8004cb0 <__lo0bits+0x4e>
 8004ca8:	085b      	lsrs	r3, r3, #1
 8004caa:	f100 0001 	add.w	r0, r0, #1
 8004cae:	d003      	beq.n	8004cb8 <__lo0bits+0x56>
 8004cb0:	6013      	str	r3, [r2, #0]
 8004cb2:	4770      	bx	lr
 8004cb4:	2000      	movs	r0, #0
 8004cb6:	4770      	bx	lr
 8004cb8:	2020      	movs	r0, #32
 8004cba:	4770      	bx	lr

08004cbc <__i2b>:
 8004cbc:	b510      	push	{r4, lr}
 8004cbe:	460c      	mov	r4, r1
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	f7ff ff07 	bl	8004ad4 <_Balloc>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	b928      	cbnz	r0, 8004cd6 <__i2b+0x1a>
 8004cca:	f240 1145 	movw	r1, #325	@ 0x145
 8004cce:	4b04      	ldr	r3, [pc, #16]	@ (8004ce0 <__i2b+0x24>)
 8004cd0:	4804      	ldr	r0, [pc, #16]	@ (8004ce4 <__i2b+0x28>)
 8004cd2:	f000 fcb1 	bl	8005638 <__assert_func>
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	6144      	str	r4, [r0, #20]
 8004cda:	6103      	str	r3, [r0, #16]
 8004cdc:	bd10      	pop	{r4, pc}
 8004cde:	bf00      	nop
 8004ce0:	08005ee6 	.word	0x08005ee6
 8004ce4:	08005ef7 	.word	0x08005ef7

08004ce8 <__multiply>:
 8004ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cec:	4617      	mov	r7, r2
 8004cee:	690a      	ldr	r2, [r1, #16]
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	4689      	mov	r9, r1
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	bfa2      	ittt	ge
 8004cf8:	463b      	movge	r3, r7
 8004cfa:	460f      	movge	r7, r1
 8004cfc:	4699      	movge	r9, r3
 8004cfe:	693d      	ldr	r5, [r7, #16]
 8004d00:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	6879      	ldr	r1, [r7, #4]
 8004d08:	eb05 060a 	add.w	r6, r5, sl
 8004d0c:	42b3      	cmp	r3, r6
 8004d0e:	b085      	sub	sp, #20
 8004d10:	bfb8      	it	lt
 8004d12:	3101      	addlt	r1, #1
 8004d14:	f7ff fede 	bl	8004ad4 <_Balloc>
 8004d18:	b930      	cbnz	r0, 8004d28 <__multiply+0x40>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004d20:	4b40      	ldr	r3, [pc, #256]	@ (8004e24 <__multiply+0x13c>)
 8004d22:	4841      	ldr	r0, [pc, #260]	@ (8004e28 <__multiply+0x140>)
 8004d24:	f000 fc88 	bl	8005638 <__assert_func>
 8004d28:	f100 0414 	add.w	r4, r0, #20
 8004d2c:	4623      	mov	r3, r4
 8004d2e:	2200      	movs	r2, #0
 8004d30:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8004d34:	4573      	cmp	r3, lr
 8004d36:	d320      	bcc.n	8004d7a <__multiply+0x92>
 8004d38:	f107 0814 	add.w	r8, r7, #20
 8004d3c:	f109 0114 	add.w	r1, r9, #20
 8004d40:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8004d44:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8004d48:	9302      	str	r3, [sp, #8]
 8004d4a:	1beb      	subs	r3, r5, r7
 8004d4c:	3b15      	subs	r3, #21
 8004d4e:	f023 0303 	bic.w	r3, r3, #3
 8004d52:	3304      	adds	r3, #4
 8004d54:	3715      	adds	r7, #21
 8004d56:	42bd      	cmp	r5, r7
 8004d58:	bf38      	it	cc
 8004d5a:	2304      	movcc	r3, #4
 8004d5c:	9301      	str	r3, [sp, #4]
 8004d5e:	9b02      	ldr	r3, [sp, #8]
 8004d60:	9103      	str	r1, [sp, #12]
 8004d62:	428b      	cmp	r3, r1
 8004d64:	d80c      	bhi.n	8004d80 <__multiply+0x98>
 8004d66:	2e00      	cmp	r6, #0
 8004d68:	dd03      	ble.n	8004d72 <__multiply+0x8a>
 8004d6a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d055      	beq.n	8004e1e <__multiply+0x136>
 8004d72:	6106      	str	r6, [r0, #16]
 8004d74:	b005      	add	sp, #20
 8004d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d7a:	f843 2b04 	str.w	r2, [r3], #4
 8004d7e:	e7d9      	b.n	8004d34 <__multiply+0x4c>
 8004d80:	f8b1 a000 	ldrh.w	sl, [r1]
 8004d84:	f1ba 0f00 	cmp.w	sl, #0
 8004d88:	d01f      	beq.n	8004dca <__multiply+0xe2>
 8004d8a:	46c4      	mov	ip, r8
 8004d8c:	46a1      	mov	r9, r4
 8004d8e:	2700      	movs	r7, #0
 8004d90:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004d94:	f8d9 3000 	ldr.w	r3, [r9]
 8004d98:	fa1f fb82 	uxth.w	fp, r2
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	fb0a 330b 	mla	r3, sl, fp, r3
 8004da2:	443b      	add	r3, r7
 8004da4:	f8d9 7000 	ldr.w	r7, [r9]
 8004da8:	0c12      	lsrs	r2, r2, #16
 8004daa:	0c3f      	lsrs	r7, r7, #16
 8004dac:	fb0a 7202 	mla	r2, sl, r2, r7
 8004db0:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004dba:	4565      	cmp	r5, ip
 8004dbc:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8004dc0:	f849 3b04 	str.w	r3, [r9], #4
 8004dc4:	d8e4      	bhi.n	8004d90 <__multiply+0xa8>
 8004dc6:	9b01      	ldr	r3, [sp, #4]
 8004dc8:	50e7      	str	r7, [r4, r3]
 8004dca:	9b03      	ldr	r3, [sp, #12]
 8004dcc:	3104      	adds	r1, #4
 8004dce:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004dd2:	f1b9 0f00 	cmp.w	r9, #0
 8004dd6:	d020      	beq.n	8004e1a <__multiply+0x132>
 8004dd8:	4647      	mov	r7, r8
 8004dda:	46a4      	mov	ip, r4
 8004ddc:	f04f 0a00 	mov.w	sl, #0
 8004de0:	6823      	ldr	r3, [r4, #0]
 8004de2:	f8b7 b000 	ldrh.w	fp, [r7]
 8004de6:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	fb09 220b 	mla	r2, r9, fp, r2
 8004df0:	4452      	add	r2, sl
 8004df2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004df6:	f84c 3b04 	str.w	r3, [ip], #4
 8004dfa:	f857 3b04 	ldr.w	r3, [r7], #4
 8004dfe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004e02:	f8bc 3000 	ldrh.w	r3, [ip]
 8004e06:	42bd      	cmp	r5, r7
 8004e08:	fb09 330a 	mla	r3, r9, sl, r3
 8004e0c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8004e10:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004e14:	d8e5      	bhi.n	8004de2 <__multiply+0xfa>
 8004e16:	9a01      	ldr	r2, [sp, #4]
 8004e18:	50a3      	str	r3, [r4, r2]
 8004e1a:	3404      	adds	r4, #4
 8004e1c:	e79f      	b.n	8004d5e <__multiply+0x76>
 8004e1e:	3e01      	subs	r6, #1
 8004e20:	e7a1      	b.n	8004d66 <__multiply+0x7e>
 8004e22:	bf00      	nop
 8004e24:	08005ee6 	.word	0x08005ee6
 8004e28:	08005ef7 	.word	0x08005ef7

08004e2c <__pow5mult>:
 8004e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e30:	4615      	mov	r5, r2
 8004e32:	f012 0203 	ands.w	r2, r2, #3
 8004e36:	4607      	mov	r7, r0
 8004e38:	460e      	mov	r6, r1
 8004e3a:	d007      	beq.n	8004e4c <__pow5mult+0x20>
 8004e3c:	4c25      	ldr	r4, [pc, #148]	@ (8004ed4 <__pow5mult+0xa8>)
 8004e3e:	3a01      	subs	r2, #1
 8004e40:	2300      	movs	r3, #0
 8004e42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004e46:	f7ff fea7 	bl	8004b98 <__multadd>
 8004e4a:	4606      	mov	r6, r0
 8004e4c:	10ad      	asrs	r5, r5, #2
 8004e4e:	d03d      	beq.n	8004ecc <__pow5mult+0xa0>
 8004e50:	69fc      	ldr	r4, [r7, #28]
 8004e52:	b97c      	cbnz	r4, 8004e74 <__pow5mult+0x48>
 8004e54:	2010      	movs	r0, #16
 8004e56:	f7ff fd87 	bl	8004968 <malloc>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	61f8      	str	r0, [r7, #28]
 8004e5e:	b928      	cbnz	r0, 8004e6c <__pow5mult+0x40>
 8004e60:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004e64:	4b1c      	ldr	r3, [pc, #112]	@ (8004ed8 <__pow5mult+0xac>)
 8004e66:	481d      	ldr	r0, [pc, #116]	@ (8004edc <__pow5mult+0xb0>)
 8004e68:	f000 fbe6 	bl	8005638 <__assert_func>
 8004e6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004e70:	6004      	str	r4, [r0, #0]
 8004e72:	60c4      	str	r4, [r0, #12]
 8004e74:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004e78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004e7c:	b94c      	cbnz	r4, 8004e92 <__pow5mult+0x66>
 8004e7e:	f240 2171 	movw	r1, #625	@ 0x271
 8004e82:	4638      	mov	r0, r7
 8004e84:	f7ff ff1a 	bl	8004cbc <__i2b>
 8004e88:	2300      	movs	r3, #0
 8004e8a:	4604      	mov	r4, r0
 8004e8c:	f8c8 0008 	str.w	r0, [r8, #8]
 8004e90:	6003      	str	r3, [r0, #0]
 8004e92:	f04f 0900 	mov.w	r9, #0
 8004e96:	07eb      	lsls	r3, r5, #31
 8004e98:	d50a      	bpl.n	8004eb0 <__pow5mult+0x84>
 8004e9a:	4631      	mov	r1, r6
 8004e9c:	4622      	mov	r2, r4
 8004e9e:	4638      	mov	r0, r7
 8004ea0:	f7ff ff22 	bl	8004ce8 <__multiply>
 8004ea4:	4680      	mov	r8, r0
 8004ea6:	4631      	mov	r1, r6
 8004ea8:	4638      	mov	r0, r7
 8004eaa:	f7ff fe53 	bl	8004b54 <_Bfree>
 8004eae:	4646      	mov	r6, r8
 8004eb0:	106d      	asrs	r5, r5, #1
 8004eb2:	d00b      	beq.n	8004ecc <__pow5mult+0xa0>
 8004eb4:	6820      	ldr	r0, [r4, #0]
 8004eb6:	b938      	cbnz	r0, 8004ec8 <__pow5mult+0x9c>
 8004eb8:	4622      	mov	r2, r4
 8004eba:	4621      	mov	r1, r4
 8004ebc:	4638      	mov	r0, r7
 8004ebe:	f7ff ff13 	bl	8004ce8 <__multiply>
 8004ec2:	6020      	str	r0, [r4, #0]
 8004ec4:	f8c0 9000 	str.w	r9, [r0]
 8004ec8:	4604      	mov	r4, r0
 8004eca:	e7e4      	b.n	8004e96 <__pow5mult+0x6a>
 8004ecc:	4630      	mov	r0, r6
 8004ece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ed2:	bf00      	nop
 8004ed4:	08005fa8 	.word	0x08005fa8
 8004ed8:	08005e77 	.word	0x08005e77
 8004edc:	08005ef7 	.word	0x08005ef7

08004ee0 <__lshift>:
 8004ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ee4:	460c      	mov	r4, r1
 8004ee6:	4607      	mov	r7, r0
 8004ee8:	4691      	mov	r9, r2
 8004eea:	6923      	ldr	r3, [r4, #16]
 8004eec:	6849      	ldr	r1, [r1, #4]
 8004eee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004ef2:	68a3      	ldr	r3, [r4, #8]
 8004ef4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004ef8:	f108 0601 	add.w	r6, r8, #1
 8004efc:	42b3      	cmp	r3, r6
 8004efe:	db0b      	blt.n	8004f18 <__lshift+0x38>
 8004f00:	4638      	mov	r0, r7
 8004f02:	f7ff fde7 	bl	8004ad4 <_Balloc>
 8004f06:	4605      	mov	r5, r0
 8004f08:	b948      	cbnz	r0, 8004f1e <__lshift+0x3e>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004f10:	4b27      	ldr	r3, [pc, #156]	@ (8004fb0 <__lshift+0xd0>)
 8004f12:	4828      	ldr	r0, [pc, #160]	@ (8004fb4 <__lshift+0xd4>)
 8004f14:	f000 fb90 	bl	8005638 <__assert_func>
 8004f18:	3101      	adds	r1, #1
 8004f1a:	005b      	lsls	r3, r3, #1
 8004f1c:	e7ee      	b.n	8004efc <__lshift+0x1c>
 8004f1e:	2300      	movs	r3, #0
 8004f20:	f100 0114 	add.w	r1, r0, #20
 8004f24:	f100 0210 	add.w	r2, r0, #16
 8004f28:	4618      	mov	r0, r3
 8004f2a:	4553      	cmp	r3, sl
 8004f2c:	db33      	blt.n	8004f96 <__lshift+0xb6>
 8004f2e:	6920      	ldr	r0, [r4, #16]
 8004f30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004f34:	f104 0314 	add.w	r3, r4, #20
 8004f38:	f019 091f 	ands.w	r9, r9, #31
 8004f3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004f40:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004f44:	d02b      	beq.n	8004f9e <__lshift+0xbe>
 8004f46:	468a      	mov	sl, r1
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f1c9 0e20 	rsb	lr, r9, #32
 8004f4e:	6818      	ldr	r0, [r3, #0]
 8004f50:	fa00 f009 	lsl.w	r0, r0, r9
 8004f54:	4310      	orrs	r0, r2
 8004f56:	f84a 0b04 	str.w	r0, [sl], #4
 8004f5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f5e:	459c      	cmp	ip, r3
 8004f60:	fa22 f20e 	lsr.w	r2, r2, lr
 8004f64:	d8f3      	bhi.n	8004f4e <__lshift+0x6e>
 8004f66:	ebac 0304 	sub.w	r3, ip, r4
 8004f6a:	3b15      	subs	r3, #21
 8004f6c:	f023 0303 	bic.w	r3, r3, #3
 8004f70:	3304      	adds	r3, #4
 8004f72:	f104 0015 	add.w	r0, r4, #21
 8004f76:	4560      	cmp	r0, ip
 8004f78:	bf88      	it	hi
 8004f7a:	2304      	movhi	r3, #4
 8004f7c:	50ca      	str	r2, [r1, r3]
 8004f7e:	b10a      	cbz	r2, 8004f84 <__lshift+0xa4>
 8004f80:	f108 0602 	add.w	r6, r8, #2
 8004f84:	3e01      	subs	r6, #1
 8004f86:	4638      	mov	r0, r7
 8004f88:	4621      	mov	r1, r4
 8004f8a:	612e      	str	r6, [r5, #16]
 8004f8c:	f7ff fde2 	bl	8004b54 <_Bfree>
 8004f90:	4628      	mov	r0, r5
 8004f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f96:	f842 0f04 	str.w	r0, [r2, #4]!
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	e7c5      	b.n	8004f2a <__lshift+0x4a>
 8004f9e:	3904      	subs	r1, #4
 8004fa0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fa4:	459c      	cmp	ip, r3
 8004fa6:	f841 2f04 	str.w	r2, [r1, #4]!
 8004faa:	d8f9      	bhi.n	8004fa0 <__lshift+0xc0>
 8004fac:	e7ea      	b.n	8004f84 <__lshift+0xa4>
 8004fae:	bf00      	nop
 8004fb0:	08005ee6 	.word	0x08005ee6
 8004fb4:	08005ef7 	.word	0x08005ef7

08004fb8 <__mcmp>:
 8004fb8:	4603      	mov	r3, r0
 8004fba:	690a      	ldr	r2, [r1, #16]
 8004fbc:	6900      	ldr	r0, [r0, #16]
 8004fbe:	b530      	push	{r4, r5, lr}
 8004fc0:	1a80      	subs	r0, r0, r2
 8004fc2:	d10e      	bne.n	8004fe2 <__mcmp+0x2a>
 8004fc4:	3314      	adds	r3, #20
 8004fc6:	3114      	adds	r1, #20
 8004fc8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004fcc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004fd0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004fd4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004fd8:	4295      	cmp	r5, r2
 8004fda:	d003      	beq.n	8004fe4 <__mcmp+0x2c>
 8004fdc:	d205      	bcs.n	8004fea <__mcmp+0x32>
 8004fde:	f04f 30ff 	mov.w	r0, #4294967295
 8004fe2:	bd30      	pop	{r4, r5, pc}
 8004fe4:	42a3      	cmp	r3, r4
 8004fe6:	d3f3      	bcc.n	8004fd0 <__mcmp+0x18>
 8004fe8:	e7fb      	b.n	8004fe2 <__mcmp+0x2a>
 8004fea:	2001      	movs	r0, #1
 8004fec:	e7f9      	b.n	8004fe2 <__mcmp+0x2a>
	...

08004ff0 <__mdiff>:
 8004ff0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ff4:	4689      	mov	r9, r1
 8004ff6:	4606      	mov	r6, r0
 8004ff8:	4611      	mov	r1, r2
 8004ffa:	4648      	mov	r0, r9
 8004ffc:	4614      	mov	r4, r2
 8004ffe:	f7ff ffdb 	bl	8004fb8 <__mcmp>
 8005002:	1e05      	subs	r5, r0, #0
 8005004:	d112      	bne.n	800502c <__mdiff+0x3c>
 8005006:	4629      	mov	r1, r5
 8005008:	4630      	mov	r0, r6
 800500a:	f7ff fd63 	bl	8004ad4 <_Balloc>
 800500e:	4602      	mov	r2, r0
 8005010:	b928      	cbnz	r0, 800501e <__mdiff+0x2e>
 8005012:	f240 2137 	movw	r1, #567	@ 0x237
 8005016:	4b3e      	ldr	r3, [pc, #248]	@ (8005110 <__mdiff+0x120>)
 8005018:	483e      	ldr	r0, [pc, #248]	@ (8005114 <__mdiff+0x124>)
 800501a:	f000 fb0d 	bl	8005638 <__assert_func>
 800501e:	2301      	movs	r3, #1
 8005020:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005024:	4610      	mov	r0, r2
 8005026:	b003      	add	sp, #12
 8005028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800502c:	bfbc      	itt	lt
 800502e:	464b      	movlt	r3, r9
 8005030:	46a1      	movlt	r9, r4
 8005032:	4630      	mov	r0, r6
 8005034:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005038:	bfba      	itte	lt
 800503a:	461c      	movlt	r4, r3
 800503c:	2501      	movlt	r5, #1
 800503e:	2500      	movge	r5, #0
 8005040:	f7ff fd48 	bl	8004ad4 <_Balloc>
 8005044:	4602      	mov	r2, r0
 8005046:	b918      	cbnz	r0, 8005050 <__mdiff+0x60>
 8005048:	f240 2145 	movw	r1, #581	@ 0x245
 800504c:	4b30      	ldr	r3, [pc, #192]	@ (8005110 <__mdiff+0x120>)
 800504e:	e7e3      	b.n	8005018 <__mdiff+0x28>
 8005050:	f100 0b14 	add.w	fp, r0, #20
 8005054:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005058:	f109 0310 	add.w	r3, r9, #16
 800505c:	60c5      	str	r5, [r0, #12]
 800505e:	f04f 0c00 	mov.w	ip, #0
 8005062:	f109 0514 	add.w	r5, r9, #20
 8005066:	46d9      	mov	r9, fp
 8005068:	6926      	ldr	r6, [r4, #16]
 800506a:	f104 0e14 	add.w	lr, r4, #20
 800506e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005072:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005076:	9301      	str	r3, [sp, #4]
 8005078:	9b01      	ldr	r3, [sp, #4]
 800507a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800507e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005082:	b281      	uxth	r1, r0
 8005084:	9301      	str	r3, [sp, #4]
 8005086:	fa1f f38a 	uxth.w	r3, sl
 800508a:	1a5b      	subs	r3, r3, r1
 800508c:	0c00      	lsrs	r0, r0, #16
 800508e:	4463      	add	r3, ip
 8005090:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005094:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005098:	b29b      	uxth	r3, r3
 800509a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800509e:	4576      	cmp	r6, lr
 80050a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80050a4:	f849 3b04 	str.w	r3, [r9], #4
 80050a8:	d8e6      	bhi.n	8005078 <__mdiff+0x88>
 80050aa:	1b33      	subs	r3, r6, r4
 80050ac:	3b15      	subs	r3, #21
 80050ae:	f023 0303 	bic.w	r3, r3, #3
 80050b2:	3415      	adds	r4, #21
 80050b4:	3304      	adds	r3, #4
 80050b6:	42a6      	cmp	r6, r4
 80050b8:	bf38      	it	cc
 80050ba:	2304      	movcc	r3, #4
 80050bc:	441d      	add	r5, r3
 80050be:	445b      	add	r3, fp
 80050c0:	461e      	mov	r6, r3
 80050c2:	462c      	mov	r4, r5
 80050c4:	4544      	cmp	r4, r8
 80050c6:	d30e      	bcc.n	80050e6 <__mdiff+0xf6>
 80050c8:	f108 0103 	add.w	r1, r8, #3
 80050cc:	1b49      	subs	r1, r1, r5
 80050ce:	f021 0103 	bic.w	r1, r1, #3
 80050d2:	3d03      	subs	r5, #3
 80050d4:	45a8      	cmp	r8, r5
 80050d6:	bf38      	it	cc
 80050d8:	2100      	movcc	r1, #0
 80050da:	440b      	add	r3, r1
 80050dc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80050e0:	b199      	cbz	r1, 800510a <__mdiff+0x11a>
 80050e2:	6117      	str	r7, [r2, #16]
 80050e4:	e79e      	b.n	8005024 <__mdiff+0x34>
 80050e6:	46e6      	mov	lr, ip
 80050e8:	f854 1b04 	ldr.w	r1, [r4], #4
 80050ec:	fa1f fc81 	uxth.w	ip, r1
 80050f0:	44f4      	add	ip, lr
 80050f2:	0c08      	lsrs	r0, r1, #16
 80050f4:	4471      	add	r1, lr
 80050f6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80050fa:	b289      	uxth	r1, r1
 80050fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005100:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005104:	f846 1b04 	str.w	r1, [r6], #4
 8005108:	e7dc      	b.n	80050c4 <__mdiff+0xd4>
 800510a:	3f01      	subs	r7, #1
 800510c:	e7e6      	b.n	80050dc <__mdiff+0xec>
 800510e:	bf00      	nop
 8005110:	08005ee6 	.word	0x08005ee6
 8005114:	08005ef7 	.word	0x08005ef7

08005118 <__d2b>:
 8005118:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800511c:	2101      	movs	r1, #1
 800511e:	4690      	mov	r8, r2
 8005120:	4699      	mov	r9, r3
 8005122:	9e08      	ldr	r6, [sp, #32]
 8005124:	f7ff fcd6 	bl	8004ad4 <_Balloc>
 8005128:	4604      	mov	r4, r0
 800512a:	b930      	cbnz	r0, 800513a <__d2b+0x22>
 800512c:	4602      	mov	r2, r0
 800512e:	f240 310f 	movw	r1, #783	@ 0x30f
 8005132:	4b23      	ldr	r3, [pc, #140]	@ (80051c0 <__d2b+0xa8>)
 8005134:	4823      	ldr	r0, [pc, #140]	@ (80051c4 <__d2b+0xac>)
 8005136:	f000 fa7f 	bl	8005638 <__assert_func>
 800513a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800513e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005142:	b10d      	cbz	r5, 8005148 <__d2b+0x30>
 8005144:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005148:	9301      	str	r3, [sp, #4]
 800514a:	f1b8 0300 	subs.w	r3, r8, #0
 800514e:	d024      	beq.n	800519a <__d2b+0x82>
 8005150:	4668      	mov	r0, sp
 8005152:	9300      	str	r3, [sp, #0]
 8005154:	f7ff fd85 	bl	8004c62 <__lo0bits>
 8005158:	e9dd 1200 	ldrd	r1, r2, [sp]
 800515c:	b1d8      	cbz	r0, 8005196 <__d2b+0x7e>
 800515e:	f1c0 0320 	rsb	r3, r0, #32
 8005162:	fa02 f303 	lsl.w	r3, r2, r3
 8005166:	430b      	orrs	r3, r1
 8005168:	40c2      	lsrs	r2, r0
 800516a:	6163      	str	r3, [r4, #20]
 800516c:	9201      	str	r2, [sp, #4]
 800516e:	9b01      	ldr	r3, [sp, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	bf0c      	ite	eq
 8005174:	2201      	moveq	r2, #1
 8005176:	2202      	movne	r2, #2
 8005178:	61a3      	str	r3, [r4, #24]
 800517a:	6122      	str	r2, [r4, #16]
 800517c:	b1ad      	cbz	r5, 80051aa <__d2b+0x92>
 800517e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005182:	4405      	add	r5, r0
 8005184:	6035      	str	r5, [r6, #0]
 8005186:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800518a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800518c:	6018      	str	r0, [r3, #0]
 800518e:	4620      	mov	r0, r4
 8005190:	b002      	add	sp, #8
 8005192:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005196:	6161      	str	r1, [r4, #20]
 8005198:	e7e9      	b.n	800516e <__d2b+0x56>
 800519a:	a801      	add	r0, sp, #4
 800519c:	f7ff fd61 	bl	8004c62 <__lo0bits>
 80051a0:	9b01      	ldr	r3, [sp, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	6163      	str	r3, [r4, #20]
 80051a6:	3020      	adds	r0, #32
 80051a8:	e7e7      	b.n	800517a <__d2b+0x62>
 80051aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80051ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80051b2:	6030      	str	r0, [r6, #0]
 80051b4:	6918      	ldr	r0, [r3, #16]
 80051b6:	f7ff fd35 	bl	8004c24 <__hi0bits>
 80051ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80051be:	e7e4      	b.n	800518a <__d2b+0x72>
 80051c0:	08005ee6 	.word	0x08005ee6
 80051c4:	08005ef7 	.word	0x08005ef7

080051c8 <__ssputs_r>:
 80051c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051cc:	461f      	mov	r7, r3
 80051ce:	688e      	ldr	r6, [r1, #8]
 80051d0:	4682      	mov	sl, r0
 80051d2:	42be      	cmp	r6, r7
 80051d4:	460c      	mov	r4, r1
 80051d6:	4690      	mov	r8, r2
 80051d8:	680b      	ldr	r3, [r1, #0]
 80051da:	d82d      	bhi.n	8005238 <__ssputs_r+0x70>
 80051dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80051e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80051e4:	d026      	beq.n	8005234 <__ssputs_r+0x6c>
 80051e6:	6965      	ldr	r5, [r4, #20]
 80051e8:	6909      	ldr	r1, [r1, #16]
 80051ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80051ee:	eba3 0901 	sub.w	r9, r3, r1
 80051f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80051f6:	1c7b      	adds	r3, r7, #1
 80051f8:	444b      	add	r3, r9
 80051fa:	106d      	asrs	r5, r5, #1
 80051fc:	429d      	cmp	r5, r3
 80051fe:	bf38      	it	cc
 8005200:	461d      	movcc	r5, r3
 8005202:	0553      	lsls	r3, r2, #21
 8005204:	d527      	bpl.n	8005256 <__ssputs_r+0x8e>
 8005206:	4629      	mov	r1, r5
 8005208:	f7ff fbd8 	bl	80049bc <_malloc_r>
 800520c:	4606      	mov	r6, r0
 800520e:	b360      	cbz	r0, 800526a <__ssputs_r+0xa2>
 8005210:	464a      	mov	r2, r9
 8005212:	6921      	ldr	r1, [r4, #16]
 8005214:	f000 fa02 	bl	800561c <memcpy>
 8005218:	89a3      	ldrh	r3, [r4, #12]
 800521a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800521e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005222:	81a3      	strh	r3, [r4, #12]
 8005224:	6126      	str	r6, [r4, #16]
 8005226:	444e      	add	r6, r9
 8005228:	6026      	str	r6, [r4, #0]
 800522a:	463e      	mov	r6, r7
 800522c:	6165      	str	r5, [r4, #20]
 800522e:	eba5 0509 	sub.w	r5, r5, r9
 8005232:	60a5      	str	r5, [r4, #8]
 8005234:	42be      	cmp	r6, r7
 8005236:	d900      	bls.n	800523a <__ssputs_r+0x72>
 8005238:	463e      	mov	r6, r7
 800523a:	4632      	mov	r2, r6
 800523c:	4641      	mov	r1, r8
 800523e:	6820      	ldr	r0, [r4, #0]
 8005240:	f000 f9c2 	bl	80055c8 <memmove>
 8005244:	2000      	movs	r0, #0
 8005246:	68a3      	ldr	r3, [r4, #8]
 8005248:	1b9b      	subs	r3, r3, r6
 800524a:	60a3      	str	r3, [r4, #8]
 800524c:	6823      	ldr	r3, [r4, #0]
 800524e:	4433      	add	r3, r6
 8005250:	6023      	str	r3, [r4, #0]
 8005252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005256:	462a      	mov	r2, r5
 8005258:	f000 fa32 	bl	80056c0 <_realloc_r>
 800525c:	4606      	mov	r6, r0
 800525e:	2800      	cmp	r0, #0
 8005260:	d1e0      	bne.n	8005224 <__ssputs_r+0x5c>
 8005262:	4650      	mov	r0, sl
 8005264:	6921      	ldr	r1, [r4, #16]
 8005266:	f7ff fb37 	bl	80048d8 <_free_r>
 800526a:	230c      	movs	r3, #12
 800526c:	f8ca 3000 	str.w	r3, [sl]
 8005270:	89a3      	ldrh	r3, [r4, #12]
 8005272:	f04f 30ff 	mov.w	r0, #4294967295
 8005276:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800527a:	81a3      	strh	r3, [r4, #12]
 800527c:	e7e9      	b.n	8005252 <__ssputs_r+0x8a>
	...

08005280 <_svfiprintf_r>:
 8005280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005284:	4698      	mov	r8, r3
 8005286:	898b      	ldrh	r3, [r1, #12]
 8005288:	4607      	mov	r7, r0
 800528a:	061b      	lsls	r3, r3, #24
 800528c:	460d      	mov	r5, r1
 800528e:	4614      	mov	r4, r2
 8005290:	b09d      	sub	sp, #116	@ 0x74
 8005292:	d510      	bpl.n	80052b6 <_svfiprintf_r+0x36>
 8005294:	690b      	ldr	r3, [r1, #16]
 8005296:	b973      	cbnz	r3, 80052b6 <_svfiprintf_r+0x36>
 8005298:	2140      	movs	r1, #64	@ 0x40
 800529a:	f7ff fb8f 	bl	80049bc <_malloc_r>
 800529e:	6028      	str	r0, [r5, #0]
 80052a0:	6128      	str	r0, [r5, #16]
 80052a2:	b930      	cbnz	r0, 80052b2 <_svfiprintf_r+0x32>
 80052a4:	230c      	movs	r3, #12
 80052a6:	603b      	str	r3, [r7, #0]
 80052a8:	f04f 30ff 	mov.w	r0, #4294967295
 80052ac:	b01d      	add	sp, #116	@ 0x74
 80052ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052b2:	2340      	movs	r3, #64	@ 0x40
 80052b4:	616b      	str	r3, [r5, #20]
 80052b6:	2300      	movs	r3, #0
 80052b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80052ba:	2320      	movs	r3, #32
 80052bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80052c0:	2330      	movs	r3, #48	@ 0x30
 80052c2:	f04f 0901 	mov.w	r9, #1
 80052c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80052ca:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005464 <_svfiprintf_r+0x1e4>
 80052ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80052d2:	4623      	mov	r3, r4
 80052d4:	469a      	mov	sl, r3
 80052d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052da:	b10a      	cbz	r2, 80052e0 <_svfiprintf_r+0x60>
 80052dc:	2a25      	cmp	r2, #37	@ 0x25
 80052de:	d1f9      	bne.n	80052d4 <_svfiprintf_r+0x54>
 80052e0:	ebba 0b04 	subs.w	fp, sl, r4
 80052e4:	d00b      	beq.n	80052fe <_svfiprintf_r+0x7e>
 80052e6:	465b      	mov	r3, fp
 80052e8:	4622      	mov	r2, r4
 80052ea:	4629      	mov	r1, r5
 80052ec:	4638      	mov	r0, r7
 80052ee:	f7ff ff6b 	bl	80051c8 <__ssputs_r>
 80052f2:	3001      	adds	r0, #1
 80052f4:	f000 80a7 	beq.w	8005446 <_svfiprintf_r+0x1c6>
 80052f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80052fa:	445a      	add	r2, fp
 80052fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80052fe:	f89a 3000 	ldrb.w	r3, [sl]
 8005302:	2b00      	cmp	r3, #0
 8005304:	f000 809f 	beq.w	8005446 <_svfiprintf_r+0x1c6>
 8005308:	2300      	movs	r3, #0
 800530a:	f04f 32ff 	mov.w	r2, #4294967295
 800530e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005312:	f10a 0a01 	add.w	sl, sl, #1
 8005316:	9304      	str	r3, [sp, #16]
 8005318:	9307      	str	r3, [sp, #28]
 800531a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800531e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005320:	4654      	mov	r4, sl
 8005322:	2205      	movs	r2, #5
 8005324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005328:	484e      	ldr	r0, [pc, #312]	@ (8005464 <_svfiprintf_r+0x1e4>)
 800532a:	f7fe fc68 	bl	8003bfe <memchr>
 800532e:	9a04      	ldr	r2, [sp, #16]
 8005330:	b9d8      	cbnz	r0, 800536a <_svfiprintf_r+0xea>
 8005332:	06d0      	lsls	r0, r2, #27
 8005334:	bf44      	itt	mi
 8005336:	2320      	movmi	r3, #32
 8005338:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800533c:	0711      	lsls	r1, r2, #28
 800533e:	bf44      	itt	mi
 8005340:	232b      	movmi	r3, #43	@ 0x2b
 8005342:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005346:	f89a 3000 	ldrb.w	r3, [sl]
 800534a:	2b2a      	cmp	r3, #42	@ 0x2a
 800534c:	d015      	beq.n	800537a <_svfiprintf_r+0xfa>
 800534e:	4654      	mov	r4, sl
 8005350:	2000      	movs	r0, #0
 8005352:	f04f 0c0a 	mov.w	ip, #10
 8005356:	9a07      	ldr	r2, [sp, #28]
 8005358:	4621      	mov	r1, r4
 800535a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800535e:	3b30      	subs	r3, #48	@ 0x30
 8005360:	2b09      	cmp	r3, #9
 8005362:	d94b      	bls.n	80053fc <_svfiprintf_r+0x17c>
 8005364:	b1b0      	cbz	r0, 8005394 <_svfiprintf_r+0x114>
 8005366:	9207      	str	r2, [sp, #28]
 8005368:	e014      	b.n	8005394 <_svfiprintf_r+0x114>
 800536a:	eba0 0308 	sub.w	r3, r0, r8
 800536e:	fa09 f303 	lsl.w	r3, r9, r3
 8005372:	4313      	orrs	r3, r2
 8005374:	46a2      	mov	sl, r4
 8005376:	9304      	str	r3, [sp, #16]
 8005378:	e7d2      	b.n	8005320 <_svfiprintf_r+0xa0>
 800537a:	9b03      	ldr	r3, [sp, #12]
 800537c:	1d19      	adds	r1, r3, #4
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	9103      	str	r1, [sp, #12]
 8005382:	2b00      	cmp	r3, #0
 8005384:	bfbb      	ittet	lt
 8005386:	425b      	neglt	r3, r3
 8005388:	f042 0202 	orrlt.w	r2, r2, #2
 800538c:	9307      	strge	r3, [sp, #28]
 800538e:	9307      	strlt	r3, [sp, #28]
 8005390:	bfb8      	it	lt
 8005392:	9204      	strlt	r2, [sp, #16]
 8005394:	7823      	ldrb	r3, [r4, #0]
 8005396:	2b2e      	cmp	r3, #46	@ 0x2e
 8005398:	d10a      	bne.n	80053b0 <_svfiprintf_r+0x130>
 800539a:	7863      	ldrb	r3, [r4, #1]
 800539c:	2b2a      	cmp	r3, #42	@ 0x2a
 800539e:	d132      	bne.n	8005406 <_svfiprintf_r+0x186>
 80053a0:	9b03      	ldr	r3, [sp, #12]
 80053a2:	3402      	adds	r4, #2
 80053a4:	1d1a      	adds	r2, r3, #4
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	9203      	str	r2, [sp, #12]
 80053aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80053ae:	9305      	str	r3, [sp, #20]
 80053b0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005468 <_svfiprintf_r+0x1e8>
 80053b4:	2203      	movs	r2, #3
 80053b6:	4650      	mov	r0, sl
 80053b8:	7821      	ldrb	r1, [r4, #0]
 80053ba:	f7fe fc20 	bl	8003bfe <memchr>
 80053be:	b138      	cbz	r0, 80053d0 <_svfiprintf_r+0x150>
 80053c0:	2240      	movs	r2, #64	@ 0x40
 80053c2:	9b04      	ldr	r3, [sp, #16]
 80053c4:	eba0 000a 	sub.w	r0, r0, sl
 80053c8:	4082      	lsls	r2, r0
 80053ca:	4313      	orrs	r3, r2
 80053cc:	3401      	adds	r4, #1
 80053ce:	9304      	str	r3, [sp, #16]
 80053d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053d4:	2206      	movs	r2, #6
 80053d6:	4825      	ldr	r0, [pc, #148]	@ (800546c <_svfiprintf_r+0x1ec>)
 80053d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80053dc:	f7fe fc0f 	bl	8003bfe <memchr>
 80053e0:	2800      	cmp	r0, #0
 80053e2:	d036      	beq.n	8005452 <_svfiprintf_r+0x1d2>
 80053e4:	4b22      	ldr	r3, [pc, #136]	@ (8005470 <_svfiprintf_r+0x1f0>)
 80053e6:	bb1b      	cbnz	r3, 8005430 <_svfiprintf_r+0x1b0>
 80053e8:	9b03      	ldr	r3, [sp, #12]
 80053ea:	3307      	adds	r3, #7
 80053ec:	f023 0307 	bic.w	r3, r3, #7
 80053f0:	3308      	adds	r3, #8
 80053f2:	9303      	str	r3, [sp, #12]
 80053f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053f6:	4433      	add	r3, r6
 80053f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80053fa:	e76a      	b.n	80052d2 <_svfiprintf_r+0x52>
 80053fc:	460c      	mov	r4, r1
 80053fe:	2001      	movs	r0, #1
 8005400:	fb0c 3202 	mla	r2, ip, r2, r3
 8005404:	e7a8      	b.n	8005358 <_svfiprintf_r+0xd8>
 8005406:	2300      	movs	r3, #0
 8005408:	f04f 0c0a 	mov.w	ip, #10
 800540c:	4619      	mov	r1, r3
 800540e:	3401      	adds	r4, #1
 8005410:	9305      	str	r3, [sp, #20]
 8005412:	4620      	mov	r0, r4
 8005414:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005418:	3a30      	subs	r2, #48	@ 0x30
 800541a:	2a09      	cmp	r2, #9
 800541c:	d903      	bls.n	8005426 <_svfiprintf_r+0x1a6>
 800541e:	2b00      	cmp	r3, #0
 8005420:	d0c6      	beq.n	80053b0 <_svfiprintf_r+0x130>
 8005422:	9105      	str	r1, [sp, #20]
 8005424:	e7c4      	b.n	80053b0 <_svfiprintf_r+0x130>
 8005426:	4604      	mov	r4, r0
 8005428:	2301      	movs	r3, #1
 800542a:	fb0c 2101 	mla	r1, ip, r1, r2
 800542e:	e7f0      	b.n	8005412 <_svfiprintf_r+0x192>
 8005430:	ab03      	add	r3, sp, #12
 8005432:	9300      	str	r3, [sp, #0]
 8005434:	462a      	mov	r2, r5
 8005436:	4638      	mov	r0, r7
 8005438:	4b0e      	ldr	r3, [pc, #56]	@ (8005474 <_svfiprintf_r+0x1f4>)
 800543a:	a904      	add	r1, sp, #16
 800543c:	f7fd fe68 	bl	8003110 <_printf_float>
 8005440:	1c42      	adds	r2, r0, #1
 8005442:	4606      	mov	r6, r0
 8005444:	d1d6      	bne.n	80053f4 <_svfiprintf_r+0x174>
 8005446:	89ab      	ldrh	r3, [r5, #12]
 8005448:	065b      	lsls	r3, r3, #25
 800544a:	f53f af2d 	bmi.w	80052a8 <_svfiprintf_r+0x28>
 800544e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005450:	e72c      	b.n	80052ac <_svfiprintf_r+0x2c>
 8005452:	ab03      	add	r3, sp, #12
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	462a      	mov	r2, r5
 8005458:	4638      	mov	r0, r7
 800545a:	4b06      	ldr	r3, [pc, #24]	@ (8005474 <_svfiprintf_r+0x1f4>)
 800545c:	a904      	add	r1, sp, #16
 800545e:	f7fe f8f5 	bl	800364c <_printf_i>
 8005462:	e7ed      	b.n	8005440 <_svfiprintf_r+0x1c0>
 8005464:	08005f50 	.word	0x08005f50
 8005468:	08005f56 	.word	0x08005f56
 800546c:	08005f5a 	.word	0x08005f5a
 8005470:	08003111 	.word	0x08003111
 8005474:	080051c9 	.word	0x080051c9

08005478 <__sflush_r>:
 8005478:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800547c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800547e:	0716      	lsls	r6, r2, #28
 8005480:	4605      	mov	r5, r0
 8005482:	460c      	mov	r4, r1
 8005484:	d454      	bmi.n	8005530 <__sflush_r+0xb8>
 8005486:	684b      	ldr	r3, [r1, #4]
 8005488:	2b00      	cmp	r3, #0
 800548a:	dc02      	bgt.n	8005492 <__sflush_r+0x1a>
 800548c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800548e:	2b00      	cmp	r3, #0
 8005490:	dd48      	ble.n	8005524 <__sflush_r+0xac>
 8005492:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005494:	2e00      	cmp	r6, #0
 8005496:	d045      	beq.n	8005524 <__sflush_r+0xac>
 8005498:	2300      	movs	r3, #0
 800549a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800549e:	682f      	ldr	r7, [r5, #0]
 80054a0:	6a21      	ldr	r1, [r4, #32]
 80054a2:	602b      	str	r3, [r5, #0]
 80054a4:	d030      	beq.n	8005508 <__sflush_r+0x90>
 80054a6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80054a8:	89a3      	ldrh	r3, [r4, #12]
 80054aa:	0759      	lsls	r1, r3, #29
 80054ac:	d505      	bpl.n	80054ba <__sflush_r+0x42>
 80054ae:	6863      	ldr	r3, [r4, #4]
 80054b0:	1ad2      	subs	r2, r2, r3
 80054b2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80054b4:	b10b      	cbz	r3, 80054ba <__sflush_r+0x42>
 80054b6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80054b8:	1ad2      	subs	r2, r2, r3
 80054ba:	2300      	movs	r3, #0
 80054bc:	4628      	mov	r0, r5
 80054be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80054c0:	6a21      	ldr	r1, [r4, #32]
 80054c2:	47b0      	blx	r6
 80054c4:	1c43      	adds	r3, r0, #1
 80054c6:	89a3      	ldrh	r3, [r4, #12]
 80054c8:	d106      	bne.n	80054d8 <__sflush_r+0x60>
 80054ca:	6829      	ldr	r1, [r5, #0]
 80054cc:	291d      	cmp	r1, #29
 80054ce:	d82b      	bhi.n	8005528 <__sflush_r+0xb0>
 80054d0:	4a28      	ldr	r2, [pc, #160]	@ (8005574 <__sflush_r+0xfc>)
 80054d2:	40ca      	lsrs	r2, r1
 80054d4:	07d6      	lsls	r6, r2, #31
 80054d6:	d527      	bpl.n	8005528 <__sflush_r+0xb0>
 80054d8:	2200      	movs	r2, #0
 80054da:	6062      	str	r2, [r4, #4]
 80054dc:	6922      	ldr	r2, [r4, #16]
 80054de:	04d9      	lsls	r1, r3, #19
 80054e0:	6022      	str	r2, [r4, #0]
 80054e2:	d504      	bpl.n	80054ee <__sflush_r+0x76>
 80054e4:	1c42      	adds	r2, r0, #1
 80054e6:	d101      	bne.n	80054ec <__sflush_r+0x74>
 80054e8:	682b      	ldr	r3, [r5, #0]
 80054ea:	b903      	cbnz	r3, 80054ee <__sflush_r+0x76>
 80054ec:	6560      	str	r0, [r4, #84]	@ 0x54
 80054ee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80054f0:	602f      	str	r7, [r5, #0]
 80054f2:	b1b9      	cbz	r1, 8005524 <__sflush_r+0xac>
 80054f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80054f8:	4299      	cmp	r1, r3
 80054fa:	d002      	beq.n	8005502 <__sflush_r+0x8a>
 80054fc:	4628      	mov	r0, r5
 80054fe:	f7ff f9eb 	bl	80048d8 <_free_r>
 8005502:	2300      	movs	r3, #0
 8005504:	6363      	str	r3, [r4, #52]	@ 0x34
 8005506:	e00d      	b.n	8005524 <__sflush_r+0xac>
 8005508:	2301      	movs	r3, #1
 800550a:	4628      	mov	r0, r5
 800550c:	47b0      	blx	r6
 800550e:	4602      	mov	r2, r0
 8005510:	1c50      	adds	r0, r2, #1
 8005512:	d1c9      	bne.n	80054a8 <__sflush_r+0x30>
 8005514:	682b      	ldr	r3, [r5, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d0c6      	beq.n	80054a8 <__sflush_r+0x30>
 800551a:	2b1d      	cmp	r3, #29
 800551c:	d001      	beq.n	8005522 <__sflush_r+0xaa>
 800551e:	2b16      	cmp	r3, #22
 8005520:	d11d      	bne.n	800555e <__sflush_r+0xe6>
 8005522:	602f      	str	r7, [r5, #0]
 8005524:	2000      	movs	r0, #0
 8005526:	e021      	b.n	800556c <__sflush_r+0xf4>
 8005528:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800552c:	b21b      	sxth	r3, r3
 800552e:	e01a      	b.n	8005566 <__sflush_r+0xee>
 8005530:	690f      	ldr	r7, [r1, #16]
 8005532:	2f00      	cmp	r7, #0
 8005534:	d0f6      	beq.n	8005524 <__sflush_r+0xac>
 8005536:	0793      	lsls	r3, r2, #30
 8005538:	bf18      	it	ne
 800553a:	2300      	movne	r3, #0
 800553c:	680e      	ldr	r6, [r1, #0]
 800553e:	bf08      	it	eq
 8005540:	694b      	ldreq	r3, [r1, #20]
 8005542:	1bf6      	subs	r6, r6, r7
 8005544:	600f      	str	r7, [r1, #0]
 8005546:	608b      	str	r3, [r1, #8]
 8005548:	2e00      	cmp	r6, #0
 800554a:	ddeb      	ble.n	8005524 <__sflush_r+0xac>
 800554c:	4633      	mov	r3, r6
 800554e:	463a      	mov	r2, r7
 8005550:	4628      	mov	r0, r5
 8005552:	6a21      	ldr	r1, [r4, #32]
 8005554:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005558:	47e0      	blx	ip
 800555a:	2800      	cmp	r0, #0
 800555c:	dc07      	bgt.n	800556e <__sflush_r+0xf6>
 800555e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005562:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005566:	f04f 30ff 	mov.w	r0, #4294967295
 800556a:	81a3      	strh	r3, [r4, #12]
 800556c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800556e:	4407      	add	r7, r0
 8005570:	1a36      	subs	r6, r6, r0
 8005572:	e7e9      	b.n	8005548 <__sflush_r+0xd0>
 8005574:	20400001 	.word	0x20400001

08005578 <_fflush_r>:
 8005578:	b538      	push	{r3, r4, r5, lr}
 800557a:	690b      	ldr	r3, [r1, #16]
 800557c:	4605      	mov	r5, r0
 800557e:	460c      	mov	r4, r1
 8005580:	b913      	cbnz	r3, 8005588 <_fflush_r+0x10>
 8005582:	2500      	movs	r5, #0
 8005584:	4628      	mov	r0, r5
 8005586:	bd38      	pop	{r3, r4, r5, pc}
 8005588:	b118      	cbz	r0, 8005592 <_fflush_r+0x1a>
 800558a:	6a03      	ldr	r3, [r0, #32]
 800558c:	b90b      	cbnz	r3, 8005592 <_fflush_r+0x1a>
 800558e:	f7fe fa07 	bl	80039a0 <__sinit>
 8005592:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d0f3      	beq.n	8005582 <_fflush_r+0xa>
 800559a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800559c:	07d0      	lsls	r0, r2, #31
 800559e:	d404      	bmi.n	80055aa <_fflush_r+0x32>
 80055a0:	0599      	lsls	r1, r3, #22
 80055a2:	d402      	bmi.n	80055aa <_fflush_r+0x32>
 80055a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80055a6:	f7fe fb28 	bl	8003bfa <__retarget_lock_acquire_recursive>
 80055aa:	4628      	mov	r0, r5
 80055ac:	4621      	mov	r1, r4
 80055ae:	f7ff ff63 	bl	8005478 <__sflush_r>
 80055b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80055b4:	4605      	mov	r5, r0
 80055b6:	07da      	lsls	r2, r3, #31
 80055b8:	d4e4      	bmi.n	8005584 <_fflush_r+0xc>
 80055ba:	89a3      	ldrh	r3, [r4, #12]
 80055bc:	059b      	lsls	r3, r3, #22
 80055be:	d4e1      	bmi.n	8005584 <_fflush_r+0xc>
 80055c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80055c2:	f7fe fb1b 	bl	8003bfc <__retarget_lock_release_recursive>
 80055c6:	e7dd      	b.n	8005584 <_fflush_r+0xc>

080055c8 <memmove>:
 80055c8:	4288      	cmp	r0, r1
 80055ca:	b510      	push	{r4, lr}
 80055cc:	eb01 0402 	add.w	r4, r1, r2
 80055d0:	d902      	bls.n	80055d8 <memmove+0x10>
 80055d2:	4284      	cmp	r4, r0
 80055d4:	4623      	mov	r3, r4
 80055d6:	d807      	bhi.n	80055e8 <memmove+0x20>
 80055d8:	1e43      	subs	r3, r0, #1
 80055da:	42a1      	cmp	r1, r4
 80055dc:	d008      	beq.n	80055f0 <memmove+0x28>
 80055de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80055e6:	e7f8      	b.n	80055da <memmove+0x12>
 80055e8:	4601      	mov	r1, r0
 80055ea:	4402      	add	r2, r0
 80055ec:	428a      	cmp	r2, r1
 80055ee:	d100      	bne.n	80055f2 <memmove+0x2a>
 80055f0:	bd10      	pop	{r4, pc}
 80055f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80055f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80055fa:	e7f7      	b.n	80055ec <memmove+0x24>

080055fc <_sbrk_r>:
 80055fc:	b538      	push	{r3, r4, r5, lr}
 80055fe:	2300      	movs	r3, #0
 8005600:	4d05      	ldr	r5, [pc, #20]	@ (8005618 <_sbrk_r+0x1c>)
 8005602:	4604      	mov	r4, r0
 8005604:	4608      	mov	r0, r1
 8005606:	602b      	str	r3, [r5, #0]
 8005608:	f7fb ffd2 	bl	80015b0 <_sbrk>
 800560c:	1c43      	adds	r3, r0, #1
 800560e:	d102      	bne.n	8005616 <_sbrk_r+0x1a>
 8005610:	682b      	ldr	r3, [r5, #0]
 8005612:	b103      	cbz	r3, 8005616 <_sbrk_r+0x1a>
 8005614:	6023      	str	r3, [r4, #0]
 8005616:	bd38      	pop	{r3, r4, r5, pc}
 8005618:	20000534 	.word	0x20000534

0800561c <memcpy>:
 800561c:	440a      	add	r2, r1
 800561e:	4291      	cmp	r1, r2
 8005620:	f100 33ff 	add.w	r3, r0, #4294967295
 8005624:	d100      	bne.n	8005628 <memcpy+0xc>
 8005626:	4770      	bx	lr
 8005628:	b510      	push	{r4, lr}
 800562a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800562e:	4291      	cmp	r1, r2
 8005630:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005634:	d1f9      	bne.n	800562a <memcpy+0xe>
 8005636:	bd10      	pop	{r4, pc}

08005638 <__assert_func>:
 8005638:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800563a:	4614      	mov	r4, r2
 800563c:	461a      	mov	r2, r3
 800563e:	4b09      	ldr	r3, [pc, #36]	@ (8005664 <__assert_func+0x2c>)
 8005640:	4605      	mov	r5, r0
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68d8      	ldr	r0, [r3, #12]
 8005646:	b14c      	cbz	r4, 800565c <__assert_func+0x24>
 8005648:	4b07      	ldr	r3, [pc, #28]	@ (8005668 <__assert_func+0x30>)
 800564a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800564e:	9100      	str	r1, [sp, #0]
 8005650:	462b      	mov	r3, r5
 8005652:	4906      	ldr	r1, [pc, #24]	@ (800566c <__assert_func+0x34>)
 8005654:	f000 f870 	bl	8005738 <fiprintf>
 8005658:	f000 f880 	bl	800575c <abort>
 800565c:	4b04      	ldr	r3, [pc, #16]	@ (8005670 <__assert_func+0x38>)
 800565e:	461c      	mov	r4, r3
 8005660:	e7f3      	b.n	800564a <__assert_func+0x12>
 8005662:	bf00      	nop
 8005664:	20000018 	.word	0x20000018
 8005668:	08005f6b 	.word	0x08005f6b
 800566c:	08005f78 	.word	0x08005f78
 8005670:	08005fa6 	.word	0x08005fa6

08005674 <_calloc_r>:
 8005674:	b570      	push	{r4, r5, r6, lr}
 8005676:	fba1 5402 	umull	r5, r4, r1, r2
 800567a:	b934      	cbnz	r4, 800568a <_calloc_r+0x16>
 800567c:	4629      	mov	r1, r5
 800567e:	f7ff f99d 	bl	80049bc <_malloc_r>
 8005682:	4606      	mov	r6, r0
 8005684:	b928      	cbnz	r0, 8005692 <_calloc_r+0x1e>
 8005686:	4630      	mov	r0, r6
 8005688:	bd70      	pop	{r4, r5, r6, pc}
 800568a:	220c      	movs	r2, #12
 800568c:	2600      	movs	r6, #0
 800568e:	6002      	str	r2, [r0, #0]
 8005690:	e7f9      	b.n	8005686 <_calloc_r+0x12>
 8005692:	462a      	mov	r2, r5
 8005694:	4621      	mov	r1, r4
 8005696:	f7fe fa32 	bl	8003afe <memset>
 800569a:	e7f4      	b.n	8005686 <_calloc_r+0x12>

0800569c <__ascii_mbtowc>:
 800569c:	b082      	sub	sp, #8
 800569e:	b901      	cbnz	r1, 80056a2 <__ascii_mbtowc+0x6>
 80056a0:	a901      	add	r1, sp, #4
 80056a2:	b142      	cbz	r2, 80056b6 <__ascii_mbtowc+0x1a>
 80056a4:	b14b      	cbz	r3, 80056ba <__ascii_mbtowc+0x1e>
 80056a6:	7813      	ldrb	r3, [r2, #0]
 80056a8:	600b      	str	r3, [r1, #0]
 80056aa:	7812      	ldrb	r2, [r2, #0]
 80056ac:	1e10      	subs	r0, r2, #0
 80056ae:	bf18      	it	ne
 80056b0:	2001      	movne	r0, #1
 80056b2:	b002      	add	sp, #8
 80056b4:	4770      	bx	lr
 80056b6:	4610      	mov	r0, r2
 80056b8:	e7fb      	b.n	80056b2 <__ascii_mbtowc+0x16>
 80056ba:	f06f 0001 	mvn.w	r0, #1
 80056be:	e7f8      	b.n	80056b2 <__ascii_mbtowc+0x16>

080056c0 <_realloc_r>:
 80056c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056c4:	4607      	mov	r7, r0
 80056c6:	4614      	mov	r4, r2
 80056c8:	460d      	mov	r5, r1
 80056ca:	b921      	cbnz	r1, 80056d6 <_realloc_r+0x16>
 80056cc:	4611      	mov	r1, r2
 80056ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056d2:	f7ff b973 	b.w	80049bc <_malloc_r>
 80056d6:	b92a      	cbnz	r2, 80056e4 <_realloc_r+0x24>
 80056d8:	f7ff f8fe 	bl	80048d8 <_free_r>
 80056dc:	4625      	mov	r5, r4
 80056de:	4628      	mov	r0, r5
 80056e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056e4:	f000 f841 	bl	800576a <_malloc_usable_size_r>
 80056e8:	4284      	cmp	r4, r0
 80056ea:	4606      	mov	r6, r0
 80056ec:	d802      	bhi.n	80056f4 <_realloc_r+0x34>
 80056ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80056f2:	d8f4      	bhi.n	80056de <_realloc_r+0x1e>
 80056f4:	4621      	mov	r1, r4
 80056f6:	4638      	mov	r0, r7
 80056f8:	f7ff f960 	bl	80049bc <_malloc_r>
 80056fc:	4680      	mov	r8, r0
 80056fe:	b908      	cbnz	r0, 8005704 <_realloc_r+0x44>
 8005700:	4645      	mov	r5, r8
 8005702:	e7ec      	b.n	80056de <_realloc_r+0x1e>
 8005704:	42b4      	cmp	r4, r6
 8005706:	4622      	mov	r2, r4
 8005708:	4629      	mov	r1, r5
 800570a:	bf28      	it	cs
 800570c:	4632      	movcs	r2, r6
 800570e:	f7ff ff85 	bl	800561c <memcpy>
 8005712:	4629      	mov	r1, r5
 8005714:	4638      	mov	r0, r7
 8005716:	f7ff f8df 	bl	80048d8 <_free_r>
 800571a:	e7f1      	b.n	8005700 <_realloc_r+0x40>

0800571c <__ascii_wctomb>:
 800571c:	4603      	mov	r3, r0
 800571e:	4608      	mov	r0, r1
 8005720:	b141      	cbz	r1, 8005734 <__ascii_wctomb+0x18>
 8005722:	2aff      	cmp	r2, #255	@ 0xff
 8005724:	d904      	bls.n	8005730 <__ascii_wctomb+0x14>
 8005726:	228a      	movs	r2, #138	@ 0x8a
 8005728:	f04f 30ff 	mov.w	r0, #4294967295
 800572c:	601a      	str	r2, [r3, #0]
 800572e:	4770      	bx	lr
 8005730:	2001      	movs	r0, #1
 8005732:	700a      	strb	r2, [r1, #0]
 8005734:	4770      	bx	lr
	...

08005738 <fiprintf>:
 8005738:	b40e      	push	{r1, r2, r3}
 800573a:	b503      	push	{r0, r1, lr}
 800573c:	4601      	mov	r1, r0
 800573e:	ab03      	add	r3, sp, #12
 8005740:	4805      	ldr	r0, [pc, #20]	@ (8005758 <fiprintf+0x20>)
 8005742:	f853 2b04 	ldr.w	r2, [r3], #4
 8005746:	6800      	ldr	r0, [r0, #0]
 8005748:	9301      	str	r3, [sp, #4]
 800574a:	f000 f83d 	bl	80057c8 <_vfiprintf_r>
 800574e:	b002      	add	sp, #8
 8005750:	f85d eb04 	ldr.w	lr, [sp], #4
 8005754:	b003      	add	sp, #12
 8005756:	4770      	bx	lr
 8005758:	20000018 	.word	0x20000018

0800575c <abort>:
 800575c:	2006      	movs	r0, #6
 800575e:	b508      	push	{r3, lr}
 8005760:	f000 fa06 	bl	8005b70 <raise>
 8005764:	2001      	movs	r0, #1
 8005766:	f7fb feae 	bl	80014c6 <_exit>

0800576a <_malloc_usable_size_r>:
 800576a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800576e:	1f18      	subs	r0, r3, #4
 8005770:	2b00      	cmp	r3, #0
 8005772:	bfbc      	itt	lt
 8005774:	580b      	ldrlt	r3, [r1, r0]
 8005776:	18c0      	addlt	r0, r0, r3
 8005778:	4770      	bx	lr

0800577a <__sfputc_r>:
 800577a:	6893      	ldr	r3, [r2, #8]
 800577c:	b410      	push	{r4}
 800577e:	3b01      	subs	r3, #1
 8005780:	2b00      	cmp	r3, #0
 8005782:	6093      	str	r3, [r2, #8]
 8005784:	da07      	bge.n	8005796 <__sfputc_r+0x1c>
 8005786:	6994      	ldr	r4, [r2, #24]
 8005788:	42a3      	cmp	r3, r4
 800578a:	db01      	blt.n	8005790 <__sfputc_r+0x16>
 800578c:	290a      	cmp	r1, #10
 800578e:	d102      	bne.n	8005796 <__sfputc_r+0x1c>
 8005790:	bc10      	pop	{r4}
 8005792:	f000 b931 	b.w	80059f8 <__swbuf_r>
 8005796:	6813      	ldr	r3, [r2, #0]
 8005798:	1c58      	adds	r0, r3, #1
 800579a:	6010      	str	r0, [r2, #0]
 800579c:	7019      	strb	r1, [r3, #0]
 800579e:	4608      	mov	r0, r1
 80057a0:	bc10      	pop	{r4}
 80057a2:	4770      	bx	lr

080057a4 <__sfputs_r>:
 80057a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057a6:	4606      	mov	r6, r0
 80057a8:	460f      	mov	r7, r1
 80057aa:	4614      	mov	r4, r2
 80057ac:	18d5      	adds	r5, r2, r3
 80057ae:	42ac      	cmp	r4, r5
 80057b0:	d101      	bne.n	80057b6 <__sfputs_r+0x12>
 80057b2:	2000      	movs	r0, #0
 80057b4:	e007      	b.n	80057c6 <__sfputs_r+0x22>
 80057b6:	463a      	mov	r2, r7
 80057b8:	4630      	mov	r0, r6
 80057ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057be:	f7ff ffdc 	bl	800577a <__sfputc_r>
 80057c2:	1c43      	adds	r3, r0, #1
 80057c4:	d1f3      	bne.n	80057ae <__sfputs_r+0xa>
 80057c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080057c8 <_vfiprintf_r>:
 80057c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057cc:	460d      	mov	r5, r1
 80057ce:	4614      	mov	r4, r2
 80057d0:	4698      	mov	r8, r3
 80057d2:	4606      	mov	r6, r0
 80057d4:	b09d      	sub	sp, #116	@ 0x74
 80057d6:	b118      	cbz	r0, 80057e0 <_vfiprintf_r+0x18>
 80057d8:	6a03      	ldr	r3, [r0, #32]
 80057da:	b90b      	cbnz	r3, 80057e0 <_vfiprintf_r+0x18>
 80057dc:	f7fe f8e0 	bl	80039a0 <__sinit>
 80057e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80057e2:	07d9      	lsls	r1, r3, #31
 80057e4:	d405      	bmi.n	80057f2 <_vfiprintf_r+0x2a>
 80057e6:	89ab      	ldrh	r3, [r5, #12]
 80057e8:	059a      	lsls	r2, r3, #22
 80057ea:	d402      	bmi.n	80057f2 <_vfiprintf_r+0x2a>
 80057ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80057ee:	f7fe fa04 	bl	8003bfa <__retarget_lock_acquire_recursive>
 80057f2:	89ab      	ldrh	r3, [r5, #12]
 80057f4:	071b      	lsls	r3, r3, #28
 80057f6:	d501      	bpl.n	80057fc <_vfiprintf_r+0x34>
 80057f8:	692b      	ldr	r3, [r5, #16]
 80057fa:	b99b      	cbnz	r3, 8005824 <_vfiprintf_r+0x5c>
 80057fc:	4629      	mov	r1, r5
 80057fe:	4630      	mov	r0, r6
 8005800:	f000 f938 	bl	8005a74 <__swsetup_r>
 8005804:	b170      	cbz	r0, 8005824 <_vfiprintf_r+0x5c>
 8005806:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005808:	07dc      	lsls	r4, r3, #31
 800580a:	d504      	bpl.n	8005816 <_vfiprintf_r+0x4e>
 800580c:	f04f 30ff 	mov.w	r0, #4294967295
 8005810:	b01d      	add	sp, #116	@ 0x74
 8005812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005816:	89ab      	ldrh	r3, [r5, #12]
 8005818:	0598      	lsls	r0, r3, #22
 800581a:	d4f7      	bmi.n	800580c <_vfiprintf_r+0x44>
 800581c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800581e:	f7fe f9ed 	bl	8003bfc <__retarget_lock_release_recursive>
 8005822:	e7f3      	b.n	800580c <_vfiprintf_r+0x44>
 8005824:	2300      	movs	r3, #0
 8005826:	9309      	str	r3, [sp, #36]	@ 0x24
 8005828:	2320      	movs	r3, #32
 800582a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800582e:	2330      	movs	r3, #48	@ 0x30
 8005830:	f04f 0901 	mov.w	r9, #1
 8005834:	f8cd 800c 	str.w	r8, [sp, #12]
 8005838:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80059e4 <_vfiprintf_r+0x21c>
 800583c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005840:	4623      	mov	r3, r4
 8005842:	469a      	mov	sl, r3
 8005844:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005848:	b10a      	cbz	r2, 800584e <_vfiprintf_r+0x86>
 800584a:	2a25      	cmp	r2, #37	@ 0x25
 800584c:	d1f9      	bne.n	8005842 <_vfiprintf_r+0x7a>
 800584e:	ebba 0b04 	subs.w	fp, sl, r4
 8005852:	d00b      	beq.n	800586c <_vfiprintf_r+0xa4>
 8005854:	465b      	mov	r3, fp
 8005856:	4622      	mov	r2, r4
 8005858:	4629      	mov	r1, r5
 800585a:	4630      	mov	r0, r6
 800585c:	f7ff ffa2 	bl	80057a4 <__sfputs_r>
 8005860:	3001      	adds	r0, #1
 8005862:	f000 80a7 	beq.w	80059b4 <_vfiprintf_r+0x1ec>
 8005866:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005868:	445a      	add	r2, fp
 800586a:	9209      	str	r2, [sp, #36]	@ 0x24
 800586c:	f89a 3000 	ldrb.w	r3, [sl]
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 809f 	beq.w	80059b4 <_vfiprintf_r+0x1ec>
 8005876:	2300      	movs	r3, #0
 8005878:	f04f 32ff 	mov.w	r2, #4294967295
 800587c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005880:	f10a 0a01 	add.w	sl, sl, #1
 8005884:	9304      	str	r3, [sp, #16]
 8005886:	9307      	str	r3, [sp, #28]
 8005888:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800588c:	931a      	str	r3, [sp, #104]	@ 0x68
 800588e:	4654      	mov	r4, sl
 8005890:	2205      	movs	r2, #5
 8005892:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005896:	4853      	ldr	r0, [pc, #332]	@ (80059e4 <_vfiprintf_r+0x21c>)
 8005898:	f7fe f9b1 	bl	8003bfe <memchr>
 800589c:	9a04      	ldr	r2, [sp, #16]
 800589e:	b9d8      	cbnz	r0, 80058d8 <_vfiprintf_r+0x110>
 80058a0:	06d1      	lsls	r1, r2, #27
 80058a2:	bf44      	itt	mi
 80058a4:	2320      	movmi	r3, #32
 80058a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80058aa:	0713      	lsls	r3, r2, #28
 80058ac:	bf44      	itt	mi
 80058ae:	232b      	movmi	r3, #43	@ 0x2b
 80058b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80058b4:	f89a 3000 	ldrb.w	r3, [sl]
 80058b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80058ba:	d015      	beq.n	80058e8 <_vfiprintf_r+0x120>
 80058bc:	4654      	mov	r4, sl
 80058be:	2000      	movs	r0, #0
 80058c0:	f04f 0c0a 	mov.w	ip, #10
 80058c4:	9a07      	ldr	r2, [sp, #28]
 80058c6:	4621      	mov	r1, r4
 80058c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058cc:	3b30      	subs	r3, #48	@ 0x30
 80058ce:	2b09      	cmp	r3, #9
 80058d0:	d94b      	bls.n	800596a <_vfiprintf_r+0x1a2>
 80058d2:	b1b0      	cbz	r0, 8005902 <_vfiprintf_r+0x13a>
 80058d4:	9207      	str	r2, [sp, #28]
 80058d6:	e014      	b.n	8005902 <_vfiprintf_r+0x13a>
 80058d8:	eba0 0308 	sub.w	r3, r0, r8
 80058dc:	fa09 f303 	lsl.w	r3, r9, r3
 80058e0:	4313      	orrs	r3, r2
 80058e2:	46a2      	mov	sl, r4
 80058e4:	9304      	str	r3, [sp, #16]
 80058e6:	e7d2      	b.n	800588e <_vfiprintf_r+0xc6>
 80058e8:	9b03      	ldr	r3, [sp, #12]
 80058ea:	1d19      	adds	r1, r3, #4
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	9103      	str	r1, [sp, #12]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	bfbb      	ittet	lt
 80058f4:	425b      	neglt	r3, r3
 80058f6:	f042 0202 	orrlt.w	r2, r2, #2
 80058fa:	9307      	strge	r3, [sp, #28]
 80058fc:	9307      	strlt	r3, [sp, #28]
 80058fe:	bfb8      	it	lt
 8005900:	9204      	strlt	r2, [sp, #16]
 8005902:	7823      	ldrb	r3, [r4, #0]
 8005904:	2b2e      	cmp	r3, #46	@ 0x2e
 8005906:	d10a      	bne.n	800591e <_vfiprintf_r+0x156>
 8005908:	7863      	ldrb	r3, [r4, #1]
 800590a:	2b2a      	cmp	r3, #42	@ 0x2a
 800590c:	d132      	bne.n	8005974 <_vfiprintf_r+0x1ac>
 800590e:	9b03      	ldr	r3, [sp, #12]
 8005910:	3402      	adds	r4, #2
 8005912:	1d1a      	adds	r2, r3, #4
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	9203      	str	r2, [sp, #12]
 8005918:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800591c:	9305      	str	r3, [sp, #20]
 800591e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80059e8 <_vfiprintf_r+0x220>
 8005922:	2203      	movs	r2, #3
 8005924:	4650      	mov	r0, sl
 8005926:	7821      	ldrb	r1, [r4, #0]
 8005928:	f7fe f969 	bl	8003bfe <memchr>
 800592c:	b138      	cbz	r0, 800593e <_vfiprintf_r+0x176>
 800592e:	2240      	movs	r2, #64	@ 0x40
 8005930:	9b04      	ldr	r3, [sp, #16]
 8005932:	eba0 000a 	sub.w	r0, r0, sl
 8005936:	4082      	lsls	r2, r0
 8005938:	4313      	orrs	r3, r2
 800593a:	3401      	adds	r4, #1
 800593c:	9304      	str	r3, [sp, #16]
 800593e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005942:	2206      	movs	r2, #6
 8005944:	4829      	ldr	r0, [pc, #164]	@ (80059ec <_vfiprintf_r+0x224>)
 8005946:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800594a:	f7fe f958 	bl	8003bfe <memchr>
 800594e:	2800      	cmp	r0, #0
 8005950:	d03f      	beq.n	80059d2 <_vfiprintf_r+0x20a>
 8005952:	4b27      	ldr	r3, [pc, #156]	@ (80059f0 <_vfiprintf_r+0x228>)
 8005954:	bb1b      	cbnz	r3, 800599e <_vfiprintf_r+0x1d6>
 8005956:	9b03      	ldr	r3, [sp, #12]
 8005958:	3307      	adds	r3, #7
 800595a:	f023 0307 	bic.w	r3, r3, #7
 800595e:	3308      	adds	r3, #8
 8005960:	9303      	str	r3, [sp, #12]
 8005962:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005964:	443b      	add	r3, r7
 8005966:	9309      	str	r3, [sp, #36]	@ 0x24
 8005968:	e76a      	b.n	8005840 <_vfiprintf_r+0x78>
 800596a:	460c      	mov	r4, r1
 800596c:	2001      	movs	r0, #1
 800596e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005972:	e7a8      	b.n	80058c6 <_vfiprintf_r+0xfe>
 8005974:	2300      	movs	r3, #0
 8005976:	f04f 0c0a 	mov.w	ip, #10
 800597a:	4619      	mov	r1, r3
 800597c:	3401      	adds	r4, #1
 800597e:	9305      	str	r3, [sp, #20]
 8005980:	4620      	mov	r0, r4
 8005982:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005986:	3a30      	subs	r2, #48	@ 0x30
 8005988:	2a09      	cmp	r2, #9
 800598a:	d903      	bls.n	8005994 <_vfiprintf_r+0x1cc>
 800598c:	2b00      	cmp	r3, #0
 800598e:	d0c6      	beq.n	800591e <_vfiprintf_r+0x156>
 8005990:	9105      	str	r1, [sp, #20]
 8005992:	e7c4      	b.n	800591e <_vfiprintf_r+0x156>
 8005994:	4604      	mov	r4, r0
 8005996:	2301      	movs	r3, #1
 8005998:	fb0c 2101 	mla	r1, ip, r1, r2
 800599c:	e7f0      	b.n	8005980 <_vfiprintf_r+0x1b8>
 800599e:	ab03      	add	r3, sp, #12
 80059a0:	9300      	str	r3, [sp, #0]
 80059a2:	462a      	mov	r2, r5
 80059a4:	4630      	mov	r0, r6
 80059a6:	4b13      	ldr	r3, [pc, #76]	@ (80059f4 <_vfiprintf_r+0x22c>)
 80059a8:	a904      	add	r1, sp, #16
 80059aa:	f7fd fbb1 	bl	8003110 <_printf_float>
 80059ae:	4607      	mov	r7, r0
 80059b0:	1c78      	adds	r0, r7, #1
 80059b2:	d1d6      	bne.n	8005962 <_vfiprintf_r+0x19a>
 80059b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80059b6:	07d9      	lsls	r1, r3, #31
 80059b8:	d405      	bmi.n	80059c6 <_vfiprintf_r+0x1fe>
 80059ba:	89ab      	ldrh	r3, [r5, #12]
 80059bc:	059a      	lsls	r2, r3, #22
 80059be:	d402      	bmi.n	80059c6 <_vfiprintf_r+0x1fe>
 80059c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80059c2:	f7fe f91b 	bl	8003bfc <__retarget_lock_release_recursive>
 80059c6:	89ab      	ldrh	r3, [r5, #12]
 80059c8:	065b      	lsls	r3, r3, #25
 80059ca:	f53f af1f 	bmi.w	800580c <_vfiprintf_r+0x44>
 80059ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80059d0:	e71e      	b.n	8005810 <_vfiprintf_r+0x48>
 80059d2:	ab03      	add	r3, sp, #12
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	462a      	mov	r2, r5
 80059d8:	4630      	mov	r0, r6
 80059da:	4b06      	ldr	r3, [pc, #24]	@ (80059f4 <_vfiprintf_r+0x22c>)
 80059dc:	a904      	add	r1, sp, #16
 80059de:	f7fd fe35 	bl	800364c <_printf_i>
 80059e2:	e7e4      	b.n	80059ae <_vfiprintf_r+0x1e6>
 80059e4:	08005f50 	.word	0x08005f50
 80059e8:	08005f56 	.word	0x08005f56
 80059ec:	08005f5a 	.word	0x08005f5a
 80059f0:	08003111 	.word	0x08003111
 80059f4:	080057a5 	.word	0x080057a5

080059f8 <__swbuf_r>:
 80059f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059fa:	460e      	mov	r6, r1
 80059fc:	4614      	mov	r4, r2
 80059fe:	4605      	mov	r5, r0
 8005a00:	b118      	cbz	r0, 8005a0a <__swbuf_r+0x12>
 8005a02:	6a03      	ldr	r3, [r0, #32]
 8005a04:	b90b      	cbnz	r3, 8005a0a <__swbuf_r+0x12>
 8005a06:	f7fd ffcb 	bl	80039a0 <__sinit>
 8005a0a:	69a3      	ldr	r3, [r4, #24]
 8005a0c:	60a3      	str	r3, [r4, #8]
 8005a0e:	89a3      	ldrh	r3, [r4, #12]
 8005a10:	071a      	lsls	r2, r3, #28
 8005a12:	d501      	bpl.n	8005a18 <__swbuf_r+0x20>
 8005a14:	6923      	ldr	r3, [r4, #16]
 8005a16:	b943      	cbnz	r3, 8005a2a <__swbuf_r+0x32>
 8005a18:	4621      	mov	r1, r4
 8005a1a:	4628      	mov	r0, r5
 8005a1c:	f000 f82a 	bl	8005a74 <__swsetup_r>
 8005a20:	b118      	cbz	r0, 8005a2a <__swbuf_r+0x32>
 8005a22:	f04f 37ff 	mov.w	r7, #4294967295
 8005a26:	4638      	mov	r0, r7
 8005a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a2a:	6823      	ldr	r3, [r4, #0]
 8005a2c:	6922      	ldr	r2, [r4, #16]
 8005a2e:	b2f6      	uxtb	r6, r6
 8005a30:	1a98      	subs	r0, r3, r2
 8005a32:	6963      	ldr	r3, [r4, #20]
 8005a34:	4637      	mov	r7, r6
 8005a36:	4283      	cmp	r3, r0
 8005a38:	dc05      	bgt.n	8005a46 <__swbuf_r+0x4e>
 8005a3a:	4621      	mov	r1, r4
 8005a3c:	4628      	mov	r0, r5
 8005a3e:	f7ff fd9b 	bl	8005578 <_fflush_r>
 8005a42:	2800      	cmp	r0, #0
 8005a44:	d1ed      	bne.n	8005a22 <__swbuf_r+0x2a>
 8005a46:	68a3      	ldr	r3, [r4, #8]
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	60a3      	str	r3, [r4, #8]
 8005a4c:	6823      	ldr	r3, [r4, #0]
 8005a4e:	1c5a      	adds	r2, r3, #1
 8005a50:	6022      	str	r2, [r4, #0]
 8005a52:	701e      	strb	r6, [r3, #0]
 8005a54:	6962      	ldr	r2, [r4, #20]
 8005a56:	1c43      	adds	r3, r0, #1
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d004      	beq.n	8005a66 <__swbuf_r+0x6e>
 8005a5c:	89a3      	ldrh	r3, [r4, #12]
 8005a5e:	07db      	lsls	r3, r3, #31
 8005a60:	d5e1      	bpl.n	8005a26 <__swbuf_r+0x2e>
 8005a62:	2e0a      	cmp	r6, #10
 8005a64:	d1df      	bne.n	8005a26 <__swbuf_r+0x2e>
 8005a66:	4621      	mov	r1, r4
 8005a68:	4628      	mov	r0, r5
 8005a6a:	f7ff fd85 	bl	8005578 <_fflush_r>
 8005a6e:	2800      	cmp	r0, #0
 8005a70:	d0d9      	beq.n	8005a26 <__swbuf_r+0x2e>
 8005a72:	e7d6      	b.n	8005a22 <__swbuf_r+0x2a>

08005a74 <__swsetup_r>:
 8005a74:	b538      	push	{r3, r4, r5, lr}
 8005a76:	4b29      	ldr	r3, [pc, #164]	@ (8005b1c <__swsetup_r+0xa8>)
 8005a78:	4605      	mov	r5, r0
 8005a7a:	6818      	ldr	r0, [r3, #0]
 8005a7c:	460c      	mov	r4, r1
 8005a7e:	b118      	cbz	r0, 8005a88 <__swsetup_r+0x14>
 8005a80:	6a03      	ldr	r3, [r0, #32]
 8005a82:	b90b      	cbnz	r3, 8005a88 <__swsetup_r+0x14>
 8005a84:	f7fd ff8c 	bl	80039a0 <__sinit>
 8005a88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a8c:	0719      	lsls	r1, r3, #28
 8005a8e:	d422      	bmi.n	8005ad6 <__swsetup_r+0x62>
 8005a90:	06da      	lsls	r2, r3, #27
 8005a92:	d407      	bmi.n	8005aa4 <__swsetup_r+0x30>
 8005a94:	2209      	movs	r2, #9
 8005a96:	602a      	str	r2, [r5, #0]
 8005a98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa0:	81a3      	strh	r3, [r4, #12]
 8005aa2:	e033      	b.n	8005b0c <__swsetup_r+0x98>
 8005aa4:	0758      	lsls	r0, r3, #29
 8005aa6:	d512      	bpl.n	8005ace <__swsetup_r+0x5a>
 8005aa8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005aaa:	b141      	cbz	r1, 8005abe <__swsetup_r+0x4a>
 8005aac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005ab0:	4299      	cmp	r1, r3
 8005ab2:	d002      	beq.n	8005aba <__swsetup_r+0x46>
 8005ab4:	4628      	mov	r0, r5
 8005ab6:	f7fe ff0f 	bl	80048d8 <_free_r>
 8005aba:	2300      	movs	r3, #0
 8005abc:	6363      	str	r3, [r4, #52]	@ 0x34
 8005abe:	89a3      	ldrh	r3, [r4, #12]
 8005ac0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005ac4:	81a3      	strh	r3, [r4, #12]
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	6063      	str	r3, [r4, #4]
 8005aca:	6923      	ldr	r3, [r4, #16]
 8005acc:	6023      	str	r3, [r4, #0]
 8005ace:	89a3      	ldrh	r3, [r4, #12]
 8005ad0:	f043 0308 	orr.w	r3, r3, #8
 8005ad4:	81a3      	strh	r3, [r4, #12]
 8005ad6:	6923      	ldr	r3, [r4, #16]
 8005ad8:	b94b      	cbnz	r3, 8005aee <__swsetup_r+0x7a>
 8005ada:	89a3      	ldrh	r3, [r4, #12]
 8005adc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005ae0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ae4:	d003      	beq.n	8005aee <__swsetup_r+0x7a>
 8005ae6:	4621      	mov	r1, r4
 8005ae8:	4628      	mov	r0, r5
 8005aea:	f000 f882 	bl	8005bf2 <__smakebuf_r>
 8005aee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005af2:	f013 0201 	ands.w	r2, r3, #1
 8005af6:	d00a      	beq.n	8005b0e <__swsetup_r+0x9a>
 8005af8:	2200      	movs	r2, #0
 8005afa:	60a2      	str	r2, [r4, #8]
 8005afc:	6962      	ldr	r2, [r4, #20]
 8005afe:	4252      	negs	r2, r2
 8005b00:	61a2      	str	r2, [r4, #24]
 8005b02:	6922      	ldr	r2, [r4, #16]
 8005b04:	b942      	cbnz	r2, 8005b18 <__swsetup_r+0xa4>
 8005b06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005b0a:	d1c5      	bne.n	8005a98 <__swsetup_r+0x24>
 8005b0c:	bd38      	pop	{r3, r4, r5, pc}
 8005b0e:	0799      	lsls	r1, r3, #30
 8005b10:	bf58      	it	pl
 8005b12:	6962      	ldrpl	r2, [r4, #20]
 8005b14:	60a2      	str	r2, [r4, #8]
 8005b16:	e7f4      	b.n	8005b02 <__swsetup_r+0x8e>
 8005b18:	2000      	movs	r0, #0
 8005b1a:	e7f7      	b.n	8005b0c <__swsetup_r+0x98>
 8005b1c:	20000018 	.word	0x20000018

08005b20 <_raise_r>:
 8005b20:	291f      	cmp	r1, #31
 8005b22:	b538      	push	{r3, r4, r5, lr}
 8005b24:	4605      	mov	r5, r0
 8005b26:	460c      	mov	r4, r1
 8005b28:	d904      	bls.n	8005b34 <_raise_r+0x14>
 8005b2a:	2316      	movs	r3, #22
 8005b2c:	6003      	str	r3, [r0, #0]
 8005b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b32:	bd38      	pop	{r3, r4, r5, pc}
 8005b34:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005b36:	b112      	cbz	r2, 8005b3e <_raise_r+0x1e>
 8005b38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005b3c:	b94b      	cbnz	r3, 8005b52 <_raise_r+0x32>
 8005b3e:	4628      	mov	r0, r5
 8005b40:	f000 f830 	bl	8005ba4 <_getpid_r>
 8005b44:	4622      	mov	r2, r4
 8005b46:	4601      	mov	r1, r0
 8005b48:	4628      	mov	r0, r5
 8005b4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b4e:	f000 b817 	b.w	8005b80 <_kill_r>
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d00a      	beq.n	8005b6c <_raise_r+0x4c>
 8005b56:	1c59      	adds	r1, r3, #1
 8005b58:	d103      	bne.n	8005b62 <_raise_r+0x42>
 8005b5a:	2316      	movs	r3, #22
 8005b5c:	6003      	str	r3, [r0, #0]
 8005b5e:	2001      	movs	r0, #1
 8005b60:	e7e7      	b.n	8005b32 <_raise_r+0x12>
 8005b62:	2100      	movs	r1, #0
 8005b64:	4620      	mov	r0, r4
 8005b66:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005b6a:	4798      	blx	r3
 8005b6c:	2000      	movs	r0, #0
 8005b6e:	e7e0      	b.n	8005b32 <_raise_r+0x12>

08005b70 <raise>:
 8005b70:	4b02      	ldr	r3, [pc, #8]	@ (8005b7c <raise+0xc>)
 8005b72:	4601      	mov	r1, r0
 8005b74:	6818      	ldr	r0, [r3, #0]
 8005b76:	f7ff bfd3 	b.w	8005b20 <_raise_r>
 8005b7a:	bf00      	nop
 8005b7c:	20000018 	.word	0x20000018

08005b80 <_kill_r>:
 8005b80:	b538      	push	{r3, r4, r5, lr}
 8005b82:	2300      	movs	r3, #0
 8005b84:	4d06      	ldr	r5, [pc, #24]	@ (8005ba0 <_kill_r+0x20>)
 8005b86:	4604      	mov	r4, r0
 8005b88:	4608      	mov	r0, r1
 8005b8a:	4611      	mov	r1, r2
 8005b8c:	602b      	str	r3, [r5, #0]
 8005b8e:	f7fb fc8a 	bl	80014a6 <_kill>
 8005b92:	1c43      	adds	r3, r0, #1
 8005b94:	d102      	bne.n	8005b9c <_kill_r+0x1c>
 8005b96:	682b      	ldr	r3, [r5, #0]
 8005b98:	b103      	cbz	r3, 8005b9c <_kill_r+0x1c>
 8005b9a:	6023      	str	r3, [r4, #0]
 8005b9c:	bd38      	pop	{r3, r4, r5, pc}
 8005b9e:	bf00      	nop
 8005ba0:	20000534 	.word	0x20000534

08005ba4 <_getpid_r>:
 8005ba4:	f7fb bc78 	b.w	8001498 <_getpid>

08005ba8 <__swhatbuf_r>:
 8005ba8:	b570      	push	{r4, r5, r6, lr}
 8005baa:	460c      	mov	r4, r1
 8005bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bb0:	4615      	mov	r5, r2
 8005bb2:	2900      	cmp	r1, #0
 8005bb4:	461e      	mov	r6, r3
 8005bb6:	b096      	sub	sp, #88	@ 0x58
 8005bb8:	da0c      	bge.n	8005bd4 <__swhatbuf_r+0x2c>
 8005bba:	89a3      	ldrh	r3, [r4, #12]
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005bc2:	bf14      	ite	ne
 8005bc4:	2340      	movne	r3, #64	@ 0x40
 8005bc6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005bca:	2000      	movs	r0, #0
 8005bcc:	6031      	str	r1, [r6, #0]
 8005bce:	602b      	str	r3, [r5, #0]
 8005bd0:	b016      	add	sp, #88	@ 0x58
 8005bd2:	bd70      	pop	{r4, r5, r6, pc}
 8005bd4:	466a      	mov	r2, sp
 8005bd6:	f000 f849 	bl	8005c6c <_fstat_r>
 8005bda:	2800      	cmp	r0, #0
 8005bdc:	dbed      	blt.n	8005bba <__swhatbuf_r+0x12>
 8005bde:	9901      	ldr	r1, [sp, #4]
 8005be0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005be4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005be8:	4259      	negs	r1, r3
 8005bea:	4159      	adcs	r1, r3
 8005bec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005bf0:	e7eb      	b.n	8005bca <__swhatbuf_r+0x22>

08005bf2 <__smakebuf_r>:
 8005bf2:	898b      	ldrh	r3, [r1, #12]
 8005bf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bf6:	079d      	lsls	r5, r3, #30
 8005bf8:	4606      	mov	r6, r0
 8005bfa:	460c      	mov	r4, r1
 8005bfc:	d507      	bpl.n	8005c0e <__smakebuf_r+0x1c>
 8005bfe:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005c02:	6023      	str	r3, [r4, #0]
 8005c04:	6123      	str	r3, [r4, #16]
 8005c06:	2301      	movs	r3, #1
 8005c08:	6163      	str	r3, [r4, #20]
 8005c0a:	b003      	add	sp, #12
 8005c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c0e:	466a      	mov	r2, sp
 8005c10:	ab01      	add	r3, sp, #4
 8005c12:	f7ff ffc9 	bl	8005ba8 <__swhatbuf_r>
 8005c16:	9f00      	ldr	r7, [sp, #0]
 8005c18:	4605      	mov	r5, r0
 8005c1a:	4639      	mov	r1, r7
 8005c1c:	4630      	mov	r0, r6
 8005c1e:	f7fe fecd 	bl	80049bc <_malloc_r>
 8005c22:	b948      	cbnz	r0, 8005c38 <__smakebuf_r+0x46>
 8005c24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c28:	059a      	lsls	r2, r3, #22
 8005c2a:	d4ee      	bmi.n	8005c0a <__smakebuf_r+0x18>
 8005c2c:	f023 0303 	bic.w	r3, r3, #3
 8005c30:	f043 0302 	orr.w	r3, r3, #2
 8005c34:	81a3      	strh	r3, [r4, #12]
 8005c36:	e7e2      	b.n	8005bfe <__smakebuf_r+0xc>
 8005c38:	89a3      	ldrh	r3, [r4, #12]
 8005c3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005c3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c42:	81a3      	strh	r3, [r4, #12]
 8005c44:	9b01      	ldr	r3, [sp, #4]
 8005c46:	6020      	str	r0, [r4, #0]
 8005c48:	b15b      	cbz	r3, 8005c62 <__smakebuf_r+0x70>
 8005c4a:	4630      	mov	r0, r6
 8005c4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c50:	f000 f81e 	bl	8005c90 <_isatty_r>
 8005c54:	b128      	cbz	r0, 8005c62 <__smakebuf_r+0x70>
 8005c56:	89a3      	ldrh	r3, [r4, #12]
 8005c58:	f023 0303 	bic.w	r3, r3, #3
 8005c5c:	f043 0301 	orr.w	r3, r3, #1
 8005c60:	81a3      	strh	r3, [r4, #12]
 8005c62:	89a3      	ldrh	r3, [r4, #12]
 8005c64:	431d      	orrs	r5, r3
 8005c66:	81a5      	strh	r5, [r4, #12]
 8005c68:	e7cf      	b.n	8005c0a <__smakebuf_r+0x18>
	...

08005c6c <_fstat_r>:
 8005c6c:	b538      	push	{r3, r4, r5, lr}
 8005c6e:	2300      	movs	r3, #0
 8005c70:	4d06      	ldr	r5, [pc, #24]	@ (8005c8c <_fstat_r+0x20>)
 8005c72:	4604      	mov	r4, r0
 8005c74:	4608      	mov	r0, r1
 8005c76:	4611      	mov	r1, r2
 8005c78:	602b      	str	r3, [r5, #0]
 8005c7a:	f7fb fc73 	bl	8001564 <_fstat>
 8005c7e:	1c43      	adds	r3, r0, #1
 8005c80:	d102      	bne.n	8005c88 <_fstat_r+0x1c>
 8005c82:	682b      	ldr	r3, [r5, #0]
 8005c84:	b103      	cbz	r3, 8005c88 <_fstat_r+0x1c>
 8005c86:	6023      	str	r3, [r4, #0]
 8005c88:	bd38      	pop	{r3, r4, r5, pc}
 8005c8a:	bf00      	nop
 8005c8c:	20000534 	.word	0x20000534

08005c90 <_isatty_r>:
 8005c90:	b538      	push	{r3, r4, r5, lr}
 8005c92:	2300      	movs	r3, #0
 8005c94:	4d05      	ldr	r5, [pc, #20]	@ (8005cac <_isatty_r+0x1c>)
 8005c96:	4604      	mov	r4, r0
 8005c98:	4608      	mov	r0, r1
 8005c9a:	602b      	str	r3, [r5, #0]
 8005c9c:	f7fb fc71 	bl	8001582 <_isatty>
 8005ca0:	1c43      	adds	r3, r0, #1
 8005ca2:	d102      	bne.n	8005caa <_isatty_r+0x1a>
 8005ca4:	682b      	ldr	r3, [r5, #0]
 8005ca6:	b103      	cbz	r3, 8005caa <_isatty_r+0x1a>
 8005ca8:	6023      	str	r3, [r4, #0]
 8005caa:	bd38      	pop	{r3, r4, r5, pc}
 8005cac:	20000534 	.word	0x20000534

08005cb0 <round>:
 8005cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cb2:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005cb6:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 8005cba:	2a13      	cmp	r2, #19
 8005cbc:	4604      	mov	r4, r0
 8005cbe:	460d      	mov	r5, r1
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	dc1a      	bgt.n	8005cfa <round+0x4a>
 8005cc4:	2a00      	cmp	r2, #0
 8005cc6:	da0b      	bge.n	8005ce0 <round+0x30>
 8005cc8:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8005ccc:	3201      	adds	r2, #1
 8005cce:	bf04      	itt	eq
 8005cd0:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8005cd4:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8005cd8:	2200      	movs	r2, #0
 8005cda:	461d      	mov	r5, r3
 8005cdc:	4614      	mov	r4, r2
 8005cde:	e016      	b.n	8005d0e <round+0x5e>
 8005ce0:	4815      	ldr	r0, [pc, #84]	@ (8005d38 <round+0x88>)
 8005ce2:	4110      	asrs	r0, r2
 8005ce4:	4001      	ands	r1, r0
 8005ce6:	4321      	orrs	r1, r4
 8005ce8:	d011      	beq.n	8005d0e <round+0x5e>
 8005cea:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8005cee:	fa41 f202 	asr.w	r2, r1, r2
 8005cf2:	4413      	add	r3, r2
 8005cf4:	ea23 0300 	bic.w	r3, r3, r0
 8005cf8:	e7ee      	b.n	8005cd8 <round+0x28>
 8005cfa:	2a33      	cmp	r2, #51	@ 0x33
 8005cfc:	dd0a      	ble.n	8005d14 <round+0x64>
 8005cfe:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8005d02:	d104      	bne.n	8005d0e <round+0x5e>
 8005d04:	4602      	mov	r2, r0
 8005d06:	f7fa fa31 	bl	800016c <__adddf3>
 8005d0a:	4604      	mov	r4, r0
 8005d0c:	460d      	mov	r5, r1
 8005d0e:	4620      	mov	r0, r4
 8005d10:	4629      	mov	r1, r5
 8005d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d14:	f04f 30ff 	mov.w	r0, #4294967295
 8005d18:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8005d1c:	40f8      	lsrs	r0, r7
 8005d1e:	4220      	tst	r0, r4
 8005d20:	d0f5      	beq.n	8005d0e <round+0x5e>
 8005d22:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8005d26:	2201      	movs	r2, #1
 8005d28:	408a      	lsls	r2, r1
 8005d2a:	1912      	adds	r2, r2, r4
 8005d2c:	bf28      	it	cs
 8005d2e:	3301      	addcs	r3, #1
 8005d30:	ea22 0200 	bic.w	r2, r2, r0
 8005d34:	e7d1      	b.n	8005cda <round+0x2a>
 8005d36:	bf00      	nop
 8005d38:	000fffff 	.word	0x000fffff

08005d3c <_init>:
 8005d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d3e:	bf00      	nop
 8005d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d42:	bc08      	pop	{r3}
 8005d44:	469e      	mov	lr, r3
 8005d46:	4770      	bx	lr

08005d48 <_fini>:
 8005d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d4a:	bf00      	nop
 8005d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d4e:	bc08      	pop	{r3}
 8005d50:	469e      	mov	lr, r3
 8005d52:	4770      	bx	lr
