
Master MCU C6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005abc  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08005bd0  08005bd0  00006bd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fdc  08005fdc  000071d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005fdc  08005fdc  00006fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fe4  08005fe4  000071d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fe4  08005fe4  00006fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005fe8  08005fe8  00006fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08005fec  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  200001d4  080061c0  000071d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  080061c0  000074c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000071d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008650  00000000  00000000  000071fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000177f  00000000  00000000  0000f84d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a0  00000000  00000000  00010fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000694  00000000  00000000  00011870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a6f  00000000  00000000  00011f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009fd8  00000000  00000000  00029973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083c52  00000000  00000000  0003394b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b759d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003474  00000000  00000000  000b75e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  000baa54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08005bb4 	.word	0x08005bb4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08005bb4 	.word	0x08005bb4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr
 8000d44:	0000      	movs	r0, r0
	...

08000d48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d4e:	f000 fbcd 	bl	80014ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d52:	f000 f909 	bl	8000f68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d56:	f000 f9a3 	bl	80010a0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d5a:	f000 f941 	bl	8000fe0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000d5e:	f000 f975 	bl	800104c <MX_USART1_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// receiving the input from the virtual terminal
	// #Page: 556 Chapter 38 HAL UART Generic Driver
	HAL_UART_Receive(&huart1, UART_received_data, 1, HAL_MAX_DELAY);
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
 8000d66:	2201      	movs	r2, #1
 8000d68:	496f      	ldr	r1, [pc, #444]	@ (8000f28 <main+0x1e0>)
 8000d6a:	4870      	ldr	r0, [pc, #448]	@ (8000f2c <main+0x1e4>)
 8000d6c:	f001 fe8e 	bl	8002a8c <HAL_UART_Receive>
	// Input Validation
	if(UART_received_data[0] < '1' || UART_received_data[0] > '5') {
 8000d70:	4b6d      	ldr	r3, [pc, #436]	@ (8000f28 <main+0x1e0>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b30      	cmp	r3, #48	@ 0x30
 8000d76:	d903      	bls.n	8000d80 <main+0x38>
 8000d78:	4b6b      	ldr	r3, [pc, #428]	@ (8000f28 <main+0x1e0>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b35      	cmp	r3, #53	@ 0x35
 8000d7e:	d90f      	bls.n	8000da0 <main+0x58>
		snprintf(UART_message, sizeof(UART_message), "Please enter a valid input for the ID between 1-5 \r\n");
 8000d80:	4a6b      	ldr	r2, [pc, #428]	@ (8000f30 <main+0x1e8>)
 8000d82:	2164      	movs	r1, #100	@ 0x64
 8000d84:	486b      	ldr	r0, [pc, #428]	@ (8000f34 <main+0x1ec>)
 8000d86:	f002 fd7d 	bl	8003884 <sniprintf>
		// #Page: 556 Chapter 38 HAL UART Generic Driver
		HAL_UART_Transmit(&huart1, (uint8_t*) UART_message, strlen(UART_message), 100);
 8000d8a:	486a      	ldr	r0, [pc, #424]	@ (8000f34 <main+0x1ec>)
 8000d8c:	f7ff f9e0 	bl	8000150 <strlen>
 8000d90:	4603      	mov	r3, r0
 8000d92:	b29a      	uxth	r2, r3
 8000d94:	2364      	movs	r3, #100	@ 0x64
 8000d96:	4967      	ldr	r1, [pc, #412]	@ (8000f34 <main+0x1ec>)
 8000d98:	4864      	ldr	r0, [pc, #400]	@ (8000f2c <main+0x1e4>)
 8000d9a:	f001 fdec 	bl	8002976 <HAL_UART_Transmit>
		continue;
 8000d9e:	e0b9      	b.n	8000f14 <main+0x1cc>
		}
	else
		{
		// encoding the input
		int value = UART_received_data[0] - '0';
 8000da0:	4b61      	ldr	r3, [pc, #388]	@ (8000f28 <main+0x1e0>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	3b30      	subs	r3, #48	@ 0x30
 8000da6:	607b      	str	r3, [r7, #4]
		SPI_Sent_data[0] = 0x10;
 8000da8:	4b63      	ldr	r3, [pc, #396]	@ (8000f38 <main+0x1f0>)
 8000daa:	2210      	movs	r2, #16
 8000dac:	701a      	strb	r2, [r3, #0]
		SPI_Sent_data[1] = value;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	4b61      	ldr	r3, [pc, #388]	@ (8000f38 <main+0x1f0>)
 8000db4:	705a      	strb	r2, [r3, #1]
		SPI_Sent_data[2] = 0;
 8000db6:	4b60      	ldr	r3, [pc, #384]	@ (8000f38 <main+0x1f0>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	709a      	strb	r2, [r3, #2]
		// First SPI to send the input
		// #Page: 50 Chapter 6 HAL System Driver
		HAL_Delay(1);
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	f000 fbf7 	bl	80015b0 <HAL_Delay>
		// #Page: 227 Chapter 20 HAL GPIO Generic Driver
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	485d      	ldr	r0, [pc, #372]	@ (8000f3c <main+0x1f4>)
 8000dc8:	f000 fe76 	bl	8001ab8 <HAL_GPIO_WritePin>
		// #Page: 452 Chapter 35 HAL SPI Generic Driver
		HAL_SPI_TransmitReceive(&hspi1, SPI_Sent_data, SPI_Junk, 3, 100);
 8000dcc:	2364      	movs	r3, #100	@ 0x64
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	4a5b      	ldr	r2, [pc, #364]	@ (8000f40 <main+0x1f8>)
 8000dd4:	4958      	ldr	r1, [pc, #352]	@ (8000f38 <main+0x1f0>)
 8000dd6:	485b      	ldr	r0, [pc, #364]	@ (8000f44 <main+0x1fc>)
 8000dd8:	f001 fb1a 	bl	8002410 <HAL_SPI_TransmitReceive>
		// #Page: 227 Chapter 20 HAL GPIO Generic Driver
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000ddc:	2201      	movs	r2, #1
 8000dde:	2101      	movs	r1, #1
 8000de0:	4856      	ldr	r0, [pc, #344]	@ (8000f3c <main+0x1f4>)
 8000de2:	f000 fe69 	bl	8001ab8 <HAL_GPIO_WritePin>
		// second SPI to receive the data
		// #Page: 50 Chapter 6 HAL System Driver
		HAL_Delay(1);
 8000de6:	2001      	movs	r0, #1
 8000de8:	f000 fbe2 	bl	80015b0 <HAL_Delay>
		memset(SPI_Junk, 0, sizeof(SPI_Junk));
 8000dec:	2203      	movs	r2, #3
 8000dee:	2100      	movs	r1, #0
 8000df0:	4853      	ldr	r0, [pc, #332]	@ (8000f40 <main+0x1f8>)
 8000df2:	f002 fdc0 	bl	8003976 <memset>
		// #Page: 227 Chapter 20 HAL GPIO Generic Driver
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2101      	movs	r1, #1
 8000dfa:	4850      	ldr	r0, [pc, #320]	@ (8000f3c <main+0x1f4>)
 8000dfc:	f000 fe5c 	bl	8001ab8 <HAL_GPIO_WritePin>
		// #Page: 452 Chapter 35 HAL SPI Generic Driver
		HAL_SPI_TransmitReceive(&hspi1, SPI_Junk, Encoded_Readings, 3, 100);
 8000e00:	2364      	movs	r3, #100	@ 0x64
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	2303      	movs	r3, #3
 8000e06:	4a50      	ldr	r2, [pc, #320]	@ (8000f48 <main+0x200>)
 8000e08:	494d      	ldr	r1, [pc, #308]	@ (8000f40 <main+0x1f8>)
 8000e0a:	484e      	ldr	r0, [pc, #312]	@ (8000f44 <main+0x1fc>)
 8000e0c:	f001 fb00 	bl	8002410 <HAL_SPI_TransmitReceive>
		// #Page: 227 Chapter 20 HAL GPIO Generic Driver
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000e10:	2201      	movs	r2, #1
 8000e12:	2101      	movs	r1, #1
 8000e14:	4849      	ldr	r0, [pc, #292]	@ (8000f3c <main+0x1f4>)
 8000e16:	f000 fe4f 	bl	8001ab8 <HAL_GPIO_WritePin>
		// data decoding
		Voltage_Level = (Encoded_Readings[0] << 4) | (Encoded_Readings[1] >> 4);
 8000e1a:	4b4b      	ldr	r3, [pc, #300]	@ (8000f48 <main+0x200>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	b21b      	sxth	r3, r3
 8000e20:	011b      	lsls	r3, r3, #4
 8000e22:	b21a      	sxth	r2, r3
 8000e24:	4b48      	ldr	r3, [pc, #288]	@ (8000f48 <main+0x200>)
 8000e26:	785b      	ldrb	r3, [r3, #1]
 8000e28:	091b      	lsrs	r3, r3, #4
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	b21b      	sxth	r3, r3
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	b21b      	sxth	r3, r3
 8000e32:	b29a      	uxth	r2, r3
 8000e34:	4b45      	ldr	r3, [pc, #276]	@ (8000f4c <main+0x204>)
 8000e36:	801a      	strh	r2, [r3, #0]
		Wheel_Speed = ((Encoded_Readings[1] & 0x0F) << 8) | Encoded_Readings[2];
 8000e38:	4b43      	ldr	r3, [pc, #268]	@ (8000f48 <main+0x200>)
 8000e3a:	785b      	ldrb	r3, [r3, #1]
 8000e3c:	b21b      	sxth	r3, r3
 8000e3e:	021b      	lsls	r3, r3, #8
 8000e40:	b21b      	sxth	r3, r3
 8000e42:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8000e46:	b21a      	sxth	r2, r3
 8000e48:	4b3f      	ldr	r3, [pc, #252]	@ (8000f48 <main+0x200>)
 8000e4a:	789b      	ldrb	r3, [r3, #2]
 8000e4c:	b21b      	sxth	r3, r3
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	b21b      	sxth	r3, r3
 8000e52:	b29a      	uxth	r2, r3
 8000e54:	4b3e      	ldr	r3, [pc, #248]	@ (8000f50 <main+0x208>)
 8000e56:	801a      	strh	r2, [r3, #0]
		final_voltage_level = ((float)Voltage_Level / 4095.0) * 24.0;
 8000e58:	4b3c      	ldr	r3, [pc, #240]	@ (8000f4c <main+0x204>)
 8000e5a:	881b      	ldrh	r3, [r3, #0]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ff19 	bl	8000c94 <__aeabi_ui2f>
 8000e62:	4603      	mov	r3, r0
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff fadf 	bl	8000428 <__aeabi_f2d>
 8000e6a:	a32b      	add	r3, pc, #172	@ (adr r3, 8000f18 <main+0x1d0>)
 8000e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e70:	f7ff fc5c 	bl	800072c <__aeabi_ddiv>
 8000e74:	4602      	mov	r2, r0
 8000e76:	460b      	mov	r3, r1
 8000e78:	4610      	mov	r0, r2
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	f04f 0200 	mov.w	r2, #0
 8000e80:	4b34      	ldr	r3, [pc, #208]	@ (8000f54 <main+0x20c>)
 8000e82:	f7ff fb29 	bl	80004d8 <__aeabi_dmul>
 8000e86:	4602      	mov	r2, r0
 8000e88:	460b      	mov	r3, r1
 8000e8a:	4610      	mov	r0, r2
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f7ff fdfb 	bl	8000a88 <__aeabi_d2f>
 8000e92:	4603      	mov	r3, r0
 8000e94:	4a30      	ldr	r2, [pc, #192]	@ (8000f58 <main+0x210>)
 8000e96:	6013      	str	r3, [r2, #0]
		final_wheel_speed = (int)round((Wheel_Speed / 4095.0) * 300);
 8000e98:	4b2d      	ldr	r3, [pc, #180]	@ (8000f50 <main+0x208>)
 8000e9a:	881b      	ldrh	r3, [r3, #0]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff fab1 	bl	8000404 <__aeabi_i2d>
 8000ea2:	a31d      	add	r3, pc, #116	@ (adr r3, 8000f18 <main+0x1d0>)
 8000ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea8:	f7ff fc40 	bl	800072c <__aeabi_ddiv>
 8000eac:	4602      	mov	r2, r0
 8000eae:	460b      	mov	r3, r1
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	a31a      	add	r3, pc, #104	@ (adr r3, 8000f20 <main+0x1d8>)
 8000eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eba:	f7ff fb0d 	bl	80004d8 <__aeabi_dmul>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	4610      	mov	r0, r2
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f004 fe2f 	bl	8005b28 <round>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	460b      	mov	r3, r1
 8000ece:	4610      	mov	r0, r2
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f7ff fdb1 	bl	8000a38 <__aeabi_d2iz>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	4a20      	ldr	r2, [pc, #128]	@ (8000f5c <main+0x214>)
 8000eda:	6013      	str	r3, [r2, #0]
		// formulating the message and sending to Virtual terminal for display
		snprintf(Decoded_message, sizeof(Decoded_message), "Case ID: %d | Voltage Level: %.1f | Wheel Speed: %d\r\n", value, final_voltage_level, final_wheel_speed);
 8000edc:	4b1e      	ldr	r3, [pc, #120]	@ (8000f58 <main+0x210>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff faa1 	bl	8000428 <__aeabi_f2d>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	460b      	mov	r3, r1
 8000eea:	491c      	ldr	r1, [pc, #112]	@ (8000f5c <main+0x214>)
 8000eec:	6809      	ldr	r1, [r1, #0]
 8000eee:	9102      	str	r1, [sp, #8]
 8000ef0:	e9cd 2300 	strd	r2, r3, [sp]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a1a      	ldr	r2, [pc, #104]	@ (8000f60 <main+0x218>)
 8000ef8:	2164      	movs	r1, #100	@ 0x64
 8000efa:	481a      	ldr	r0, [pc, #104]	@ (8000f64 <main+0x21c>)
 8000efc:	f002 fcc2 	bl	8003884 <sniprintf>
		// #Page: 556 Chapter 38 HAL UART Generic Driver
		HAL_UART_Transmit(&huart1, (uint8_t*) Decoded_message, strlen(Decoded_message), 100);
 8000f00:	4818      	ldr	r0, [pc, #96]	@ (8000f64 <main+0x21c>)
 8000f02:	f7ff f925 	bl	8000150 <strlen>
 8000f06:	4603      	mov	r3, r0
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	2364      	movs	r3, #100	@ 0x64
 8000f0c:	4915      	ldr	r1, [pc, #84]	@ (8000f64 <main+0x21c>)
 8000f0e:	4807      	ldr	r0, [pc, #28]	@ (8000f2c <main+0x1e4>)
 8000f10:	f001 fd31 	bl	8002976 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, UART_received_data, 1, HAL_MAX_DELAY);
 8000f14:	e725      	b.n	8000d62 <main+0x1a>
 8000f16:	bf00      	nop
 8000f18:	00000000 	.word	0x00000000
 8000f1c:	40affe00 	.word	0x40affe00
 8000f20:	00000000 	.word	0x00000000
 8000f24:	4072c000 	.word	0x4072c000
 8000f28:	20000290 	.word	0x20000290
 8000f2c:	20000248 	.word	0x20000248
 8000f30:	08005bd0 	.word	0x08005bd0
 8000f34:	20000294 	.word	0x20000294
 8000f38:	200002f8 	.word	0x200002f8
 8000f3c:	40010c00 	.word	0x40010c00
 8000f40:	200002fc 	.word	0x200002fc
 8000f44:	200001f0 	.word	0x200001f0
 8000f48:	2000030c 	.word	0x2000030c
 8000f4c:	20000300 	.word	0x20000300
 8000f50:	20000302 	.word	0x20000302
 8000f54:	40380000 	.word	0x40380000
 8000f58:	20000304 	.word	0x20000304
 8000f5c:	20000308 	.word	0x20000308
 8000f60:	08005c08 	.word	0x08005c08
 8000f64:	20000310 	.word	0x20000310

08000f68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b090      	sub	sp, #64	@ 0x40
 8000f6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6e:	f107 0318 	add.w	r3, r7, #24
 8000f72:	2228      	movs	r2, #40	@ 0x28
 8000f74:	2100      	movs	r1, #0
 8000f76:	4618      	mov	r0, r3
 8000f78:	f002 fcfd 	bl	8003976 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
 8000f88:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f92:	2310      	movs	r3, #16
 8000f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f96:	2300      	movs	r3, #0
 8000f98:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f9a:	f107 0318 	add.w	r3, r7, #24
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 fda2 	bl	8001ae8 <HAL_RCC_OscConfig>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000faa:	f000 f8b7 	bl	800111c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fae:	230f      	movs	r3, #15
 8000fb0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f001 f810 	bl	8001fec <HAL_RCC_ClockConfig>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000fd2:	f000 f8a3 	bl	800111c <Error_Handler>
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	3740      	adds	r7, #64	@ 0x40
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fe4:	4b17      	ldr	r3, [pc, #92]	@ (8001044 <MX_SPI1_Init+0x64>)
 8000fe6:	4a18      	ldr	r2, [pc, #96]	@ (8001048 <MX_SPI1_Init+0x68>)
 8000fe8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fea:	4b16      	ldr	r3, [pc, #88]	@ (8001044 <MX_SPI1_Init+0x64>)
 8000fec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ff0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ff2:	4b14      	ldr	r3, [pc, #80]	@ (8001044 <MX_SPI1_Init+0x64>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ff8:	4b12      	ldr	r3, [pc, #72]	@ (8001044 <MX_SPI1_Init+0x64>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ffe:	4b11      	ldr	r3, [pc, #68]	@ (8001044 <MX_SPI1_Init+0x64>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001004:	4b0f      	ldr	r3, [pc, #60]	@ (8001044 <MX_SPI1_Init+0x64>)
 8001006:	2200      	movs	r2, #0
 8001008:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800100a:	4b0e      	ldr	r3, [pc, #56]	@ (8001044 <MX_SPI1_Init+0x64>)
 800100c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001010:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001012:	4b0c      	ldr	r3, [pc, #48]	@ (8001044 <MX_SPI1_Init+0x64>)
 8001014:	2228      	movs	r2, #40	@ 0x28
 8001016:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001018:	4b0a      	ldr	r3, [pc, #40]	@ (8001044 <MX_SPI1_Init+0x64>)
 800101a:	2200      	movs	r2, #0
 800101c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800101e:	4b09      	ldr	r3, [pc, #36]	@ (8001044 <MX_SPI1_Init+0x64>)
 8001020:	2200      	movs	r2, #0
 8001022:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001024:	4b07      	ldr	r3, [pc, #28]	@ (8001044 <MX_SPI1_Init+0x64>)
 8001026:	2200      	movs	r2, #0
 8001028:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800102a:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <MX_SPI1_Init+0x64>)
 800102c:	220a      	movs	r2, #10
 800102e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001030:	4804      	ldr	r0, [pc, #16]	@ (8001044 <MX_SPI1_Init+0x64>)
 8001032:	f001 f969 	bl	8002308 <HAL_SPI_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800103c:	f000 f86e 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}
 8001044:	200001f0 	.word	0x200001f0
 8001048:	40013000 	.word	0x40013000

0800104c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001050:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <MX_USART1_UART_Init+0x4c>)
 8001052:	4a12      	ldr	r2, [pc, #72]	@ (800109c <MX_USART1_UART_Init+0x50>)
 8001054:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001056:	4b10      	ldr	r3, [pc, #64]	@ (8001098 <MX_USART1_UART_Init+0x4c>)
 8001058:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800105c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800105e:	4b0e      	ldr	r3, [pc, #56]	@ (8001098 <MX_USART1_UART_Init+0x4c>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001064:	4b0c      	ldr	r3, [pc, #48]	@ (8001098 <MX_USART1_UART_Init+0x4c>)
 8001066:	2200      	movs	r2, #0
 8001068:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800106a:	4b0b      	ldr	r3, [pc, #44]	@ (8001098 <MX_USART1_UART_Init+0x4c>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001070:	4b09      	ldr	r3, [pc, #36]	@ (8001098 <MX_USART1_UART_Init+0x4c>)
 8001072:	220c      	movs	r2, #12
 8001074:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001076:	4b08      	ldr	r3, [pc, #32]	@ (8001098 <MX_USART1_UART_Init+0x4c>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800107c:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <MX_USART1_UART_Init+0x4c>)
 800107e:	2200      	movs	r2, #0
 8001080:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001082:	4805      	ldr	r0, [pc, #20]	@ (8001098 <MX_USART1_UART_Init+0x4c>)
 8001084:	f001 fc27 	bl	80028d6 <HAL_UART_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800108e:	f000 f845 	bl	800111c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000248 	.word	0x20000248
 800109c:	40013800 	.word	0x40013800

080010a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a6:	f107 0308 	add.w	r3, r7, #8
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b4:	4b17      	ldr	r3, [pc, #92]	@ (8001114 <MX_GPIO_Init+0x74>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	4a16      	ldr	r2, [pc, #88]	@ (8001114 <MX_GPIO_Init+0x74>)
 80010ba:	f043 0304 	orr.w	r3, r3, #4
 80010be:	6193      	str	r3, [r2, #24]
 80010c0:	4b14      	ldr	r3, [pc, #80]	@ (8001114 <MX_GPIO_Init+0x74>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	f003 0304 	and.w	r3, r3, #4
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010cc:	4b11      	ldr	r3, [pc, #68]	@ (8001114 <MX_GPIO_Init+0x74>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	4a10      	ldr	r2, [pc, #64]	@ (8001114 <MX_GPIO_Init+0x74>)
 80010d2:	f043 0308 	orr.w	r3, r3, #8
 80010d6:	6193      	str	r3, [r2, #24]
 80010d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001114 <MX_GPIO_Init+0x74>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	f003 0308 	and.w	r3, r3, #8
 80010e0:	603b      	str	r3, [r7, #0]
 80010e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80010e4:	2201      	movs	r2, #1
 80010e6:	2101      	movs	r1, #1
 80010e8:	480b      	ldr	r0, [pc, #44]	@ (8001118 <MX_GPIO_Init+0x78>)
 80010ea:	f000 fce5 	bl	8001ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 80010ee:	2301      	movs	r3, #1
 80010f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f2:	2301      	movs	r3, #1
 80010f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010f6:	2301      	movs	r3, #1
 80010f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fa:	2302      	movs	r3, #2
 80010fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80010fe:	f107 0308 	add.w	r3, r7, #8
 8001102:	4619      	mov	r1, r3
 8001104:	4804      	ldr	r0, [pc, #16]	@ (8001118 <MX_GPIO_Init+0x78>)
 8001106:	f000 fb5b 	bl	80017c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800110a:	bf00      	nop
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40021000 	.word	0x40021000
 8001118:	40010c00 	.word	0x40010c00

0800111c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001120:	b672      	cpsid	i
}
 8001122:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001124:	bf00      	nop
 8001126:	e7fd      	b.n	8001124 <Error_Handler+0x8>

08001128 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800112e:	4b15      	ldr	r3, [pc, #84]	@ (8001184 <HAL_MspInit+0x5c>)
 8001130:	699b      	ldr	r3, [r3, #24]
 8001132:	4a14      	ldr	r2, [pc, #80]	@ (8001184 <HAL_MspInit+0x5c>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6193      	str	r3, [r2, #24]
 800113a:	4b12      	ldr	r3, [pc, #72]	@ (8001184 <HAL_MspInit+0x5c>)
 800113c:	699b      	ldr	r3, [r3, #24]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001146:	4b0f      	ldr	r3, [pc, #60]	@ (8001184 <HAL_MspInit+0x5c>)
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	4a0e      	ldr	r2, [pc, #56]	@ (8001184 <HAL_MspInit+0x5c>)
 800114c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001150:	61d3      	str	r3, [r2, #28]
 8001152:	4b0c      	ldr	r3, [pc, #48]	@ (8001184 <HAL_MspInit+0x5c>)
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800115e:	4b0a      	ldr	r3, [pc, #40]	@ (8001188 <HAL_MspInit+0x60>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	4a04      	ldr	r2, [pc, #16]	@ (8001188 <HAL_MspInit+0x60>)
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117a:	bf00      	nop
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr
 8001184:	40021000 	.word	0x40021000
 8001188:	40010000 	.word	0x40010000

0800118c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 0310 	add.w	r3, r7, #16
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a1b      	ldr	r2, [pc, #108]	@ (8001214 <HAL_SPI_MspInit+0x88>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d12f      	bne.n	800120c <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001218 <HAL_SPI_MspInit+0x8c>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	4a19      	ldr	r2, [pc, #100]	@ (8001218 <HAL_SPI_MspInit+0x8c>)
 80011b2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011b6:	6193      	str	r3, [r2, #24]
 80011b8:	4b17      	ldr	r3, [pc, #92]	@ (8001218 <HAL_SPI_MspInit+0x8c>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c4:	4b14      	ldr	r3, [pc, #80]	@ (8001218 <HAL_SPI_MspInit+0x8c>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	4a13      	ldr	r2, [pc, #76]	@ (8001218 <HAL_SPI_MspInit+0x8c>)
 80011ca:	f043 0304 	orr.w	r3, r3, #4
 80011ce:	6193      	str	r3, [r2, #24]
 80011d0:	4b11      	ldr	r3, [pc, #68]	@ (8001218 <HAL_SPI_MspInit+0x8c>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80011dc:	23a0      	movs	r3, #160	@ 0xa0
 80011de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011e4:	2303      	movs	r3, #3
 80011e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e8:	f107 0310 	add.w	r3, r7, #16
 80011ec:	4619      	mov	r1, r3
 80011ee:	480b      	ldr	r0, [pc, #44]	@ (800121c <HAL_SPI_MspInit+0x90>)
 80011f0:	f000 fae6 	bl	80017c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011f4:	2340      	movs	r3, #64	@ 0x40
 80011f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001200:	f107 0310 	add.w	r3, r7, #16
 8001204:	4619      	mov	r1, r3
 8001206:	4805      	ldr	r0, [pc, #20]	@ (800121c <HAL_SPI_MspInit+0x90>)
 8001208:	f000 fada 	bl	80017c0 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800120c:	bf00      	nop
 800120e:	3720      	adds	r7, #32
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40013000 	.word	0x40013000
 8001218:	40021000 	.word	0x40021000
 800121c:	40010800 	.word	0x40010800

08001220 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b088      	sub	sp, #32
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 0310 	add.w	r3, r7, #16
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a1c      	ldr	r2, [pc, #112]	@ (80012ac <HAL_UART_MspInit+0x8c>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d131      	bne.n	80012a4 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001240:	4b1b      	ldr	r3, [pc, #108]	@ (80012b0 <HAL_UART_MspInit+0x90>)
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	4a1a      	ldr	r2, [pc, #104]	@ (80012b0 <HAL_UART_MspInit+0x90>)
 8001246:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800124a:	6193      	str	r3, [r2, #24]
 800124c:	4b18      	ldr	r3, [pc, #96]	@ (80012b0 <HAL_UART_MspInit+0x90>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001258:	4b15      	ldr	r3, [pc, #84]	@ (80012b0 <HAL_UART_MspInit+0x90>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4a14      	ldr	r2, [pc, #80]	@ (80012b0 <HAL_UART_MspInit+0x90>)
 800125e:	f043 0304 	orr.w	r3, r3, #4
 8001262:	6193      	str	r3, [r2, #24]
 8001264:	4b12      	ldr	r3, [pc, #72]	@ (80012b0 <HAL_UART_MspInit+0x90>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	f003 0304 	and.w	r3, r3, #4
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001270:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001274:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001276:	2302      	movs	r3, #2
 8001278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800127a:	2303      	movs	r3, #3
 800127c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127e:	f107 0310 	add.w	r3, r7, #16
 8001282:	4619      	mov	r1, r3
 8001284:	480b      	ldr	r0, [pc, #44]	@ (80012b4 <HAL_UART_MspInit+0x94>)
 8001286:	f000 fa9b 	bl	80017c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800128a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800128e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001298:	f107 0310 	add.w	r3, r7, #16
 800129c:	4619      	mov	r1, r3
 800129e:	4805      	ldr	r0, [pc, #20]	@ (80012b4 <HAL_UART_MspInit+0x94>)
 80012a0:	f000 fa8e 	bl	80017c0 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80012a4:	bf00      	nop
 80012a6:	3720      	adds	r7, #32
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40013800 	.word	0x40013800
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40010800 	.word	0x40010800

080012b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012bc:	bf00      	nop
 80012be:	e7fd      	b.n	80012bc <NMI_Handler+0x4>

080012c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <HardFault_Handler+0x4>

080012c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <MemManage_Handler+0x4>

080012d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d4:	bf00      	nop
 80012d6:	e7fd      	b.n	80012d4 <BusFault_Handler+0x4>

080012d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012dc:	bf00      	nop
 80012de:	e7fd      	b.n	80012dc <UsageFault_Handler+0x4>

080012e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr

080012ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr

080012f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr

08001304 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001308:	f000 f936 	bl	8001578 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}

08001310 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  return 1;
 8001314:	2301      	movs	r3, #1
}
 8001316:	4618      	mov	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr

0800131e <_kill>:

int _kill(int pid, int sig)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001328:	f002 fb78 	bl	8003a1c <__errno>
 800132c:	4603      	mov	r3, r0
 800132e:	2216      	movs	r2, #22
 8001330:	601a      	str	r2, [r3, #0]
  return -1;
 8001332:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <_exit>:

void _exit (int status)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001346:	f04f 31ff 	mov.w	r1, #4294967295
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ffe7 	bl	800131e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001350:	bf00      	nop
 8001352:	e7fd      	b.n	8001350 <_exit+0x12>

08001354 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	e00a      	b.n	800137c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001366:	f3af 8000 	nop.w
 800136a:	4601      	mov	r1, r0
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	1c5a      	adds	r2, r3, #1
 8001370:	60ba      	str	r2, [r7, #8]
 8001372:	b2ca      	uxtb	r2, r1
 8001374:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	3301      	adds	r3, #1
 800137a:	617b      	str	r3, [r7, #20]
 800137c:	697a      	ldr	r2, [r7, #20]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	429a      	cmp	r2, r3
 8001382:	dbf0      	blt.n	8001366 <_read+0x12>
  }

  return len;
 8001384:	687b      	ldr	r3, [r7, #4]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b086      	sub	sp, #24
 8001392:	af00      	add	r7, sp, #0
 8001394:	60f8      	str	r0, [r7, #12]
 8001396:	60b9      	str	r1, [r7, #8]
 8001398:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
 800139e:	e009      	b.n	80013b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	1c5a      	adds	r2, r3, #1
 80013a4:	60ba      	str	r2, [r7, #8]
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	3301      	adds	r3, #1
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	697a      	ldr	r2, [r7, #20]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	dbf1      	blt.n	80013a0 <_write+0x12>
  }
  return len;
 80013bc:	687b      	ldr	r3, [r7, #4]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <_close>:

int _close(int file)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b083      	sub	sp, #12
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr

080013dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013ec:	605a      	str	r2, [r3, #4]
  return 0;
 80013ee:	2300      	movs	r3, #0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr

080013fa <_isatty>:

int _isatty(int file)
{
 80013fa:	b480      	push	{r7}
 80013fc:	b083      	sub	sp, #12
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001402:	2301      	movs	r3, #1
}
 8001404:	4618      	mov	r0, r3
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr

0800140e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800140e:	b480      	push	{r7}
 8001410:	b085      	sub	sp, #20
 8001412:	af00      	add	r7, sp, #0
 8001414:	60f8      	str	r0, [r7, #12]
 8001416:	60b9      	str	r1, [r7, #8]
 8001418:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	3714      	adds	r7, #20
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr
	...

08001428 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001430:	4a14      	ldr	r2, [pc, #80]	@ (8001484 <_sbrk+0x5c>)
 8001432:	4b15      	ldr	r3, [pc, #84]	@ (8001488 <_sbrk+0x60>)
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800143c:	4b13      	ldr	r3, [pc, #76]	@ (800148c <_sbrk+0x64>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d102      	bne.n	800144a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001444:	4b11      	ldr	r3, [pc, #68]	@ (800148c <_sbrk+0x64>)
 8001446:	4a12      	ldr	r2, [pc, #72]	@ (8001490 <_sbrk+0x68>)
 8001448:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800144a:	4b10      	ldr	r3, [pc, #64]	@ (800148c <_sbrk+0x64>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4413      	add	r3, r2
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	429a      	cmp	r2, r3
 8001456:	d207      	bcs.n	8001468 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001458:	f002 fae0 	bl	8003a1c <__errno>
 800145c:	4603      	mov	r3, r0
 800145e:	220c      	movs	r2, #12
 8001460:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
 8001466:	e009      	b.n	800147c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001468:	4b08      	ldr	r3, [pc, #32]	@ (800148c <_sbrk+0x64>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800146e:	4b07      	ldr	r3, [pc, #28]	@ (800148c <_sbrk+0x64>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	4a05      	ldr	r2, [pc, #20]	@ (800148c <_sbrk+0x64>)
 8001478:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800147a:	68fb      	ldr	r3, [r7, #12]
}
 800147c:	4618      	mov	r0, r3
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20002800 	.word	0x20002800
 8001488:	00000400 	.word	0x00000400
 800148c:	20000374 	.word	0x20000374
 8001490:	200004c8 	.word	0x200004c8

08001494 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr

080014a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014a0:	f7ff fff8 	bl	8001494 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014a4:	480b      	ldr	r0, [pc, #44]	@ (80014d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014a6:	490c      	ldr	r1, [pc, #48]	@ (80014d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014a8:	4a0c      	ldr	r2, [pc, #48]	@ (80014dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80014aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014ac:	e002      	b.n	80014b4 <LoopCopyDataInit>

080014ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014b2:	3304      	adds	r3, #4

080014b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b8:	d3f9      	bcc.n	80014ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ba:	4a09      	ldr	r2, [pc, #36]	@ (80014e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014bc:	4c09      	ldr	r4, [pc, #36]	@ (80014e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c0:	e001      	b.n	80014c6 <LoopFillZerobss>

080014c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c4:	3204      	adds	r2, #4

080014c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c8:	d3fb      	bcc.n	80014c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ca:	f002 faad 	bl	8003a28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014ce:	f7ff fc3b 	bl	8000d48 <main>
  bx lr
 80014d2:	4770      	bx	lr
  ldr r0, =_sdata
 80014d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80014dc:	08005fec 	.word	0x08005fec
  ldr r2, =_sbss
 80014e0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80014e4:	200004c8 	.word	0x200004c8

080014e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014e8:	e7fe      	b.n	80014e8 <ADC1_2_IRQHandler>
	...

080014ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014f0:	4b08      	ldr	r3, [pc, #32]	@ (8001514 <HAL_Init+0x28>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a07      	ldr	r2, [pc, #28]	@ (8001514 <HAL_Init+0x28>)
 80014f6:	f043 0310 	orr.w	r3, r3, #16
 80014fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014fc:	2003      	movs	r0, #3
 80014fe:	f000 f92b 	bl	8001758 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001502:	200f      	movs	r0, #15
 8001504:	f000 f808 	bl	8001518 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001508:	f7ff fe0e 	bl	8001128 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40022000 	.word	0x40022000

08001518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001520:	4b12      	ldr	r3, [pc, #72]	@ (800156c <HAL_InitTick+0x54>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4b12      	ldr	r3, [pc, #72]	@ (8001570 <HAL_InitTick+0x58>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	4619      	mov	r1, r3
 800152a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800152e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001532:	fbb2 f3f3 	udiv	r3, r2, r3
 8001536:	4618      	mov	r0, r3
 8001538:	f000 f935 	bl	80017a6 <HAL_SYSTICK_Config>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e00e      	b.n	8001564 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b0f      	cmp	r3, #15
 800154a:	d80a      	bhi.n	8001562 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800154c:	2200      	movs	r2, #0
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	f04f 30ff 	mov.w	r0, #4294967295
 8001554:	f000 f90b 	bl	800176e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001558:	4a06      	ldr	r2, [pc, #24]	@ (8001574 <HAL_InitTick+0x5c>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800155e:	2300      	movs	r3, #0
 8001560:	e000      	b.n	8001564 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
}
 8001564:	4618      	mov	r0, r3
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000000 	.word	0x20000000
 8001570:	20000008 	.word	0x20000008
 8001574:	20000004 	.word	0x20000004

08001578 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800157c:	4b05      	ldr	r3, [pc, #20]	@ (8001594 <HAL_IncTick+0x1c>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	4b05      	ldr	r3, [pc, #20]	@ (8001598 <HAL_IncTick+0x20>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4413      	add	r3, r2
 8001588:	4a03      	ldr	r2, [pc, #12]	@ (8001598 <HAL_IncTick+0x20>)
 800158a:	6013      	str	r3, [r2, #0]
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr
 8001594:	20000008 	.word	0x20000008
 8001598:	20000378 	.word	0x20000378

0800159c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return uwTick;
 80015a0:	4b02      	ldr	r3, [pc, #8]	@ (80015ac <HAL_GetTick+0x10>)
 80015a2:	681b      	ldr	r3, [r3, #0]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr
 80015ac:	20000378 	.word	0x20000378

080015b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015b8:	f7ff fff0 	bl	800159c <HAL_GetTick>
 80015bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015c8:	d005      	beq.n	80015d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ca:	4b0a      	ldr	r3, [pc, #40]	@ (80015f4 <HAL_Delay+0x44>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	461a      	mov	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4413      	add	r3, r2
 80015d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015d6:	bf00      	nop
 80015d8:	f7ff ffe0 	bl	800159c <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d8f7      	bhi.n	80015d8 <HAL_Delay+0x28>
  {
  }
}
 80015e8:	bf00      	nop
 80015ea:	bf00      	nop
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000008 	.word	0x20000008

080015f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001608:	4b0c      	ldr	r3, [pc, #48]	@ (800163c <__NVIC_SetPriorityGrouping+0x44>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800160e:	68ba      	ldr	r2, [r7, #8]
 8001610:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001614:	4013      	ands	r3, r2
 8001616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001620:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001624:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800162a:	4a04      	ldr	r2, [pc, #16]	@ (800163c <__NVIC_SetPriorityGrouping+0x44>)
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	60d3      	str	r3, [r2, #12]
}
 8001630:	bf00      	nop
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001644:	4b04      	ldr	r3, [pc, #16]	@ (8001658 <__NVIC_GetPriorityGrouping+0x18>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	0a1b      	lsrs	r3, r3, #8
 800164a:	f003 0307 	and.w	r3, r3, #7
}
 800164e:	4618      	mov	r0, r3
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	6039      	str	r1, [r7, #0]
 8001666:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166c:	2b00      	cmp	r3, #0
 800166e:	db0a      	blt.n	8001686 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	b2da      	uxtb	r2, r3
 8001674:	490c      	ldr	r1, [pc, #48]	@ (80016a8 <__NVIC_SetPriority+0x4c>)
 8001676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167a:	0112      	lsls	r2, r2, #4
 800167c:	b2d2      	uxtb	r2, r2
 800167e:	440b      	add	r3, r1
 8001680:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001684:	e00a      	b.n	800169c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	b2da      	uxtb	r2, r3
 800168a:	4908      	ldr	r1, [pc, #32]	@ (80016ac <__NVIC_SetPriority+0x50>)
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	3b04      	subs	r3, #4
 8001694:	0112      	lsls	r2, r2, #4
 8001696:	b2d2      	uxtb	r2, r2
 8001698:	440b      	add	r3, r1
 800169a:	761a      	strb	r2, [r3, #24]
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc80      	pop	{r7}
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000e100 	.word	0xe000e100
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b089      	sub	sp, #36	@ 0x24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f1c3 0307 	rsb	r3, r3, #7
 80016ca:	2b04      	cmp	r3, #4
 80016cc:	bf28      	it	cs
 80016ce:	2304      	movcs	r3, #4
 80016d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	3304      	adds	r3, #4
 80016d6:	2b06      	cmp	r3, #6
 80016d8:	d902      	bls.n	80016e0 <NVIC_EncodePriority+0x30>
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	3b03      	subs	r3, #3
 80016de:	e000      	b.n	80016e2 <NVIC_EncodePriority+0x32>
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e4:	f04f 32ff 	mov.w	r2, #4294967295
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43da      	mvns	r2, r3
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	401a      	ands	r2, r3
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f8:	f04f 31ff 	mov.w	r1, #4294967295
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001702:	43d9      	mvns	r1, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	4313      	orrs	r3, r2
         );
}
 800170a:	4618      	mov	r0, r3
 800170c:	3724      	adds	r7, #36	@ 0x24
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr

08001714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3b01      	subs	r3, #1
 8001720:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001724:	d301      	bcc.n	800172a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001726:	2301      	movs	r3, #1
 8001728:	e00f      	b.n	800174a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800172a:	4a0a      	ldr	r2, [pc, #40]	@ (8001754 <SysTick_Config+0x40>)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3b01      	subs	r3, #1
 8001730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001732:	210f      	movs	r1, #15
 8001734:	f04f 30ff 	mov.w	r0, #4294967295
 8001738:	f7ff ff90 	bl	800165c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800173c:	4b05      	ldr	r3, [pc, #20]	@ (8001754 <SysTick_Config+0x40>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001742:	4b04      	ldr	r3, [pc, #16]	@ (8001754 <SysTick_Config+0x40>)
 8001744:	2207      	movs	r2, #7
 8001746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	e000e010 	.word	0xe000e010

08001758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff ff49 	bl	80015f8 <__NVIC_SetPriorityGrouping>
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800176e:	b580      	push	{r7, lr}
 8001770:	b086      	sub	sp, #24
 8001772:	af00      	add	r7, sp, #0
 8001774:	4603      	mov	r3, r0
 8001776:	60b9      	str	r1, [r7, #8]
 8001778:	607a      	str	r2, [r7, #4]
 800177a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001780:	f7ff ff5e 	bl	8001640 <__NVIC_GetPriorityGrouping>
 8001784:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	68b9      	ldr	r1, [r7, #8]
 800178a:	6978      	ldr	r0, [r7, #20]
 800178c:	f7ff ff90 	bl	80016b0 <NVIC_EncodePriority>
 8001790:	4602      	mov	r2, r0
 8001792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001796:	4611      	mov	r1, r2
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ff5f 	bl	800165c <__NVIC_SetPriority>
}
 800179e:	bf00      	nop
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff ffb0 	bl	8001714 <SysTick_Config>
 80017b4:	4603      	mov	r3, r0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b08b      	sub	sp, #44	@ 0x2c
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ca:	2300      	movs	r3, #0
 80017cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017ce:	2300      	movs	r3, #0
 80017d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017d2:	e161      	b.n	8001a98 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017d4:	2201      	movs	r2, #1
 80017d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	69fa      	ldr	r2, [r7, #28]
 80017e4:	4013      	ands	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	f040 8150 	bne.w	8001a92 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	4a97      	ldr	r2, [pc, #604]	@ (8001a54 <HAL_GPIO_Init+0x294>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d05e      	beq.n	80018ba <HAL_GPIO_Init+0xfa>
 80017fc:	4a95      	ldr	r2, [pc, #596]	@ (8001a54 <HAL_GPIO_Init+0x294>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d875      	bhi.n	80018ee <HAL_GPIO_Init+0x12e>
 8001802:	4a95      	ldr	r2, [pc, #596]	@ (8001a58 <HAL_GPIO_Init+0x298>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d058      	beq.n	80018ba <HAL_GPIO_Init+0xfa>
 8001808:	4a93      	ldr	r2, [pc, #588]	@ (8001a58 <HAL_GPIO_Init+0x298>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d86f      	bhi.n	80018ee <HAL_GPIO_Init+0x12e>
 800180e:	4a93      	ldr	r2, [pc, #588]	@ (8001a5c <HAL_GPIO_Init+0x29c>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d052      	beq.n	80018ba <HAL_GPIO_Init+0xfa>
 8001814:	4a91      	ldr	r2, [pc, #580]	@ (8001a5c <HAL_GPIO_Init+0x29c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d869      	bhi.n	80018ee <HAL_GPIO_Init+0x12e>
 800181a:	4a91      	ldr	r2, [pc, #580]	@ (8001a60 <HAL_GPIO_Init+0x2a0>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d04c      	beq.n	80018ba <HAL_GPIO_Init+0xfa>
 8001820:	4a8f      	ldr	r2, [pc, #572]	@ (8001a60 <HAL_GPIO_Init+0x2a0>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d863      	bhi.n	80018ee <HAL_GPIO_Init+0x12e>
 8001826:	4a8f      	ldr	r2, [pc, #572]	@ (8001a64 <HAL_GPIO_Init+0x2a4>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d046      	beq.n	80018ba <HAL_GPIO_Init+0xfa>
 800182c:	4a8d      	ldr	r2, [pc, #564]	@ (8001a64 <HAL_GPIO_Init+0x2a4>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d85d      	bhi.n	80018ee <HAL_GPIO_Init+0x12e>
 8001832:	2b12      	cmp	r3, #18
 8001834:	d82a      	bhi.n	800188c <HAL_GPIO_Init+0xcc>
 8001836:	2b12      	cmp	r3, #18
 8001838:	d859      	bhi.n	80018ee <HAL_GPIO_Init+0x12e>
 800183a:	a201      	add	r2, pc, #4	@ (adr r2, 8001840 <HAL_GPIO_Init+0x80>)
 800183c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001840:	080018bb 	.word	0x080018bb
 8001844:	08001895 	.word	0x08001895
 8001848:	080018a7 	.word	0x080018a7
 800184c:	080018e9 	.word	0x080018e9
 8001850:	080018ef 	.word	0x080018ef
 8001854:	080018ef 	.word	0x080018ef
 8001858:	080018ef 	.word	0x080018ef
 800185c:	080018ef 	.word	0x080018ef
 8001860:	080018ef 	.word	0x080018ef
 8001864:	080018ef 	.word	0x080018ef
 8001868:	080018ef 	.word	0x080018ef
 800186c:	080018ef 	.word	0x080018ef
 8001870:	080018ef 	.word	0x080018ef
 8001874:	080018ef 	.word	0x080018ef
 8001878:	080018ef 	.word	0x080018ef
 800187c:	080018ef 	.word	0x080018ef
 8001880:	080018ef 	.word	0x080018ef
 8001884:	0800189d 	.word	0x0800189d
 8001888:	080018b1 	.word	0x080018b1
 800188c:	4a76      	ldr	r2, [pc, #472]	@ (8001a68 <HAL_GPIO_Init+0x2a8>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d013      	beq.n	80018ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001892:	e02c      	b.n	80018ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	623b      	str	r3, [r7, #32]
          break;
 800189a:	e029      	b.n	80018f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	3304      	adds	r3, #4
 80018a2:	623b      	str	r3, [r7, #32]
          break;
 80018a4:	e024      	b.n	80018f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	3308      	adds	r3, #8
 80018ac:	623b      	str	r3, [r7, #32]
          break;
 80018ae:	e01f      	b.n	80018f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	330c      	adds	r3, #12
 80018b6:	623b      	str	r3, [r7, #32]
          break;
 80018b8:	e01a      	b.n	80018f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d102      	bne.n	80018c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018c2:	2304      	movs	r3, #4
 80018c4:	623b      	str	r3, [r7, #32]
          break;
 80018c6:	e013      	b.n	80018f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d105      	bne.n	80018dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018d0:	2308      	movs	r3, #8
 80018d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69fa      	ldr	r2, [r7, #28]
 80018d8:	611a      	str	r2, [r3, #16]
          break;
 80018da:	e009      	b.n	80018f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018dc:	2308      	movs	r3, #8
 80018de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	69fa      	ldr	r2, [r7, #28]
 80018e4:	615a      	str	r2, [r3, #20]
          break;
 80018e6:	e003      	b.n	80018f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018e8:	2300      	movs	r3, #0
 80018ea:	623b      	str	r3, [r7, #32]
          break;
 80018ec:	e000      	b.n	80018f0 <HAL_GPIO_Init+0x130>
          break;
 80018ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	2bff      	cmp	r3, #255	@ 0xff
 80018f4:	d801      	bhi.n	80018fa <HAL_GPIO_Init+0x13a>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	e001      	b.n	80018fe <HAL_GPIO_Init+0x13e>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	3304      	adds	r3, #4
 80018fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	2bff      	cmp	r3, #255	@ 0xff
 8001904:	d802      	bhi.n	800190c <HAL_GPIO_Init+0x14c>
 8001906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	e002      	b.n	8001912 <HAL_GPIO_Init+0x152>
 800190c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190e:	3b08      	subs	r3, #8
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	210f      	movs	r1, #15
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	fa01 f303 	lsl.w	r3, r1, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	401a      	ands	r2, r3
 8001924:	6a39      	ldr	r1, [r7, #32]
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	fa01 f303 	lsl.w	r3, r1, r3
 800192c:	431a      	orrs	r2, r3
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800193a:	2b00      	cmp	r3, #0
 800193c:	f000 80a9 	beq.w	8001a92 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001940:	4b4a      	ldr	r3, [pc, #296]	@ (8001a6c <HAL_GPIO_Init+0x2ac>)
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	4a49      	ldr	r2, [pc, #292]	@ (8001a6c <HAL_GPIO_Init+0x2ac>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	6193      	str	r3, [r2, #24]
 800194c:	4b47      	ldr	r3, [pc, #284]	@ (8001a6c <HAL_GPIO_Init+0x2ac>)
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001958:	4a45      	ldr	r2, [pc, #276]	@ (8001a70 <HAL_GPIO_Init+0x2b0>)
 800195a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195c:	089b      	lsrs	r3, r3, #2
 800195e:	3302      	adds	r3, #2
 8001960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001964:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001968:	f003 0303 	and.w	r3, r3, #3
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	220f      	movs	r2, #15
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	4013      	ands	r3, r2
 800197a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a3d      	ldr	r2, [pc, #244]	@ (8001a74 <HAL_GPIO_Init+0x2b4>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d00d      	beq.n	80019a0 <HAL_GPIO_Init+0x1e0>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a3c      	ldr	r2, [pc, #240]	@ (8001a78 <HAL_GPIO_Init+0x2b8>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d007      	beq.n	800199c <HAL_GPIO_Init+0x1dc>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a3b      	ldr	r2, [pc, #236]	@ (8001a7c <HAL_GPIO_Init+0x2bc>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d101      	bne.n	8001998 <HAL_GPIO_Init+0x1d8>
 8001994:	2302      	movs	r3, #2
 8001996:	e004      	b.n	80019a2 <HAL_GPIO_Init+0x1e2>
 8001998:	2303      	movs	r3, #3
 800199a:	e002      	b.n	80019a2 <HAL_GPIO_Init+0x1e2>
 800199c:	2301      	movs	r3, #1
 800199e:	e000      	b.n	80019a2 <HAL_GPIO_Init+0x1e2>
 80019a0:	2300      	movs	r3, #0
 80019a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019a4:	f002 0203 	and.w	r2, r2, #3
 80019a8:	0092      	lsls	r2, r2, #2
 80019aa:	4093      	lsls	r3, r2
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019b2:	492f      	ldr	r1, [pc, #188]	@ (8001a70 <HAL_GPIO_Init+0x2b0>)
 80019b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b6:	089b      	lsrs	r3, r3, #2
 80019b8:	3302      	adds	r3, #2
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d006      	beq.n	80019da <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001a80 <HAL_GPIO_Init+0x2c0>)
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	492b      	ldr	r1, [pc, #172]	@ (8001a80 <HAL_GPIO_Init+0x2c0>)
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	608b      	str	r3, [r1, #8]
 80019d8:	e006      	b.n	80019e8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019da:	4b29      	ldr	r3, [pc, #164]	@ (8001a80 <HAL_GPIO_Init+0x2c0>)
 80019dc:	689a      	ldr	r2, [r3, #8]
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	43db      	mvns	r3, r3
 80019e2:	4927      	ldr	r1, [pc, #156]	@ (8001a80 <HAL_GPIO_Init+0x2c0>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d006      	beq.n	8001a02 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019f4:	4b22      	ldr	r3, [pc, #136]	@ (8001a80 <HAL_GPIO_Init+0x2c0>)
 80019f6:	68da      	ldr	r2, [r3, #12]
 80019f8:	4921      	ldr	r1, [pc, #132]	@ (8001a80 <HAL_GPIO_Init+0x2c0>)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	60cb      	str	r3, [r1, #12]
 8001a00:	e006      	b.n	8001a10 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a02:	4b1f      	ldr	r3, [pc, #124]	@ (8001a80 <HAL_GPIO_Init+0x2c0>)
 8001a04:	68da      	ldr	r2, [r3, #12]
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	491d      	ldr	r1, [pc, #116]	@ (8001a80 <HAL_GPIO_Init+0x2c0>)
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d006      	beq.n	8001a2a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a1c:	4b18      	ldr	r3, [pc, #96]	@ (8001a80 <HAL_GPIO_Init+0x2c0>)
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	4917      	ldr	r1, [pc, #92]	@ (8001a80 <HAL_GPIO_Init+0x2c0>)
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	604b      	str	r3, [r1, #4]
 8001a28:	e006      	b.n	8001a38 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a2a:	4b15      	ldr	r3, [pc, #84]	@ (8001a80 <HAL_GPIO_Init+0x2c0>)
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	43db      	mvns	r3, r3
 8001a32:	4913      	ldr	r1, [pc, #76]	@ (8001a80 <HAL_GPIO_Init+0x2c0>)
 8001a34:	4013      	ands	r3, r2
 8001a36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d01f      	beq.n	8001a84 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a44:	4b0e      	ldr	r3, [pc, #56]	@ (8001a80 <HAL_GPIO_Init+0x2c0>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	490d      	ldr	r1, [pc, #52]	@ (8001a80 <HAL_GPIO_Init+0x2c0>)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	600b      	str	r3, [r1, #0]
 8001a50:	e01f      	b.n	8001a92 <HAL_GPIO_Init+0x2d2>
 8001a52:	bf00      	nop
 8001a54:	10320000 	.word	0x10320000
 8001a58:	10310000 	.word	0x10310000
 8001a5c:	10220000 	.word	0x10220000
 8001a60:	10210000 	.word	0x10210000
 8001a64:	10120000 	.word	0x10120000
 8001a68:	10110000 	.word	0x10110000
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	40010000 	.word	0x40010000
 8001a74:	40010800 	.word	0x40010800
 8001a78:	40010c00 	.word	0x40010c00
 8001a7c:	40011000 	.word	0x40011000
 8001a80:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a84:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab4 <HAL_GPIO_Init+0x2f4>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	4909      	ldr	r1, [pc, #36]	@ (8001ab4 <HAL_GPIO_Init+0x2f4>)
 8001a8e:	4013      	ands	r3, r2
 8001a90:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a94:	3301      	adds	r3, #1
 8001a96:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f47f ae96 	bne.w	80017d4 <HAL_GPIO_Init+0x14>
  }
}
 8001aa8:	bf00      	nop
 8001aaa:	bf00      	nop
 8001aac:	372c      	adds	r7, #44	@ 0x2c
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr
 8001ab4:	40010400 	.word	0x40010400

08001ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	807b      	strh	r3, [r7, #2]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ac8:	787b      	ldrb	r3, [r7, #1]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ace:	887a      	ldrh	r2, [r7, #2]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ad4:	e003      	b.n	8001ade <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ad6:	887b      	ldrh	r3, [r7, #2]
 8001ad8:	041a      	lsls	r2, r3, #16
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	611a      	str	r2, [r3, #16]
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr

08001ae8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e272      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f000 8087 	beq.w	8001c16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b08:	4b92      	ldr	r3, [pc, #584]	@ (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 030c 	and.w	r3, r3, #12
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	d00c      	beq.n	8001b2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b14:	4b8f      	ldr	r3, [pc, #572]	@ (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 030c 	and.w	r3, r3, #12
 8001b1c:	2b08      	cmp	r3, #8
 8001b1e:	d112      	bne.n	8001b46 <HAL_RCC_OscConfig+0x5e>
 8001b20:	4b8c      	ldr	r3, [pc, #560]	@ (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b2c:	d10b      	bne.n	8001b46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b2e:	4b89      	ldr	r3, [pc, #548]	@ (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d06c      	beq.n	8001c14 <HAL_RCC_OscConfig+0x12c>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d168      	bne.n	8001c14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e24c      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b4e:	d106      	bne.n	8001b5e <HAL_RCC_OscConfig+0x76>
 8001b50:	4b80      	ldr	r3, [pc, #512]	@ (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a7f      	ldr	r2, [pc, #508]	@ (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b5a:	6013      	str	r3, [r2, #0]
 8001b5c:	e02e      	b.n	8001bbc <HAL_RCC_OscConfig+0xd4>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10c      	bne.n	8001b80 <HAL_RCC_OscConfig+0x98>
 8001b66:	4b7b      	ldr	r3, [pc, #492]	@ (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a7a      	ldr	r2, [pc, #488]	@ (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	4b78      	ldr	r3, [pc, #480]	@ (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a77      	ldr	r2, [pc, #476]	@ (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b7c:	6013      	str	r3, [r2, #0]
 8001b7e:	e01d      	b.n	8001bbc <HAL_RCC_OscConfig+0xd4>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b88:	d10c      	bne.n	8001ba4 <HAL_RCC_OscConfig+0xbc>
 8001b8a:	4b72      	ldr	r3, [pc, #456]	@ (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a71      	ldr	r2, [pc, #452]	@ (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	4b6f      	ldr	r3, [pc, #444]	@ (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a6e      	ldr	r2, [pc, #440]	@ (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ba0:	6013      	str	r3, [r2, #0]
 8001ba2:	e00b      	b.n	8001bbc <HAL_RCC_OscConfig+0xd4>
 8001ba4:	4b6b      	ldr	r3, [pc, #428]	@ (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a6a      	ldr	r2, [pc, #424]	@ (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001baa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	4b68      	ldr	r3, [pc, #416]	@ (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a67      	ldr	r2, [pc, #412]	@ (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001bb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d013      	beq.n	8001bec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc4:	f7ff fcea 	bl	800159c <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bcc:	f7ff fce6 	bl	800159c <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b64      	cmp	r3, #100	@ 0x64
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e200      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bde:	4b5d      	ldr	r3, [pc, #372]	@ (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0f0      	beq.n	8001bcc <HAL_RCC_OscConfig+0xe4>
 8001bea:	e014      	b.n	8001c16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bec:	f7ff fcd6 	bl	800159c <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf4:	f7ff fcd2 	bl	800159c <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b64      	cmp	r3, #100	@ 0x64
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e1ec      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c06:	4b53      	ldr	r3, [pc, #332]	@ (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1f0      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x10c>
 8001c12:	e000      	b.n	8001c16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d063      	beq.n	8001cea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c22:	4b4c      	ldr	r3, [pc, #304]	@ (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 030c 	and.w	r3, r3, #12
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00b      	beq.n	8001c46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c2e:	4b49      	ldr	r3, [pc, #292]	@ (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f003 030c 	and.w	r3, r3, #12
 8001c36:	2b08      	cmp	r3, #8
 8001c38:	d11c      	bne.n	8001c74 <HAL_RCC_OscConfig+0x18c>
 8001c3a:	4b46      	ldr	r3, [pc, #280]	@ (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d116      	bne.n	8001c74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c46:	4b43      	ldr	r3, [pc, #268]	@ (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d005      	beq.n	8001c5e <HAL_RCC_OscConfig+0x176>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d001      	beq.n	8001c5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e1c0      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c5e:	4b3d      	ldr	r3, [pc, #244]	@ (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	4939      	ldr	r1, [pc, #228]	@ (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c72:	e03a      	b.n	8001cea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d020      	beq.n	8001cbe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c7c:	4b36      	ldr	r3, [pc, #216]	@ (8001d58 <HAL_RCC_OscConfig+0x270>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c82:	f7ff fc8b 	bl	800159c <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c8a:	f7ff fc87 	bl	800159c <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e1a1      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c9c:	4b2d      	ldr	r3, [pc, #180]	@ (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0f0      	beq.n	8001c8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca8:	4b2a      	ldr	r3, [pc, #168]	@ (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	695b      	ldr	r3, [r3, #20]
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	4927      	ldr	r1, [pc, #156]	@ (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	600b      	str	r3, [r1, #0]
 8001cbc:	e015      	b.n	8001cea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cbe:	4b26      	ldr	r3, [pc, #152]	@ (8001d58 <HAL_RCC_OscConfig+0x270>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc4:	f7ff fc6a 	bl	800159c <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ccc:	f7ff fc66 	bl	800159c <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e180      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cde:	4b1d      	ldr	r3, [pc, #116]	@ (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1f0      	bne.n	8001ccc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0308 	and.w	r3, r3, #8
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d03a      	beq.n	8001d6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d019      	beq.n	8001d32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cfe:	4b17      	ldr	r3, [pc, #92]	@ (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001d00:	2201      	movs	r2, #1
 8001d02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d04:	f7ff fc4a 	bl	800159c <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d0c:	f7ff fc46 	bl	800159c <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e160      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0f0      	beq.n	8001d0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d2a:	2001      	movs	r0, #1
 8001d2c:	f000 face 	bl	80022cc <RCC_Delay>
 8001d30:	e01c      	b.n	8001d6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d32:	4b0a      	ldr	r3, [pc, #40]	@ (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d38:	f7ff fc30 	bl	800159c <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d3e:	e00f      	b.n	8001d60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d40:	f7ff fc2c 	bl	800159c <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d908      	bls.n	8001d60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e146      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
 8001d52:	bf00      	nop
 8001d54:	40021000 	.word	0x40021000
 8001d58:	42420000 	.word	0x42420000
 8001d5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d60:	4b92      	ldr	r3, [pc, #584]	@ (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1e9      	bne.n	8001d40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f000 80a6 	beq.w	8001ec6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d7e:	4b8b      	ldr	r3, [pc, #556]	@ (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10d      	bne.n	8001da6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d8a:	4b88      	ldr	r3, [pc, #544]	@ (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	4a87      	ldr	r2, [pc, #540]	@ (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001d90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d94:	61d3      	str	r3, [r2, #28]
 8001d96:	4b85      	ldr	r3, [pc, #532]	@ (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d9e:	60bb      	str	r3, [r7, #8]
 8001da0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001da2:	2301      	movs	r3, #1
 8001da4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da6:	4b82      	ldr	r3, [pc, #520]	@ (8001fb0 <HAL_RCC_OscConfig+0x4c8>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d118      	bne.n	8001de4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001db2:	4b7f      	ldr	r3, [pc, #508]	@ (8001fb0 <HAL_RCC_OscConfig+0x4c8>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a7e      	ldr	r2, [pc, #504]	@ (8001fb0 <HAL_RCC_OscConfig+0x4c8>)
 8001db8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dbe:	f7ff fbed 	bl	800159c <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc6:	f7ff fbe9 	bl	800159c <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b64      	cmp	r3, #100	@ 0x64
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e103      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd8:	4b75      	ldr	r3, [pc, #468]	@ (8001fb0 <HAL_RCC_OscConfig+0x4c8>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0f0      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d106      	bne.n	8001dfa <HAL_RCC_OscConfig+0x312>
 8001dec:	4b6f      	ldr	r3, [pc, #444]	@ (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	4a6e      	ldr	r2, [pc, #440]	@ (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	6213      	str	r3, [r2, #32]
 8001df8:	e02d      	b.n	8001e56 <HAL_RCC_OscConfig+0x36e>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d10c      	bne.n	8001e1c <HAL_RCC_OscConfig+0x334>
 8001e02:	4b6a      	ldr	r3, [pc, #424]	@ (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	4a69      	ldr	r2, [pc, #420]	@ (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001e08:	f023 0301 	bic.w	r3, r3, #1
 8001e0c:	6213      	str	r3, [r2, #32]
 8001e0e:	4b67      	ldr	r3, [pc, #412]	@ (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	4a66      	ldr	r2, [pc, #408]	@ (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001e14:	f023 0304 	bic.w	r3, r3, #4
 8001e18:	6213      	str	r3, [r2, #32]
 8001e1a:	e01c      	b.n	8001e56 <HAL_RCC_OscConfig+0x36e>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	2b05      	cmp	r3, #5
 8001e22:	d10c      	bne.n	8001e3e <HAL_RCC_OscConfig+0x356>
 8001e24:	4b61      	ldr	r3, [pc, #388]	@ (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	4a60      	ldr	r2, [pc, #384]	@ (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001e2a:	f043 0304 	orr.w	r3, r3, #4
 8001e2e:	6213      	str	r3, [r2, #32]
 8001e30:	4b5e      	ldr	r3, [pc, #376]	@ (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	4a5d      	ldr	r2, [pc, #372]	@ (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	6213      	str	r3, [r2, #32]
 8001e3c:	e00b      	b.n	8001e56 <HAL_RCC_OscConfig+0x36e>
 8001e3e:	4b5b      	ldr	r3, [pc, #364]	@ (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	4a5a      	ldr	r2, [pc, #360]	@ (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001e44:	f023 0301 	bic.w	r3, r3, #1
 8001e48:	6213      	str	r3, [r2, #32]
 8001e4a:	4b58      	ldr	r3, [pc, #352]	@ (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	4a57      	ldr	r2, [pc, #348]	@ (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001e50:	f023 0304 	bic.w	r3, r3, #4
 8001e54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d015      	beq.n	8001e8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e5e:	f7ff fb9d 	bl	800159c <HAL_GetTick>
 8001e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e64:	e00a      	b.n	8001e7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e66:	f7ff fb99 	bl	800159c <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e0b1      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e7c:	4b4b      	ldr	r3, [pc, #300]	@ (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0ee      	beq.n	8001e66 <HAL_RCC_OscConfig+0x37e>
 8001e88:	e014      	b.n	8001eb4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e8a:	f7ff fb87 	bl	800159c <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e90:	e00a      	b.n	8001ea8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e92:	f7ff fb83 	bl	800159c <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e09b      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ea8:	4b40      	ldr	r3, [pc, #256]	@ (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1ee      	bne.n	8001e92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001eb4:	7dfb      	ldrb	r3, [r7, #23]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d105      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eba:	4b3c      	ldr	r3, [pc, #240]	@ (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	4a3b      	ldr	r2, [pc, #236]	@ (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001ec0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ec4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 8087 	beq.w	8001fde <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ed0:	4b36      	ldr	r3, [pc, #216]	@ (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 030c 	and.w	r3, r3, #12
 8001ed8:	2b08      	cmp	r3, #8
 8001eda:	d061      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	69db      	ldr	r3, [r3, #28]
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d146      	bne.n	8001f72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee4:	4b33      	ldr	r3, [pc, #204]	@ (8001fb4 <HAL_RCC_OscConfig+0x4cc>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eea:	f7ff fb57 	bl	800159c <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef2:	f7ff fb53 	bl	800159c <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e06d      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f04:	4b29      	ldr	r3, [pc, #164]	@ (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1f0      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f18:	d108      	bne.n	8001f2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f1a:	4b24      	ldr	r3, [pc, #144]	@ (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	4921      	ldr	r1, [pc, #132]	@ (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f2c:	4b1f      	ldr	r3, [pc, #124]	@ (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a19      	ldr	r1, [r3, #32]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3c:	430b      	orrs	r3, r1
 8001f3e:	491b      	ldr	r1, [pc, #108]	@ (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f44:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb4 <HAL_RCC_OscConfig+0x4cc>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4a:	f7ff fb27 	bl	800159c <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f52:	f7ff fb23 	bl	800159c <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e03d      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f64:	4b11      	ldr	r3, [pc, #68]	@ (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0f0      	beq.n	8001f52 <HAL_RCC_OscConfig+0x46a>
 8001f70:	e035      	b.n	8001fde <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f72:	4b10      	ldr	r3, [pc, #64]	@ (8001fb4 <HAL_RCC_OscConfig+0x4cc>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f78:	f7ff fb10 	bl	800159c <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f80:	f7ff fb0c 	bl	800159c <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e026      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f92:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <HAL_RCC_OscConfig+0x4c4>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCC_OscConfig+0x498>
 8001f9e:	e01e      	b.n	8001fde <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	69db      	ldr	r3, [r3, #28]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d107      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e019      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	40007000 	.word	0x40007000
 8001fb4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe8 <HAL_RCC_OscConfig+0x500>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d106      	bne.n	8001fda <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d001      	beq.n	8001fde <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e000      	b.n	8001fe0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40021000 	.word	0x40021000

08001fec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e0d0      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002000:	4b6a      	ldr	r3, [pc, #424]	@ (80021ac <HAL_RCC_ClockConfig+0x1c0>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	429a      	cmp	r2, r3
 800200c:	d910      	bls.n	8002030 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200e:	4b67      	ldr	r3, [pc, #412]	@ (80021ac <HAL_RCC_ClockConfig+0x1c0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f023 0207 	bic.w	r2, r3, #7
 8002016:	4965      	ldr	r1, [pc, #404]	@ (80021ac <HAL_RCC_ClockConfig+0x1c0>)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	4313      	orrs	r3, r2
 800201c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800201e:	4b63      	ldr	r3, [pc, #396]	@ (80021ac <HAL_RCC_ClockConfig+0x1c0>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	429a      	cmp	r2, r3
 800202a:	d001      	beq.n	8002030 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e0b8      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d020      	beq.n	800207e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	2b00      	cmp	r3, #0
 8002046:	d005      	beq.n	8002054 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002048:	4b59      	ldr	r3, [pc, #356]	@ (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	4a58      	ldr	r2, [pc, #352]	@ (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 800204e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002052:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0308 	and.w	r3, r3, #8
 800205c:	2b00      	cmp	r3, #0
 800205e:	d005      	beq.n	800206c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002060:	4b53      	ldr	r3, [pc, #332]	@ (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	4a52      	ldr	r2, [pc, #328]	@ (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002066:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800206a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800206c:	4b50      	ldr	r3, [pc, #320]	@ (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	494d      	ldr	r1, [pc, #308]	@ (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 800207a:	4313      	orrs	r3, r2
 800207c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	d040      	beq.n	800210c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d107      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002092:	4b47      	ldr	r3, [pc, #284]	@ (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d115      	bne.n	80020ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e07f      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d107      	bne.n	80020ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020aa:	4b41      	ldr	r3, [pc, #260]	@ (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d109      	bne.n	80020ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e073      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ba:	4b3d      	ldr	r3, [pc, #244]	@ (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e06b      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ca:	4b39      	ldr	r3, [pc, #228]	@ (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f023 0203 	bic.w	r2, r3, #3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	4936      	ldr	r1, [pc, #216]	@ (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020dc:	f7ff fa5e 	bl	800159c <HAL_GetTick>
 80020e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e2:	e00a      	b.n	80020fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e4:	f7ff fa5a 	bl	800159c <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e053      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fa:	4b2d      	ldr	r3, [pc, #180]	@ (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f003 020c 	and.w	r2, r3, #12
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	429a      	cmp	r2, r3
 800210a:	d1eb      	bne.n	80020e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800210c:	4b27      	ldr	r3, [pc, #156]	@ (80021ac <HAL_RCC_ClockConfig+0x1c0>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	429a      	cmp	r2, r3
 8002118:	d210      	bcs.n	800213c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211a:	4b24      	ldr	r3, [pc, #144]	@ (80021ac <HAL_RCC_ClockConfig+0x1c0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f023 0207 	bic.w	r2, r3, #7
 8002122:	4922      	ldr	r1, [pc, #136]	@ (80021ac <HAL_RCC_ClockConfig+0x1c0>)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	4313      	orrs	r3, r2
 8002128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800212a:	4b20      	ldr	r3, [pc, #128]	@ (80021ac <HAL_RCC_ClockConfig+0x1c0>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	429a      	cmp	r2, r3
 8002136:	d001      	beq.n	800213c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e032      	b.n	80021a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	d008      	beq.n	800215a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002148:	4b19      	ldr	r3, [pc, #100]	@ (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	4916      	ldr	r1, [pc, #88]	@ (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002156:	4313      	orrs	r3, r2
 8002158:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	2b00      	cmp	r3, #0
 8002164:	d009      	beq.n	800217a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002166:	4b12      	ldr	r3, [pc, #72]	@ (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	490e      	ldr	r1, [pc, #56]	@ (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002176:	4313      	orrs	r3, r2
 8002178:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800217a:	f000 f821 	bl	80021c0 <HAL_RCC_GetSysClockFreq>
 800217e:	4602      	mov	r2, r0
 8002180:	4b0b      	ldr	r3, [pc, #44]	@ (80021b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	091b      	lsrs	r3, r3, #4
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	490a      	ldr	r1, [pc, #40]	@ (80021b4 <HAL_RCC_ClockConfig+0x1c8>)
 800218c:	5ccb      	ldrb	r3, [r1, r3]
 800218e:	fa22 f303 	lsr.w	r3, r2, r3
 8002192:	4a09      	ldr	r2, [pc, #36]	@ (80021b8 <HAL_RCC_ClockConfig+0x1cc>)
 8002194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002196:	4b09      	ldr	r3, [pc, #36]	@ (80021bc <HAL_RCC_ClockConfig+0x1d0>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff f9bc 	bl	8001518 <HAL_InitTick>

  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40022000 	.word	0x40022000
 80021b0:	40021000 	.word	0x40021000
 80021b4:	08005c40 	.word	0x08005c40
 80021b8:	20000000 	.word	0x20000000
 80021bc:	20000004 	.word	0x20000004

080021c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b087      	sub	sp, #28
 80021c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	2300      	movs	r3, #0
 80021cc:	60bb      	str	r3, [r7, #8]
 80021ce:	2300      	movs	r3, #0
 80021d0:	617b      	str	r3, [r7, #20]
 80021d2:	2300      	movs	r3, #0
 80021d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021da:	4b1e      	ldr	r3, [pc, #120]	@ (8002254 <HAL_RCC_GetSysClockFreq+0x94>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f003 030c 	and.w	r3, r3, #12
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	d002      	beq.n	80021f0 <HAL_RCC_GetSysClockFreq+0x30>
 80021ea:	2b08      	cmp	r3, #8
 80021ec:	d003      	beq.n	80021f6 <HAL_RCC_GetSysClockFreq+0x36>
 80021ee:	e027      	b.n	8002240 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021f0:	4b19      	ldr	r3, [pc, #100]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x98>)
 80021f2:	613b      	str	r3, [r7, #16]
      break;
 80021f4:	e027      	b.n	8002246 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	0c9b      	lsrs	r3, r3, #18
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	4a17      	ldr	r2, [pc, #92]	@ (800225c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002200:	5cd3      	ldrb	r3, [r2, r3]
 8002202:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d010      	beq.n	8002230 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800220e:	4b11      	ldr	r3, [pc, #68]	@ (8002254 <HAL_RCC_GetSysClockFreq+0x94>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	0c5b      	lsrs	r3, r3, #17
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	4a11      	ldr	r2, [pc, #68]	@ (8002260 <HAL_RCC_GetSysClockFreq+0xa0>)
 800221a:	5cd3      	ldrb	r3, [r2, r3]
 800221c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a0d      	ldr	r2, [pc, #52]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x98>)
 8002222:	fb03 f202 	mul.w	r2, r3, r2
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	fbb2 f3f3 	udiv	r3, r2, r3
 800222c:	617b      	str	r3, [r7, #20]
 800222e:	e004      	b.n	800223a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a0c      	ldr	r2, [pc, #48]	@ (8002264 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002234:	fb02 f303 	mul.w	r3, r2, r3
 8002238:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	613b      	str	r3, [r7, #16]
      break;
 800223e:	e002      	b.n	8002246 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002240:	4b05      	ldr	r3, [pc, #20]	@ (8002258 <HAL_RCC_GetSysClockFreq+0x98>)
 8002242:	613b      	str	r3, [r7, #16]
      break;
 8002244:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002246:	693b      	ldr	r3, [r7, #16]
}
 8002248:	4618      	mov	r0, r3
 800224a:	371c      	adds	r7, #28
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	40021000 	.word	0x40021000
 8002258:	007a1200 	.word	0x007a1200
 800225c:	08005c58 	.word	0x08005c58
 8002260:	08005c68 	.word	0x08005c68
 8002264:	003d0900 	.word	0x003d0900

08002268 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800226c:	4b02      	ldr	r3, [pc, #8]	@ (8002278 <HAL_RCC_GetHCLKFreq+0x10>)
 800226e:	681b      	ldr	r3, [r3, #0]
}
 8002270:	4618      	mov	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr
 8002278:	20000000 	.word	0x20000000

0800227c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002280:	f7ff fff2 	bl	8002268 <HAL_RCC_GetHCLKFreq>
 8002284:	4602      	mov	r2, r0
 8002286:	4b05      	ldr	r3, [pc, #20]	@ (800229c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	0a1b      	lsrs	r3, r3, #8
 800228c:	f003 0307 	and.w	r3, r3, #7
 8002290:	4903      	ldr	r1, [pc, #12]	@ (80022a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002292:	5ccb      	ldrb	r3, [r1, r3]
 8002294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002298:	4618      	mov	r0, r3
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40021000 	.word	0x40021000
 80022a0:	08005c50 	.word	0x08005c50

080022a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022a8:	f7ff ffde 	bl	8002268 <HAL_RCC_GetHCLKFreq>
 80022ac:	4602      	mov	r2, r0
 80022ae:	4b05      	ldr	r3, [pc, #20]	@ (80022c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	0adb      	lsrs	r3, r3, #11
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	4903      	ldr	r1, [pc, #12]	@ (80022c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022ba:	5ccb      	ldrb	r3, [r1, r3]
 80022bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40021000 	.word	0x40021000
 80022c8:	08005c50 	.word	0x08005c50

080022cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002300 <RCC_Delay+0x34>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a0a      	ldr	r2, [pc, #40]	@ (8002304 <RCC_Delay+0x38>)
 80022da:	fba2 2303 	umull	r2, r3, r2, r3
 80022de:	0a5b      	lsrs	r3, r3, #9
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	fb02 f303 	mul.w	r3, r2, r3
 80022e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022e8:	bf00      	nop
  }
  while (Delay --);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	1e5a      	subs	r2, r3, #1
 80022ee:	60fa      	str	r2, [r7, #12]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1f9      	bne.n	80022e8 <RCC_Delay+0x1c>
}
 80022f4:	bf00      	nop
 80022f6:	bf00      	nop
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc80      	pop	{r7}
 80022fe:	4770      	bx	lr
 8002300:	20000000 	.word	0x20000000
 8002304:	10624dd3 	.word	0x10624dd3

08002308 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e076      	b.n	8002408 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231e:	2b00      	cmp	r3, #0
 8002320:	d108      	bne.n	8002334 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800232a:	d009      	beq.n	8002340 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	61da      	str	r2, [r3, #28]
 8002332:	e005      	b.n	8002340 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d106      	bne.n	8002360 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7fe ff16 	bl	800118c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2202      	movs	r2, #2
 8002364:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002376:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002388:	431a      	orrs	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	431a      	orrs	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023b0:	431a      	orrs	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023c4:	ea42 0103 	orr.w	r1, r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023cc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	0c1a      	lsrs	r2, r3, #16
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f002 0204 	and.w	r2, r2, #4
 80023e6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	69da      	ldr	r2, [r3, #28]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023f6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b08a      	sub	sp, #40	@ 0x28
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
 800241c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800241e:	2301      	movs	r3, #1
 8002420:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002422:	f7ff f8bb 	bl	800159c <HAL_GetTick>
 8002426:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800242e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002436:	887b      	ldrh	r3, [r7, #2]
 8002438:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800243a:	7ffb      	ldrb	r3, [r7, #31]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d00c      	beq.n	800245a <HAL_SPI_TransmitReceive+0x4a>
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002446:	d106      	bne.n	8002456 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d102      	bne.n	8002456 <HAL_SPI_TransmitReceive+0x46>
 8002450:	7ffb      	ldrb	r3, [r7, #31]
 8002452:	2b04      	cmp	r3, #4
 8002454:	d001      	beq.n	800245a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002456:	2302      	movs	r3, #2
 8002458:	e17f      	b.n	800275a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d005      	beq.n	800246c <HAL_SPI_TransmitReceive+0x5c>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d002      	beq.n	800246c <HAL_SPI_TransmitReceive+0x5c>
 8002466:	887b      	ldrh	r3, [r7, #2]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e174      	b.n	800275a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002476:	2b01      	cmp	r3, #1
 8002478:	d101      	bne.n	800247e <HAL_SPI_TransmitReceive+0x6e>
 800247a:	2302      	movs	r3, #2
 800247c:	e16d      	b.n	800275a <HAL_SPI_TransmitReceive+0x34a>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b04      	cmp	r3, #4
 8002490:	d003      	beq.n	800249a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2205      	movs	r2, #5
 8002496:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	887a      	ldrh	r2, [r7, #2]
 80024aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	887a      	ldrh	r2, [r7, #2]
 80024b0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	68ba      	ldr	r2, [r7, #8]
 80024b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	887a      	ldrh	r2, [r7, #2]
 80024bc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	887a      	ldrh	r2, [r7, #2]
 80024c2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024da:	2b40      	cmp	r3, #64	@ 0x40
 80024dc:	d007      	beq.n	80024ee <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80024f6:	d17e      	bne.n	80025f6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d002      	beq.n	8002506 <HAL_SPI_TransmitReceive+0xf6>
 8002500:	8afb      	ldrh	r3, [r7, #22]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d16c      	bne.n	80025e0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250a:	881a      	ldrh	r2, [r3, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002516:	1c9a      	adds	r2, r3, #2
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002520:	b29b      	uxth	r3, r3
 8002522:	3b01      	subs	r3, #1
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800252a:	e059      	b.n	80025e0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b02      	cmp	r3, #2
 8002538:	d11b      	bne.n	8002572 <HAL_SPI_TransmitReceive+0x162>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800253e:	b29b      	uxth	r3, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	d016      	beq.n	8002572 <HAL_SPI_TransmitReceive+0x162>
 8002544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002546:	2b01      	cmp	r3, #1
 8002548:	d113      	bne.n	8002572 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254e:	881a      	ldrh	r2, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255a:	1c9a      	adds	r2, r3, #2
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002564:	b29b      	uxth	r3, r3
 8002566:	3b01      	subs	r3, #1
 8002568:	b29a      	uxth	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800256e:	2300      	movs	r3, #0
 8002570:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b01      	cmp	r3, #1
 800257e:	d119      	bne.n	80025b4 <HAL_SPI_TransmitReceive+0x1a4>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002584:	b29b      	uxth	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d014      	beq.n	80025b4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68da      	ldr	r2, [r3, #12]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002594:	b292      	uxth	r2, r2
 8002596:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800259c:	1c9a      	adds	r2, r3, #2
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	3b01      	subs	r3, #1
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80025b0:	2301      	movs	r3, #1
 80025b2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80025b4:	f7fe fff2 	bl	800159c <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	6a3b      	ldr	r3, [r7, #32]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d80d      	bhi.n	80025e0 <HAL_SPI_TransmitReceive+0x1d0>
 80025c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ca:	d009      	beq.n	80025e0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e0bc      	b.n	800275a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1a0      	bne.n	800252c <HAL_SPI_TransmitReceive+0x11c>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d19b      	bne.n	800252c <HAL_SPI_TransmitReceive+0x11c>
 80025f4:	e082      	b.n	80026fc <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d002      	beq.n	8002604 <HAL_SPI_TransmitReceive+0x1f4>
 80025fe:	8afb      	ldrh	r3, [r7, #22]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d171      	bne.n	80026e8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	330c      	adds	r3, #12
 800260e:	7812      	ldrb	r2, [r2, #0]
 8002610:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002616:	1c5a      	adds	r2, r3, #1
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002620:	b29b      	uxth	r3, r3
 8002622:	3b01      	subs	r3, #1
 8002624:	b29a      	uxth	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800262a:	e05d      	b.n	80026e8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b02      	cmp	r3, #2
 8002638:	d11c      	bne.n	8002674 <HAL_SPI_TransmitReceive+0x264>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800263e:	b29b      	uxth	r3, r3
 8002640:	2b00      	cmp	r3, #0
 8002642:	d017      	beq.n	8002674 <HAL_SPI_TransmitReceive+0x264>
 8002644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002646:	2b01      	cmp	r3, #1
 8002648:	d114      	bne.n	8002674 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	330c      	adds	r3, #12
 8002654:	7812      	ldrb	r2, [r2, #0]
 8002656:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265c:	1c5a      	adds	r2, r3, #1
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002666:	b29b      	uxth	r3, r3
 8002668:	3b01      	subs	r3, #1
 800266a:	b29a      	uxth	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b01      	cmp	r3, #1
 8002680:	d119      	bne.n	80026b6 <HAL_SPI_TransmitReceive+0x2a6>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002686:	b29b      	uxth	r3, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	d014      	beq.n	80026b6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68da      	ldr	r2, [r3, #12]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800269e:	1c5a      	adds	r2, r3, #1
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	3b01      	subs	r3, #1
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80026b2:	2301      	movs	r3, #1
 80026b4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80026b6:	f7fe ff71 	bl	800159c <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d803      	bhi.n	80026ce <HAL_SPI_TransmitReceive+0x2be>
 80026c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026cc:	d102      	bne.n	80026d4 <HAL_SPI_TransmitReceive+0x2c4>
 80026ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d109      	bne.n	80026e8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e038      	b.n	800275a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d19c      	bne.n	800262c <HAL_SPI_TransmitReceive+0x21c>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d197      	bne.n	800262c <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026fc:	6a3a      	ldr	r2, [r7, #32]
 80026fe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f000 f8b7 	bl	8002874 <SPI_EndRxTxTransaction>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d008      	beq.n	800271e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2220      	movs	r2, #32
 8002710:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e01d      	b.n	800275a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10a      	bne.n	800273c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002726:	2300      	movs	r3, #0
 8002728:	613b      	str	r3, [r7, #16]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	613b      	str	r3, [r7, #16]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	613b      	str	r3, [r7, #16]
 800273a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e000      	b.n	800275a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002758:	2300      	movs	r3, #0
  }
}
 800275a:	4618      	mov	r0, r3
 800275c:	3728      	adds	r7, #40	@ 0x28
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
	...

08002764 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b088      	sub	sp, #32
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	603b      	str	r3, [r7, #0]
 8002770:	4613      	mov	r3, r2
 8002772:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002774:	f7fe ff12 	bl	800159c <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800277c:	1a9b      	subs	r3, r3, r2
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	4413      	add	r3, r2
 8002782:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002784:	f7fe ff0a 	bl	800159c <HAL_GetTick>
 8002788:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800278a:	4b39      	ldr	r3, [pc, #228]	@ (8002870 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	015b      	lsls	r3, r3, #5
 8002790:	0d1b      	lsrs	r3, r3, #20
 8002792:	69fa      	ldr	r2, [r7, #28]
 8002794:	fb02 f303 	mul.w	r3, r2, r3
 8002798:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800279a:	e054      	b.n	8002846 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a2:	d050      	beq.n	8002846 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80027a4:	f7fe fefa 	bl	800159c <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	69fa      	ldr	r2, [r7, #28]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d902      	bls.n	80027ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d13d      	bne.n	8002836 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80027c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80027d2:	d111      	bne.n	80027f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027dc:	d004      	beq.n	80027e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027e6:	d107      	bne.n	80027f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002800:	d10f      	bne.n	8002822 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002810:	601a      	str	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002820:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e017      	b.n	8002866 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	3b01      	subs	r3, #1
 8002844:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	4013      	ands	r3, r2
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	429a      	cmp	r2, r3
 8002854:	bf0c      	ite	eq
 8002856:	2301      	moveq	r3, #1
 8002858:	2300      	movne	r3, #0
 800285a:	b2db      	uxtb	r3, r3
 800285c:	461a      	mov	r2, r3
 800285e:	79fb      	ldrb	r3, [r7, #7]
 8002860:	429a      	cmp	r2, r3
 8002862:	d19b      	bne.n	800279c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3720      	adds	r7, #32
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20000000 	.word	0x20000000

08002874 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af02      	add	r7, sp, #8
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	9300      	str	r3, [sp, #0]
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	2201      	movs	r2, #1
 8002888:	2102      	movs	r1, #2
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f7ff ff6a 	bl	8002764 <SPI_WaitFlagStateUntilTimeout>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d007      	beq.n	80028a6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800289a:	f043 0220 	orr.w	r2, r3, #32
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e013      	b.n	80028ce <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	2200      	movs	r2, #0
 80028ae:	2180      	movs	r1, #128	@ 0x80
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f7ff ff57 	bl	8002764 <SPI_WaitFlagStateUntilTimeout>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d007      	beq.n	80028cc <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c0:	f043 0220 	orr.w	r2, r3, #32
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e000      	b.n	80028ce <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b082      	sub	sp, #8
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e042      	b.n	800296e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d106      	bne.n	8002902 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f7fe fc8f 	bl	8001220 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2224      	movs	r2, #36	@ 0x24
 8002906:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68da      	ldr	r2, [r3, #12]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002918:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 fa08 	bl	8002d30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	691a      	ldr	r2, [r3, #16]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800292e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	695a      	ldr	r2, [r3, #20]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800293e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68da      	ldr	r2, [r3, #12]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800294e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2220      	movs	r2, #32
 800295a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2220      	movs	r2, #32
 8002962:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b08a      	sub	sp, #40	@ 0x28
 800297a:	af02      	add	r7, sp, #8
 800297c:	60f8      	str	r0, [r7, #12]
 800297e:	60b9      	str	r1, [r7, #8]
 8002980:	603b      	str	r3, [r7, #0]
 8002982:	4613      	mov	r3, r2
 8002984:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002986:	2300      	movs	r3, #0
 8002988:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b20      	cmp	r3, #32
 8002994:	d175      	bne.n	8002a82 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d002      	beq.n	80029a2 <HAL_UART_Transmit+0x2c>
 800299c:	88fb      	ldrh	r3, [r7, #6]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e06e      	b.n	8002a84 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2221      	movs	r2, #33	@ 0x21
 80029b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029b4:	f7fe fdf2 	bl	800159c <HAL_GetTick>
 80029b8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	88fa      	ldrh	r2, [r7, #6]
 80029be:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	88fa      	ldrh	r2, [r7, #6]
 80029c4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029ce:	d108      	bne.n	80029e2 <HAL_UART_Transmit+0x6c>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d104      	bne.n	80029e2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80029d8:	2300      	movs	r3, #0
 80029da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	61bb      	str	r3, [r7, #24]
 80029e0:	e003      	b.n	80029ea <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029ea:	e02e      	b.n	8002a4a <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	9300      	str	r3, [sp, #0]
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	2200      	movs	r2, #0
 80029f4:	2180      	movs	r1, #128	@ 0x80
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	f000 f8df 	bl	8002bba <UART_WaitOnFlagUntilTimeout>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d005      	beq.n	8002a0e <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2220      	movs	r2, #32
 8002a06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e03a      	b.n	8002a84 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10b      	bne.n	8002a2c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	881b      	ldrh	r3, [r3, #0]
 8002a18:	461a      	mov	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a22:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	3302      	adds	r3, #2
 8002a28:	61bb      	str	r3, [r7, #24]
 8002a2a:	e007      	b.n	8002a3c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	781a      	ldrb	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	3b01      	subs	r3, #1
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1cb      	bne.n	80029ec <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	2140      	movs	r1, #64	@ 0x40
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 f8ab 	bl	8002bba <UART_WaitOnFlagUntilTimeout>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d005      	beq.n	8002a76 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e006      	b.n	8002a84 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	e000      	b.n	8002a84 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002a82:	2302      	movs	r3, #2
  }
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3720      	adds	r7, #32
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b08a      	sub	sp, #40	@ 0x28
 8002a90:	af02      	add	r7, sp, #8
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	603b      	str	r3, [r7, #0]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b20      	cmp	r3, #32
 8002aaa:	f040 8081 	bne.w	8002bb0 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d002      	beq.n	8002aba <HAL_UART_Receive+0x2e>
 8002ab4:	88fb      	ldrh	r3, [r7, #6]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e079      	b.n	8002bb2 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2222      	movs	r2, #34	@ 0x22
 8002ac8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ad2:	f7fe fd63 	bl	800159c <HAL_GetTick>
 8002ad6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	88fa      	ldrh	r2, [r7, #6]
 8002adc:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	88fa      	ldrh	r2, [r7, #6]
 8002ae2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002aec:	d108      	bne.n	8002b00 <HAL_UART_Receive+0x74>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d104      	bne.n	8002b00 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002af6:	2300      	movs	r3, #0
 8002af8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	61bb      	str	r3, [r7, #24]
 8002afe:	e003      	b.n	8002b08 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b04:	2300      	movs	r3, #0
 8002b06:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002b08:	e047      	b.n	8002b9a <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	2200      	movs	r2, #0
 8002b12:	2120      	movs	r1, #32
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 f850 	bl	8002bba <UART_WaitOnFlagUntilTimeout>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2220      	movs	r2, #32
 8002b24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e042      	b.n	8002bb2 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10c      	bne.n	8002b4c <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	3302      	adds	r3, #2
 8002b48:	61bb      	str	r3, [r7, #24]
 8002b4a:	e01f      	b.n	8002b8c <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b54:	d007      	beq.n	8002b66 <HAL_UART_Receive+0xda>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10a      	bne.n	8002b74 <HAL_UART_Receive+0xe8>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d106      	bne.n	8002b74 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	701a      	strb	r2, [r3, #0]
 8002b72:	e008      	b.n	8002b86 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	3b01      	subs	r3, #1
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1b2      	bne.n	8002b0a <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002bac:	2300      	movs	r3, #0
 8002bae:	e000      	b.n	8002bb2 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002bb0:	2302      	movs	r3, #2
  }
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3720      	adds	r7, #32
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b086      	sub	sp, #24
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	60f8      	str	r0, [r7, #12]
 8002bc2:	60b9      	str	r1, [r7, #8]
 8002bc4:	603b      	str	r3, [r7, #0]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bca:	e03b      	b.n	8002c44 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bcc:	6a3b      	ldr	r3, [r7, #32]
 8002bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd2:	d037      	beq.n	8002c44 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bd4:	f7fe fce2 	bl	800159c <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	6a3a      	ldr	r2, [r7, #32]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d302      	bcc.n	8002bea <UART_WaitOnFlagUntilTimeout+0x30>
 8002be4:	6a3b      	ldr	r3, [r7, #32]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e03a      	b.n	8002c64 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d023      	beq.n	8002c44 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	2b80      	cmp	r3, #128	@ 0x80
 8002c00:	d020      	beq.n	8002c44 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	2b40      	cmp	r3, #64	@ 0x40
 8002c06:	d01d      	beq.n	8002c44 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0308 	and.w	r3, r3, #8
 8002c12:	2b08      	cmp	r3, #8
 8002c14:	d116      	bne.n	8002c44 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002c16:	2300      	movs	r3, #0
 8002c18:	617b      	str	r3, [r7, #20]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	617b      	str	r3, [r7, #20]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	617b      	str	r3, [r7, #20]
 8002c2a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f000 f81d 	bl	8002c6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2208      	movs	r2, #8
 8002c36:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e00f      	b.n	8002c64 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	68ba      	ldr	r2, [r7, #8]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	bf0c      	ite	eq
 8002c54:	2301      	moveq	r3, #1
 8002c56:	2300      	movne	r3, #0
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	79fb      	ldrb	r3, [r7, #7]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d0b4      	beq.n	8002bcc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3718      	adds	r7, #24
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b095      	sub	sp, #84	@ 0x54
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	330c      	adds	r3, #12
 8002c7a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c7e:	e853 3f00 	ldrex	r3, [r3]
 8002c82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	330c      	adds	r3, #12
 8002c92:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c94:	643a      	str	r2, [r7, #64]	@ 0x40
 8002c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c98:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002c9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002c9c:	e841 2300 	strex	r3, r2, [r1]
 8002ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1e5      	bne.n	8002c74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	3314      	adds	r3, #20
 8002cae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb0:	6a3b      	ldr	r3, [r7, #32]
 8002cb2:	e853 3f00 	ldrex	r3, [r3]
 8002cb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	f023 0301 	bic.w	r3, r3, #1
 8002cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	3314      	adds	r3, #20
 8002cc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002cc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002cca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ccc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cd0:	e841 2300 	strex	r3, r2, [r1]
 8002cd4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1e5      	bne.n	8002ca8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d119      	bne.n	8002d18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	330c      	adds	r3, #12
 8002cea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	e853 3f00 	ldrex	r3, [r3]
 8002cf2:	60bb      	str	r3, [r7, #8]
   return(result);
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	f023 0310 	bic.w	r3, r3, #16
 8002cfa:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	330c      	adds	r3, #12
 8002d02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d04:	61ba      	str	r2, [r7, #24]
 8002d06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d08:	6979      	ldr	r1, [r7, #20]
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	e841 2300 	strex	r3, r2, [r1]
 8002d10:	613b      	str	r3, [r7, #16]
   return(result);
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1e5      	bne.n	8002ce4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002d26:	bf00      	nop
 8002d28:	3754      	adds	r7, #84	@ 0x54
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr

08002d30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68da      	ldr	r2, [r3, #12]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689a      	ldr	r2, [r3, #8]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002d6a:	f023 030c 	bic.w	r3, r3, #12
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	6812      	ldr	r2, [r2, #0]
 8002d72:	68b9      	ldr	r1, [r7, #8]
 8002d74:	430b      	orrs	r3, r1
 8002d76:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	699a      	ldr	r2, [r3, #24]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a2c      	ldr	r2, [pc, #176]	@ (8002e44 <UART_SetConfig+0x114>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d103      	bne.n	8002da0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d98:	f7ff fa84 	bl	80022a4 <HAL_RCC_GetPCLK2Freq>
 8002d9c:	60f8      	str	r0, [r7, #12]
 8002d9e:	e002      	b.n	8002da6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002da0:	f7ff fa6c 	bl	800227c <HAL_RCC_GetPCLK1Freq>
 8002da4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	4613      	mov	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4413      	add	r3, r2
 8002dae:	009a      	lsls	r2, r3, #2
 8002db0:	441a      	add	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dbc:	4a22      	ldr	r2, [pc, #136]	@ (8002e48 <UART_SetConfig+0x118>)
 8002dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc2:	095b      	lsrs	r3, r3, #5
 8002dc4:	0119      	lsls	r1, r3, #4
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	009a      	lsls	r2, r3, #2
 8002dd0:	441a      	add	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8002e48 <UART_SetConfig+0x118>)
 8002dde:	fba3 0302 	umull	r0, r3, r3, r2
 8002de2:	095b      	lsrs	r3, r3, #5
 8002de4:	2064      	movs	r0, #100	@ 0x64
 8002de6:	fb00 f303 	mul.w	r3, r0, r3
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	011b      	lsls	r3, r3, #4
 8002dee:	3332      	adds	r3, #50	@ 0x32
 8002df0:	4a15      	ldr	r2, [pc, #84]	@ (8002e48 <UART_SetConfig+0x118>)
 8002df2:	fba2 2303 	umull	r2, r3, r2, r3
 8002df6:	095b      	lsrs	r3, r3, #5
 8002df8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002dfc:	4419      	add	r1, r3
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	4613      	mov	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	009a      	lsls	r2, r3, #2
 8002e08:	441a      	add	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e14:	4b0c      	ldr	r3, [pc, #48]	@ (8002e48 <UART_SetConfig+0x118>)
 8002e16:	fba3 0302 	umull	r0, r3, r3, r2
 8002e1a:	095b      	lsrs	r3, r3, #5
 8002e1c:	2064      	movs	r0, #100	@ 0x64
 8002e1e:	fb00 f303 	mul.w	r3, r0, r3
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	3332      	adds	r3, #50	@ 0x32
 8002e28:	4a07      	ldr	r2, [pc, #28]	@ (8002e48 <UART_SetConfig+0x118>)
 8002e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2e:	095b      	lsrs	r3, r3, #5
 8002e30:	f003 020f 	and.w	r2, r3, #15
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	440a      	add	r2, r1
 8002e3a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002e3c:	bf00      	nop
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40013800 	.word	0x40013800
 8002e48:	51eb851f 	.word	0x51eb851f

08002e4c <__cvt>:
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e52:	461d      	mov	r5, r3
 8002e54:	bfbb      	ittet	lt
 8002e56:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8002e5a:	461d      	movlt	r5, r3
 8002e5c:	2300      	movge	r3, #0
 8002e5e:	232d      	movlt	r3, #45	@ 0x2d
 8002e60:	b088      	sub	sp, #32
 8002e62:	4614      	mov	r4, r2
 8002e64:	bfb8      	it	lt
 8002e66:	4614      	movlt	r4, r2
 8002e68:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8002e6a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8002e6c:	7013      	strb	r3, [r2, #0]
 8002e6e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8002e70:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8002e74:	f023 0820 	bic.w	r8, r3, #32
 8002e78:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002e7c:	d005      	beq.n	8002e8a <__cvt+0x3e>
 8002e7e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002e82:	d100      	bne.n	8002e86 <__cvt+0x3a>
 8002e84:	3601      	adds	r6, #1
 8002e86:	2302      	movs	r3, #2
 8002e88:	e000      	b.n	8002e8c <__cvt+0x40>
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	aa07      	add	r2, sp, #28
 8002e8e:	9204      	str	r2, [sp, #16]
 8002e90:	aa06      	add	r2, sp, #24
 8002e92:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002e96:	e9cd 3600 	strd	r3, r6, [sp]
 8002e9a:	4622      	mov	r2, r4
 8002e9c:	462b      	mov	r3, r5
 8002e9e:	f000 fe83 	bl	8003ba8 <_dtoa_r>
 8002ea2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002ea6:	4607      	mov	r7, r0
 8002ea8:	d119      	bne.n	8002ede <__cvt+0x92>
 8002eaa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8002eac:	07db      	lsls	r3, r3, #31
 8002eae:	d50e      	bpl.n	8002ece <__cvt+0x82>
 8002eb0:	eb00 0906 	add.w	r9, r0, r6
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	4620      	mov	r0, r4
 8002eba:	4629      	mov	r1, r5
 8002ebc:	f7fd fd74 	bl	80009a8 <__aeabi_dcmpeq>
 8002ec0:	b108      	cbz	r0, 8002ec6 <__cvt+0x7a>
 8002ec2:	f8cd 901c 	str.w	r9, [sp, #28]
 8002ec6:	2230      	movs	r2, #48	@ 0x30
 8002ec8:	9b07      	ldr	r3, [sp, #28]
 8002eca:	454b      	cmp	r3, r9
 8002ecc:	d31e      	bcc.n	8002f0c <__cvt+0xc0>
 8002ece:	4638      	mov	r0, r7
 8002ed0:	9b07      	ldr	r3, [sp, #28]
 8002ed2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8002ed4:	1bdb      	subs	r3, r3, r7
 8002ed6:	6013      	str	r3, [r2, #0]
 8002ed8:	b008      	add	sp, #32
 8002eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ede:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002ee2:	eb00 0906 	add.w	r9, r0, r6
 8002ee6:	d1e5      	bne.n	8002eb4 <__cvt+0x68>
 8002ee8:	7803      	ldrb	r3, [r0, #0]
 8002eea:	2b30      	cmp	r3, #48	@ 0x30
 8002eec:	d10a      	bne.n	8002f04 <__cvt+0xb8>
 8002eee:	2200      	movs	r2, #0
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	4620      	mov	r0, r4
 8002ef4:	4629      	mov	r1, r5
 8002ef6:	f7fd fd57 	bl	80009a8 <__aeabi_dcmpeq>
 8002efa:	b918      	cbnz	r0, 8002f04 <__cvt+0xb8>
 8002efc:	f1c6 0601 	rsb	r6, r6, #1
 8002f00:	f8ca 6000 	str.w	r6, [sl]
 8002f04:	f8da 3000 	ldr.w	r3, [sl]
 8002f08:	4499      	add	r9, r3
 8002f0a:	e7d3      	b.n	8002eb4 <__cvt+0x68>
 8002f0c:	1c59      	adds	r1, r3, #1
 8002f0e:	9107      	str	r1, [sp, #28]
 8002f10:	701a      	strb	r2, [r3, #0]
 8002f12:	e7d9      	b.n	8002ec8 <__cvt+0x7c>

08002f14 <__exponent>:
 8002f14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f16:	2900      	cmp	r1, #0
 8002f18:	bfb6      	itet	lt
 8002f1a:	232d      	movlt	r3, #45	@ 0x2d
 8002f1c:	232b      	movge	r3, #43	@ 0x2b
 8002f1e:	4249      	neglt	r1, r1
 8002f20:	2909      	cmp	r1, #9
 8002f22:	7002      	strb	r2, [r0, #0]
 8002f24:	7043      	strb	r3, [r0, #1]
 8002f26:	dd29      	ble.n	8002f7c <__exponent+0x68>
 8002f28:	f10d 0307 	add.w	r3, sp, #7
 8002f2c:	461d      	mov	r5, r3
 8002f2e:	270a      	movs	r7, #10
 8002f30:	fbb1 f6f7 	udiv	r6, r1, r7
 8002f34:	461a      	mov	r2, r3
 8002f36:	fb07 1416 	mls	r4, r7, r6, r1
 8002f3a:	3430      	adds	r4, #48	@ 0x30
 8002f3c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002f40:	460c      	mov	r4, r1
 8002f42:	2c63      	cmp	r4, #99	@ 0x63
 8002f44:	4631      	mov	r1, r6
 8002f46:	f103 33ff 	add.w	r3, r3, #4294967295
 8002f4a:	dcf1      	bgt.n	8002f30 <__exponent+0x1c>
 8002f4c:	3130      	adds	r1, #48	@ 0x30
 8002f4e:	1e94      	subs	r4, r2, #2
 8002f50:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002f54:	4623      	mov	r3, r4
 8002f56:	1c41      	adds	r1, r0, #1
 8002f58:	42ab      	cmp	r3, r5
 8002f5a:	d30a      	bcc.n	8002f72 <__exponent+0x5e>
 8002f5c:	f10d 0309 	add.w	r3, sp, #9
 8002f60:	1a9b      	subs	r3, r3, r2
 8002f62:	42ac      	cmp	r4, r5
 8002f64:	bf88      	it	hi
 8002f66:	2300      	movhi	r3, #0
 8002f68:	3302      	adds	r3, #2
 8002f6a:	4403      	add	r3, r0
 8002f6c:	1a18      	subs	r0, r3, r0
 8002f6e:	b003      	add	sp, #12
 8002f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f72:	f813 6b01 	ldrb.w	r6, [r3], #1
 8002f76:	f801 6f01 	strb.w	r6, [r1, #1]!
 8002f7a:	e7ed      	b.n	8002f58 <__exponent+0x44>
 8002f7c:	2330      	movs	r3, #48	@ 0x30
 8002f7e:	3130      	adds	r1, #48	@ 0x30
 8002f80:	7083      	strb	r3, [r0, #2]
 8002f82:	70c1      	strb	r1, [r0, #3]
 8002f84:	1d03      	adds	r3, r0, #4
 8002f86:	e7f1      	b.n	8002f6c <__exponent+0x58>

08002f88 <_printf_float>:
 8002f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f8c:	b091      	sub	sp, #68	@ 0x44
 8002f8e:	460c      	mov	r4, r1
 8002f90:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8002f94:	4616      	mov	r6, r2
 8002f96:	461f      	mov	r7, r3
 8002f98:	4605      	mov	r5, r0
 8002f9a:	f000 fcf5 	bl	8003988 <_localeconv_r>
 8002f9e:	6803      	ldr	r3, [r0, #0]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	9308      	str	r3, [sp, #32]
 8002fa4:	f7fd f8d4 	bl	8000150 <strlen>
 8002fa8:	2300      	movs	r3, #0
 8002faa:	930e      	str	r3, [sp, #56]	@ 0x38
 8002fac:	f8d8 3000 	ldr.w	r3, [r8]
 8002fb0:	9009      	str	r0, [sp, #36]	@ 0x24
 8002fb2:	3307      	adds	r3, #7
 8002fb4:	f023 0307 	bic.w	r3, r3, #7
 8002fb8:	f103 0208 	add.w	r2, r3, #8
 8002fbc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002fc0:	f8d4 b000 	ldr.w	fp, [r4]
 8002fc4:	f8c8 2000 	str.w	r2, [r8]
 8002fc8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002fcc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002fd0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002fd2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8002fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8002fda:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002fde:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8002fe2:	4b9c      	ldr	r3, [pc, #624]	@ (8003254 <_printf_float+0x2cc>)
 8002fe4:	f7fd fd12 	bl	8000a0c <__aeabi_dcmpun>
 8002fe8:	bb70      	cbnz	r0, 8003048 <_printf_float+0xc0>
 8002fea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002fee:	f04f 32ff 	mov.w	r2, #4294967295
 8002ff2:	4b98      	ldr	r3, [pc, #608]	@ (8003254 <_printf_float+0x2cc>)
 8002ff4:	f7fd fcec 	bl	80009d0 <__aeabi_dcmple>
 8002ff8:	bb30      	cbnz	r0, 8003048 <_printf_float+0xc0>
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	4640      	mov	r0, r8
 8003000:	4649      	mov	r1, r9
 8003002:	f7fd fcdb 	bl	80009bc <__aeabi_dcmplt>
 8003006:	b110      	cbz	r0, 800300e <_printf_float+0x86>
 8003008:	232d      	movs	r3, #45	@ 0x2d
 800300a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800300e:	4a92      	ldr	r2, [pc, #584]	@ (8003258 <_printf_float+0x2d0>)
 8003010:	4b92      	ldr	r3, [pc, #584]	@ (800325c <_printf_float+0x2d4>)
 8003012:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003016:	bf8c      	ite	hi
 8003018:	4690      	movhi	r8, r2
 800301a:	4698      	movls	r8, r3
 800301c:	2303      	movs	r3, #3
 800301e:	f04f 0900 	mov.w	r9, #0
 8003022:	6123      	str	r3, [r4, #16]
 8003024:	f02b 0304 	bic.w	r3, fp, #4
 8003028:	6023      	str	r3, [r4, #0]
 800302a:	4633      	mov	r3, r6
 800302c:	4621      	mov	r1, r4
 800302e:	4628      	mov	r0, r5
 8003030:	9700      	str	r7, [sp, #0]
 8003032:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003034:	f000 f9d4 	bl	80033e0 <_printf_common>
 8003038:	3001      	adds	r0, #1
 800303a:	f040 8090 	bne.w	800315e <_printf_float+0x1d6>
 800303e:	f04f 30ff 	mov.w	r0, #4294967295
 8003042:	b011      	add	sp, #68	@ 0x44
 8003044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003048:	4642      	mov	r2, r8
 800304a:	464b      	mov	r3, r9
 800304c:	4640      	mov	r0, r8
 800304e:	4649      	mov	r1, r9
 8003050:	f7fd fcdc 	bl	8000a0c <__aeabi_dcmpun>
 8003054:	b148      	cbz	r0, 800306a <_printf_float+0xe2>
 8003056:	464b      	mov	r3, r9
 8003058:	2b00      	cmp	r3, #0
 800305a:	bfb8      	it	lt
 800305c:	232d      	movlt	r3, #45	@ 0x2d
 800305e:	4a80      	ldr	r2, [pc, #512]	@ (8003260 <_printf_float+0x2d8>)
 8003060:	bfb8      	it	lt
 8003062:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003066:	4b7f      	ldr	r3, [pc, #508]	@ (8003264 <_printf_float+0x2dc>)
 8003068:	e7d3      	b.n	8003012 <_printf_float+0x8a>
 800306a:	6863      	ldr	r3, [r4, #4]
 800306c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003070:	1c5a      	adds	r2, r3, #1
 8003072:	d13f      	bne.n	80030f4 <_printf_float+0x16c>
 8003074:	2306      	movs	r3, #6
 8003076:	6063      	str	r3, [r4, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800307e:	6023      	str	r3, [r4, #0]
 8003080:	9206      	str	r2, [sp, #24]
 8003082:	aa0e      	add	r2, sp, #56	@ 0x38
 8003084:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003088:	aa0d      	add	r2, sp, #52	@ 0x34
 800308a:	9203      	str	r2, [sp, #12]
 800308c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003090:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003094:	6863      	ldr	r3, [r4, #4]
 8003096:	4642      	mov	r2, r8
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	4628      	mov	r0, r5
 800309c:	464b      	mov	r3, r9
 800309e:	910a      	str	r1, [sp, #40]	@ 0x28
 80030a0:	f7ff fed4 	bl	8002e4c <__cvt>
 80030a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80030a6:	4680      	mov	r8, r0
 80030a8:	2947      	cmp	r1, #71	@ 0x47
 80030aa:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80030ac:	d128      	bne.n	8003100 <_printf_float+0x178>
 80030ae:	1cc8      	adds	r0, r1, #3
 80030b0:	db02      	blt.n	80030b8 <_printf_float+0x130>
 80030b2:	6863      	ldr	r3, [r4, #4]
 80030b4:	4299      	cmp	r1, r3
 80030b6:	dd40      	ble.n	800313a <_printf_float+0x1b2>
 80030b8:	f1aa 0a02 	sub.w	sl, sl, #2
 80030bc:	fa5f fa8a 	uxtb.w	sl, sl
 80030c0:	4652      	mov	r2, sl
 80030c2:	3901      	subs	r1, #1
 80030c4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80030c8:	910d      	str	r1, [sp, #52]	@ 0x34
 80030ca:	f7ff ff23 	bl	8002f14 <__exponent>
 80030ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80030d0:	4681      	mov	r9, r0
 80030d2:	1813      	adds	r3, r2, r0
 80030d4:	2a01      	cmp	r2, #1
 80030d6:	6123      	str	r3, [r4, #16]
 80030d8:	dc02      	bgt.n	80030e0 <_printf_float+0x158>
 80030da:	6822      	ldr	r2, [r4, #0]
 80030dc:	07d2      	lsls	r2, r2, #31
 80030de:	d501      	bpl.n	80030e4 <_printf_float+0x15c>
 80030e0:	3301      	adds	r3, #1
 80030e2:	6123      	str	r3, [r4, #16]
 80030e4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d09e      	beq.n	800302a <_printf_float+0xa2>
 80030ec:	232d      	movs	r3, #45	@ 0x2d
 80030ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80030f2:	e79a      	b.n	800302a <_printf_float+0xa2>
 80030f4:	2947      	cmp	r1, #71	@ 0x47
 80030f6:	d1bf      	bne.n	8003078 <_printf_float+0xf0>
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1bd      	bne.n	8003078 <_printf_float+0xf0>
 80030fc:	2301      	movs	r3, #1
 80030fe:	e7ba      	b.n	8003076 <_printf_float+0xee>
 8003100:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003104:	d9dc      	bls.n	80030c0 <_printf_float+0x138>
 8003106:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800310a:	d118      	bne.n	800313e <_printf_float+0x1b6>
 800310c:	2900      	cmp	r1, #0
 800310e:	6863      	ldr	r3, [r4, #4]
 8003110:	dd0b      	ble.n	800312a <_printf_float+0x1a2>
 8003112:	6121      	str	r1, [r4, #16]
 8003114:	b913      	cbnz	r3, 800311c <_printf_float+0x194>
 8003116:	6822      	ldr	r2, [r4, #0]
 8003118:	07d0      	lsls	r0, r2, #31
 800311a:	d502      	bpl.n	8003122 <_printf_float+0x19a>
 800311c:	3301      	adds	r3, #1
 800311e:	440b      	add	r3, r1
 8003120:	6123      	str	r3, [r4, #16]
 8003122:	f04f 0900 	mov.w	r9, #0
 8003126:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003128:	e7dc      	b.n	80030e4 <_printf_float+0x15c>
 800312a:	b913      	cbnz	r3, 8003132 <_printf_float+0x1aa>
 800312c:	6822      	ldr	r2, [r4, #0]
 800312e:	07d2      	lsls	r2, r2, #31
 8003130:	d501      	bpl.n	8003136 <_printf_float+0x1ae>
 8003132:	3302      	adds	r3, #2
 8003134:	e7f4      	b.n	8003120 <_printf_float+0x198>
 8003136:	2301      	movs	r3, #1
 8003138:	e7f2      	b.n	8003120 <_printf_float+0x198>
 800313a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800313e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003140:	4299      	cmp	r1, r3
 8003142:	db05      	blt.n	8003150 <_printf_float+0x1c8>
 8003144:	6823      	ldr	r3, [r4, #0]
 8003146:	6121      	str	r1, [r4, #16]
 8003148:	07d8      	lsls	r0, r3, #31
 800314a:	d5ea      	bpl.n	8003122 <_printf_float+0x19a>
 800314c:	1c4b      	adds	r3, r1, #1
 800314e:	e7e7      	b.n	8003120 <_printf_float+0x198>
 8003150:	2900      	cmp	r1, #0
 8003152:	bfcc      	ite	gt
 8003154:	2201      	movgt	r2, #1
 8003156:	f1c1 0202 	rsble	r2, r1, #2
 800315a:	4413      	add	r3, r2
 800315c:	e7e0      	b.n	8003120 <_printf_float+0x198>
 800315e:	6823      	ldr	r3, [r4, #0]
 8003160:	055a      	lsls	r2, r3, #21
 8003162:	d407      	bmi.n	8003174 <_printf_float+0x1ec>
 8003164:	6923      	ldr	r3, [r4, #16]
 8003166:	4642      	mov	r2, r8
 8003168:	4631      	mov	r1, r6
 800316a:	4628      	mov	r0, r5
 800316c:	47b8      	blx	r7
 800316e:	3001      	adds	r0, #1
 8003170:	d12b      	bne.n	80031ca <_printf_float+0x242>
 8003172:	e764      	b.n	800303e <_printf_float+0xb6>
 8003174:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003178:	f240 80dc 	bls.w	8003334 <_printf_float+0x3ac>
 800317c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003180:	2200      	movs	r2, #0
 8003182:	2300      	movs	r3, #0
 8003184:	f7fd fc10 	bl	80009a8 <__aeabi_dcmpeq>
 8003188:	2800      	cmp	r0, #0
 800318a:	d033      	beq.n	80031f4 <_printf_float+0x26c>
 800318c:	2301      	movs	r3, #1
 800318e:	4631      	mov	r1, r6
 8003190:	4628      	mov	r0, r5
 8003192:	4a35      	ldr	r2, [pc, #212]	@ (8003268 <_printf_float+0x2e0>)
 8003194:	47b8      	blx	r7
 8003196:	3001      	adds	r0, #1
 8003198:	f43f af51 	beq.w	800303e <_printf_float+0xb6>
 800319c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80031a0:	4543      	cmp	r3, r8
 80031a2:	db02      	blt.n	80031aa <_printf_float+0x222>
 80031a4:	6823      	ldr	r3, [r4, #0]
 80031a6:	07d8      	lsls	r0, r3, #31
 80031a8:	d50f      	bpl.n	80031ca <_printf_float+0x242>
 80031aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80031ae:	4631      	mov	r1, r6
 80031b0:	4628      	mov	r0, r5
 80031b2:	47b8      	blx	r7
 80031b4:	3001      	adds	r0, #1
 80031b6:	f43f af42 	beq.w	800303e <_printf_float+0xb6>
 80031ba:	f04f 0900 	mov.w	r9, #0
 80031be:	f108 38ff 	add.w	r8, r8, #4294967295
 80031c2:	f104 0a1a 	add.w	sl, r4, #26
 80031c6:	45c8      	cmp	r8, r9
 80031c8:	dc09      	bgt.n	80031de <_printf_float+0x256>
 80031ca:	6823      	ldr	r3, [r4, #0]
 80031cc:	079b      	lsls	r3, r3, #30
 80031ce:	f100 8102 	bmi.w	80033d6 <_printf_float+0x44e>
 80031d2:	68e0      	ldr	r0, [r4, #12]
 80031d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80031d6:	4298      	cmp	r0, r3
 80031d8:	bfb8      	it	lt
 80031da:	4618      	movlt	r0, r3
 80031dc:	e731      	b.n	8003042 <_printf_float+0xba>
 80031de:	2301      	movs	r3, #1
 80031e0:	4652      	mov	r2, sl
 80031e2:	4631      	mov	r1, r6
 80031e4:	4628      	mov	r0, r5
 80031e6:	47b8      	blx	r7
 80031e8:	3001      	adds	r0, #1
 80031ea:	f43f af28 	beq.w	800303e <_printf_float+0xb6>
 80031ee:	f109 0901 	add.w	r9, r9, #1
 80031f2:	e7e8      	b.n	80031c6 <_printf_float+0x23e>
 80031f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	dc38      	bgt.n	800326c <_printf_float+0x2e4>
 80031fa:	2301      	movs	r3, #1
 80031fc:	4631      	mov	r1, r6
 80031fe:	4628      	mov	r0, r5
 8003200:	4a19      	ldr	r2, [pc, #100]	@ (8003268 <_printf_float+0x2e0>)
 8003202:	47b8      	blx	r7
 8003204:	3001      	adds	r0, #1
 8003206:	f43f af1a 	beq.w	800303e <_printf_float+0xb6>
 800320a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800320e:	ea59 0303 	orrs.w	r3, r9, r3
 8003212:	d102      	bne.n	800321a <_printf_float+0x292>
 8003214:	6823      	ldr	r3, [r4, #0]
 8003216:	07d9      	lsls	r1, r3, #31
 8003218:	d5d7      	bpl.n	80031ca <_printf_float+0x242>
 800321a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800321e:	4631      	mov	r1, r6
 8003220:	4628      	mov	r0, r5
 8003222:	47b8      	blx	r7
 8003224:	3001      	adds	r0, #1
 8003226:	f43f af0a 	beq.w	800303e <_printf_float+0xb6>
 800322a:	f04f 0a00 	mov.w	sl, #0
 800322e:	f104 0b1a 	add.w	fp, r4, #26
 8003232:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003234:	425b      	negs	r3, r3
 8003236:	4553      	cmp	r3, sl
 8003238:	dc01      	bgt.n	800323e <_printf_float+0x2b6>
 800323a:	464b      	mov	r3, r9
 800323c:	e793      	b.n	8003166 <_printf_float+0x1de>
 800323e:	2301      	movs	r3, #1
 8003240:	465a      	mov	r2, fp
 8003242:	4631      	mov	r1, r6
 8003244:	4628      	mov	r0, r5
 8003246:	47b8      	blx	r7
 8003248:	3001      	adds	r0, #1
 800324a:	f43f aef8 	beq.w	800303e <_printf_float+0xb6>
 800324e:	f10a 0a01 	add.w	sl, sl, #1
 8003252:	e7ee      	b.n	8003232 <_printf_float+0x2aa>
 8003254:	7fefffff 	.word	0x7fefffff
 8003258:	08005c6e 	.word	0x08005c6e
 800325c:	08005c6a 	.word	0x08005c6a
 8003260:	08005c76 	.word	0x08005c76
 8003264:	08005c72 	.word	0x08005c72
 8003268:	08005c7a 	.word	0x08005c7a
 800326c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800326e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003272:	4553      	cmp	r3, sl
 8003274:	bfa8      	it	ge
 8003276:	4653      	movge	r3, sl
 8003278:	2b00      	cmp	r3, #0
 800327a:	4699      	mov	r9, r3
 800327c:	dc36      	bgt.n	80032ec <_printf_float+0x364>
 800327e:	f04f 0b00 	mov.w	fp, #0
 8003282:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003286:	f104 021a 	add.w	r2, r4, #26
 800328a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800328c:	930a      	str	r3, [sp, #40]	@ 0x28
 800328e:	eba3 0309 	sub.w	r3, r3, r9
 8003292:	455b      	cmp	r3, fp
 8003294:	dc31      	bgt.n	80032fa <_printf_float+0x372>
 8003296:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003298:	459a      	cmp	sl, r3
 800329a:	dc3a      	bgt.n	8003312 <_printf_float+0x38a>
 800329c:	6823      	ldr	r3, [r4, #0]
 800329e:	07da      	lsls	r2, r3, #31
 80032a0:	d437      	bmi.n	8003312 <_printf_float+0x38a>
 80032a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80032a4:	ebaa 0903 	sub.w	r9, sl, r3
 80032a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80032aa:	ebaa 0303 	sub.w	r3, sl, r3
 80032ae:	4599      	cmp	r9, r3
 80032b0:	bfa8      	it	ge
 80032b2:	4699      	movge	r9, r3
 80032b4:	f1b9 0f00 	cmp.w	r9, #0
 80032b8:	dc33      	bgt.n	8003322 <_printf_float+0x39a>
 80032ba:	f04f 0800 	mov.w	r8, #0
 80032be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80032c2:	f104 0b1a 	add.w	fp, r4, #26
 80032c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80032c8:	ebaa 0303 	sub.w	r3, sl, r3
 80032cc:	eba3 0309 	sub.w	r3, r3, r9
 80032d0:	4543      	cmp	r3, r8
 80032d2:	f77f af7a 	ble.w	80031ca <_printf_float+0x242>
 80032d6:	2301      	movs	r3, #1
 80032d8:	465a      	mov	r2, fp
 80032da:	4631      	mov	r1, r6
 80032dc:	4628      	mov	r0, r5
 80032de:	47b8      	blx	r7
 80032e0:	3001      	adds	r0, #1
 80032e2:	f43f aeac 	beq.w	800303e <_printf_float+0xb6>
 80032e6:	f108 0801 	add.w	r8, r8, #1
 80032ea:	e7ec      	b.n	80032c6 <_printf_float+0x33e>
 80032ec:	4642      	mov	r2, r8
 80032ee:	4631      	mov	r1, r6
 80032f0:	4628      	mov	r0, r5
 80032f2:	47b8      	blx	r7
 80032f4:	3001      	adds	r0, #1
 80032f6:	d1c2      	bne.n	800327e <_printf_float+0x2f6>
 80032f8:	e6a1      	b.n	800303e <_printf_float+0xb6>
 80032fa:	2301      	movs	r3, #1
 80032fc:	4631      	mov	r1, r6
 80032fe:	4628      	mov	r0, r5
 8003300:	920a      	str	r2, [sp, #40]	@ 0x28
 8003302:	47b8      	blx	r7
 8003304:	3001      	adds	r0, #1
 8003306:	f43f ae9a 	beq.w	800303e <_printf_float+0xb6>
 800330a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800330c:	f10b 0b01 	add.w	fp, fp, #1
 8003310:	e7bb      	b.n	800328a <_printf_float+0x302>
 8003312:	4631      	mov	r1, r6
 8003314:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003318:	4628      	mov	r0, r5
 800331a:	47b8      	blx	r7
 800331c:	3001      	adds	r0, #1
 800331e:	d1c0      	bne.n	80032a2 <_printf_float+0x31a>
 8003320:	e68d      	b.n	800303e <_printf_float+0xb6>
 8003322:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003324:	464b      	mov	r3, r9
 8003326:	4631      	mov	r1, r6
 8003328:	4628      	mov	r0, r5
 800332a:	4442      	add	r2, r8
 800332c:	47b8      	blx	r7
 800332e:	3001      	adds	r0, #1
 8003330:	d1c3      	bne.n	80032ba <_printf_float+0x332>
 8003332:	e684      	b.n	800303e <_printf_float+0xb6>
 8003334:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003338:	f1ba 0f01 	cmp.w	sl, #1
 800333c:	dc01      	bgt.n	8003342 <_printf_float+0x3ba>
 800333e:	07db      	lsls	r3, r3, #31
 8003340:	d536      	bpl.n	80033b0 <_printf_float+0x428>
 8003342:	2301      	movs	r3, #1
 8003344:	4642      	mov	r2, r8
 8003346:	4631      	mov	r1, r6
 8003348:	4628      	mov	r0, r5
 800334a:	47b8      	blx	r7
 800334c:	3001      	adds	r0, #1
 800334e:	f43f ae76 	beq.w	800303e <_printf_float+0xb6>
 8003352:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003356:	4631      	mov	r1, r6
 8003358:	4628      	mov	r0, r5
 800335a:	47b8      	blx	r7
 800335c:	3001      	adds	r0, #1
 800335e:	f43f ae6e 	beq.w	800303e <_printf_float+0xb6>
 8003362:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003366:	2200      	movs	r2, #0
 8003368:	2300      	movs	r3, #0
 800336a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800336e:	f7fd fb1b 	bl	80009a8 <__aeabi_dcmpeq>
 8003372:	b9c0      	cbnz	r0, 80033a6 <_printf_float+0x41e>
 8003374:	4653      	mov	r3, sl
 8003376:	f108 0201 	add.w	r2, r8, #1
 800337a:	4631      	mov	r1, r6
 800337c:	4628      	mov	r0, r5
 800337e:	47b8      	blx	r7
 8003380:	3001      	adds	r0, #1
 8003382:	d10c      	bne.n	800339e <_printf_float+0x416>
 8003384:	e65b      	b.n	800303e <_printf_float+0xb6>
 8003386:	2301      	movs	r3, #1
 8003388:	465a      	mov	r2, fp
 800338a:	4631      	mov	r1, r6
 800338c:	4628      	mov	r0, r5
 800338e:	47b8      	blx	r7
 8003390:	3001      	adds	r0, #1
 8003392:	f43f ae54 	beq.w	800303e <_printf_float+0xb6>
 8003396:	f108 0801 	add.w	r8, r8, #1
 800339a:	45d0      	cmp	r8, sl
 800339c:	dbf3      	blt.n	8003386 <_printf_float+0x3fe>
 800339e:	464b      	mov	r3, r9
 80033a0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80033a4:	e6e0      	b.n	8003168 <_printf_float+0x1e0>
 80033a6:	f04f 0800 	mov.w	r8, #0
 80033aa:	f104 0b1a 	add.w	fp, r4, #26
 80033ae:	e7f4      	b.n	800339a <_printf_float+0x412>
 80033b0:	2301      	movs	r3, #1
 80033b2:	4642      	mov	r2, r8
 80033b4:	e7e1      	b.n	800337a <_printf_float+0x3f2>
 80033b6:	2301      	movs	r3, #1
 80033b8:	464a      	mov	r2, r9
 80033ba:	4631      	mov	r1, r6
 80033bc:	4628      	mov	r0, r5
 80033be:	47b8      	blx	r7
 80033c0:	3001      	adds	r0, #1
 80033c2:	f43f ae3c 	beq.w	800303e <_printf_float+0xb6>
 80033c6:	f108 0801 	add.w	r8, r8, #1
 80033ca:	68e3      	ldr	r3, [r4, #12]
 80033cc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80033ce:	1a5b      	subs	r3, r3, r1
 80033d0:	4543      	cmp	r3, r8
 80033d2:	dcf0      	bgt.n	80033b6 <_printf_float+0x42e>
 80033d4:	e6fd      	b.n	80031d2 <_printf_float+0x24a>
 80033d6:	f04f 0800 	mov.w	r8, #0
 80033da:	f104 0919 	add.w	r9, r4, #25
 80033de:	e7f4      	b.n	80033ca <_printf_float+0x442>

080033e0 <_printf_common>:
 80033e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033e4:	4616      	mov	r6, r2
 80033e6:	4698      	mov	r8, r3
 80033e8:	688a      	ldr	r2, [r1, #8]
 80033ea:	690b      	ldr	r3, [r1, #16]
 80033ec:	4607      	mov	r7, r0
 80033ee:	4293      	cmp	r3, r2
 80033f0:	bfb8      	it	lt
 80033f2:	4613      	movlt	r3, r2
 80033f4:	6033      	str	r3, [r6, #0]
 80033f6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80033fa:	460c      	mov	r4, r1
 80033fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003400:	b10a      	cbz	r2, 8003406 <_printf_common+0x26>
 8003402:	3301      	adds	r3, #1
 8003404:	6033      	str	r3, [r6, #0]
 8003406:	6823      	ldr	r3, [r4, #0]
 8003408:	0699      	lsls	r1, r3, #26
 800340a:	bf42      	ittt	mi
 800340c:	6833      	ldrmi	r3, [r6, #0]
 800340e:	3302      	addmi	r3, #2
 8003410:	6033      	strmi	r3, [r6, #0]
 8003412:	6825      	ldr	r5, [r4, #0]
 8003414:	f015 0506 	ands.w	r5, r5, #6
 8003418:	d106      	bne.n	8003428 <_printf_common+0x48>
 800341a:	f104 0a19 	add.w	sl, r4, #25
 800341e:	68e3      	ldr	r3, [r4, #12]
 8003420:	6832      	ldr	r2, [r6, #0]
 8003422:	1a9b      	subs	r3, r3, r2
 8003424:	42ab      	cmp	r3, r5
 8003426:	dc2b      	bgt.n	8003480 <_printf_common+0xa0>
 8003428:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800342c:	6822      	ldr	r2, [r4, #0]
 800342e:	3b00      	subs	r3, #0
 8003430:	bf18      	it	ne
 8003432:	2301      	movne	r3, #1
 8003434:	0692      	lsls	r2, r2, #26
 8003436:	d430      	bmi.n	800349a <_printf_common+0xba>
 8003438:	4641      	mov	r1, r8
 800343a:	4638      	mov	r0, r7
 800343c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003440:	47c8      	blx	r9
 8003442:	3001      	adds	r0, #1
 8003444:	d023      	beq.n	800348e <_printf_common+0xae>
 8003446:	6823      	ldr	r3, [r4, #0]
 8003448:	6922      	ldr	r2, [r4, #16]
 800344a:	f003 0306 	and.w	r3, r3, #6
 800344e:	2b04      	cmp	r3, #4
 8003450:	bf14      	ite	ne
 8003452:	2500      	movne	r5, #0
 8003454:	6833      	ldreq	r3, [r6, #0]
 8003456:	f04f 0600 	mov.w	r6, #0
 800345a:	bf08      	it	eq
 800345c:	68e5      	ldreq	r5, [r4, #12]
 800345e:	f104 041a 	add.w	r4, r4, #26
 8003462:	bf08      	it	eq
 8003464:	1aed      	subeq	r5, r5, r3
 8003466:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800346a:	bf08      	it	eq
 800346c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003470:	4293      	cmp	r3, r2
 8003472:	bfc4      	itt	gt
 8003474:	1a9b      	subgt	r3, r3, r2
 8003476:	18ed      	addgt	r5, r5, r3
 8003478:	42b5      	cmp	r5, r6
 800347a:	d11a      	bne.n	80034b2 <_printf_common+0xd2>
 800347c:	2000      	movs	r0, #0
 800347e:	e008      	b.n	8003492 <_printf_common+0xb2>
 8003480:	2301      	movs	r3, #1
 8003482:	4652      	mov	r2, sl
 8003484:	4641      	mov	r1, r8
 8003486:	4638      	mov	r0, r7
 8003488:	47c8      	blx	r9
 800348a:	3001      	adds	r0, #1
 800348c:	d103      	bne.n	8003496 <_printf_common+0xb6>
 800348e:	f04f 30ff 	mov.w	r0, #4294967295
 8003492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003496:	3501      	adds	r5, #1
 8003498:	e7c1      	b.n	800341e <_printf_common+0x3e>
 800349a:	2030      	movs	r0, #48	@ 0x30
 800349c:	18e1      	adds	r1, r4, r3
 800349e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80034a2:	1c5a      	adds	r2, r3, #1
 80034a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80034a8:	4422      	add	r2, r4
 80034aa:	3302      	adds	r3, #2
 80034ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80034b0:	e7c2      	b.n	8003438 <_printf_common+0x58>
 80034b2:	2301      	movs	r3, #1
 80034b4:	4622      	mov	r2, r4
 80034b6:	4641      	mov	r1, r8
 80034b8:	4638      	mov	r0, r7
 80034ba:	47c8      	blx	r9
 80034bc:	3001      	adds	r0, #1
 80034be:	d0e6      	beq.n	800348e <_printf_common+0xae>
 80034c0:	3601      	adds	r6, #1
 80034c2:	e7d9      	b.n	8003478 <_printf_common+0x98>

080034c4 <_printf_i>:
 80034c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034c8:	7e0f      	ldrb	r7, [r1, #24]
 80034ca:	4691      	mov	r9, r2
 80034cc:	2f78      	cmp	r7, #120	@ 0x78
 80034ce:	4680      	mov	r8, r0
 80034d0:	460c      	mov	r4, r1
 80034d2:	469a      	mov	sl, r3
 80034d4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80034d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80034da:	d807      	bhi.n	80034ec <_printf_i+0x28>
 80034dc:	2f62      	cmp	r7, #98	@ 0x62
 80034de:	d80a      	bhi.n	80034f6 <_printf_i+0x32>
 80034e0:	2f00      	cmp	r7, #0
 80034e2:	f000 80d1 	beq.w	8003688 <_printf_i+0x1c4>
 80034e6:	2f58      	cmp	r7, #88	@ 0x58
 80034e8:	f000 80b8 	beq.w	800365c <_printf_i+0x198>
 80034ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80034f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80034f4:	e03a      	b.n	800356c <_printf_i+0xa8>
 80034f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80034fa:	2b15      	cmp	r3, #21
 80034fc:	d8f6      	bhi.n	80034ec <_printf_i+0x28>
 80034fe:	a101      	add	r1, pc, #4	@ (adr r1, 8003504 <_printf_i+0x40>)
 8003500:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003504:	0800355d 	.word	0x0800355d
 8003508:	08003571 	.word	0x08003571
 800350c:	080034ed 	.word	0x080034ed
 8003510:	080034ed 	.word	0x080034ed
 8003514:	080034ed 	.word	0x080034ed
 8003518:	080034ed 	.word	0x080034ed
 800351c:	08003571 	.word	0x08003571
 8003520:	080034ed 	.word	0x080034ed
 8003524:	080034ed 	.word	0x080034ed
 8003528:	080034ed 	.word	0x080034ed
 800352c:	080034ed 	.word	0x080034ed
 8003530:	0800366f 	.word	0x0800366f
 8003534:	0800359b 	.word	0x0800359b
 8003538:	08003629 	.word	0x08003629
 800353c:	080034ed 	.word	0x080034ed
 8003540:	080034ed 	.word	0x080034ed
 8003544:	08003691 	.word	0x08003691
 8003548:	080034ed 	.word	0x080034ed
 800354c:	0800359b 	.word	0x0800359b
 8003550:	080034ed 	.word	0x080034ed
 8003554:	080034ed 	.word	0x080034ed
 8003558:	08003631 	.word	0x08003631
 800355c:	6833      	ldr	r3, [r6, #0]
 800355e:	1d1a      	adds	r2, r3, #4
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6032      	str	r2, [r6, #0]
 8003564:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003568:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800356c:	2301      	movs	r3, #1
 800356e:	e09c      	b.n	80036aa <_printf_i+0x1e6>
 8003570:	6833      	ldr	r3, [r6, #0]
 8003572:	6820      	ldr	r0, [r4, #0]
 8003574:	1d19      	adds	r1, r3, #4
 8003576:	6031      	str	r1, [r6, #0]
 8003578:	0606      	lsls	r6, r0, #24
 800357a:	d501      	bpl.n	8003580 <_printf_i+0xbc>
 800357c:	681d      	ldr	r5, [r3, #0]
 800357e:	e003      	b.n	8003588 <_printf_i+0xc4>
 8003580:	0645      	lsls	r5, r0, #25
 8003582:	d5fb      	bpl.n	800357c <_printf_i+0xb8>
 8003584:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003588:	2d00      	cmp	r5, #0
 800358a:	da03      	bge.n	8003594 <_printf_i+0xd0>
 800358c:	232d      	movs	r3, #45	@ 0x2d
 800358e:	426d      	negs	r5, r5
 8003590:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003594:	230a      	movs	r3, #10
 8003596:	4858      	ldr	r0, [pc, #352]	@ (80036f8 <_printf_i+0x234>)
 8003598:	e011      	b.n	80035be <_printf_i+0xfa>
 800359a:	6821      	ldr	r1, [r4, #0]
 800359c:	6833      	ldr	r3, [r6, #0]
 800359e:	0608      	lsls	r0, r1, #24
 80035a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80035a4:	d402      	bmi.n	80035ac <_printf_i+0xe8>
 80035a6:	0649      	lsls	r1, r1, #25
 80035a8:	bf48      	it	mi
 80035aa:	b2ad      	uxthmi	r5, r5
 80035ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80035ae:	6033      	str	r3, [r6, #0]
 80035b0:	bf14      	ite	ne
 80035b2:	230a      	movne	r3, #10
 80035b4:	2308      	moveq	r3, #8
 80035b6:	4850      	ldr	r0, [pc, #320]	@ (80036f8 <_printf_i+0x234>)
 80035b8:	2100      	movs	r1, #0
 80035ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80035be:	6866      	ldr	r6, [r4, #4]
 80035c0:	2e00      	cmp	r6, #0
 80035c2:	60a6      	str	r6, [r4, #8]
 80035c4:	db05      	blt.n	80035d2 <_printf_i+0x10e>
 80035c6:	6821      	ldr	r1, [r4, #0]
 80035c8:	432e      	orrs	r6, r5
 80035ca:	f021 0104 	bic.w	r1, r1, #4
 80035ce:	6021      	str	r1, [r4, #0]
 80035d0:	d04b      	beq.n	800366a <_printf_i+0x1a6>
 80035d2:	4616      	mov	r6, r2
 80035d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80035d8:	fb03 5711 	mls	r7, r3, r1, r5
 80035dc:	5dc7      	ldrb	r7, [r0, r7]
 80035de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80035e2:	462f      	mov	r7, r5
 80035e4:	42bb      	cmp	r3, r7
 80035e6:	460d      	mov	r5, r1
 80035e8:	d9f4      	bls.n	80035d4 <_printf_i+0x110>
 80035ea:	2b08      	cmp	r3, #8
 80035ec:	d10b      	bne.n	8003606 <_printf_i+0x142>
 80035ee:	6823      	ldr	r3, [r4, #0]
 80035f0:	07df      	lsls	r7, r3, #31
 80035f2:	d508      	bpl.n	8003606 <_printf_i+0x142>
 80035f4:	6923      	ldr	r3, [r4, #16]
 80035f6:	6861      	ldr	r1, [r4, #4]
 80035f8:	4299      	cmp	r1, r3
 80035fa:	bfde      	ittt	le
 80035fc:	2330      	movle	r3, #48	@ 0x30
 80035fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003602:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003606:	1b92      	subs	r2, r2, r6
 8003608:	6122      	str	r2, [r4, #16]
 800360a:	464b      	mov	r3, r9
 800360c:	4621      	mov	r1, r4
 800360e:	4640      	mov	r0, r8
 8003610:	f8cd a000 	str.w	sl, [sp]
 8003614:	aa03      	add	r2, sp, #12
 8003616:	f7ff fee3 	bl	80033e0 <_printf_common>
 800361a:	3001      	adds	r0, #1
 800361c:	d14a      	bne.n	80036b4 <_printf_i+0x1f0>
 800361e:	f04f 30ff 	mov.w	r0, #4294967295
 8003622:	b004      	add	sp, #16
 8003624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003628:	6823      	ldr	r3, [r4, #0]
 800362a:	f043 0320 	orr.w	r3, r3, #32
 800362e:	6023      	str	r3, [r4, #0]
 8003630:	2778      	movs	r7, #120	@ 0x78
 8003632:	4832      	ldr	r0, [pc, #200]	@ (80036fc <_printf_i+0x238>)
 8003634:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003638:	6823      	ldr	r3, [r4, #0]
 800363a:	6831      	ldr	r1, [r6, #0]
 800363c:	061f      	lsls	r7, r3, #24
 800363e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003642:	d402      	bmi.n	800364a <_printf_i+0x186>
 8003644:	065f      	lsls	r7, r3, #25
 8003646:	bf48      	it	mi
 8003648:	b2ad      	uxthmi	r5, r5
 800364a:	6031      	str	r1, [r6, #0]
 800364c:	07d9      	lsls	r1, r3, #31
 800364e:	bf44      	itt	mi
 8003650:	f043 0320 	orrmi.w	r3, r3, #32
 8003654:	6023      	strmi	r3, [r4, #0]
 8003656:	b11d      	cbz	r5, 8003660 <_printf_i+0x19c>
 8003658:	2310      	movs	r3, #16
 800365a:	e7ad      	b.n	80035b8 <_printf_i+0xf4>
 800365c:	4826      	ldr	r0, [pc, #152]	@ (80036f8 <_printf_i+0x234>)
 800365e:	e7e9      	b.n	8003634 <_printf_i+0x170>
 8003660:	6823      	ldr	r3, [r4, #0]
 8003662:	f023 0320 	bic.w	r3, r3, #32
 8003666:	6023      	str	r3, [r4, #0]
 8003668:	e7f6      	b.n	8003658 <_printf_i+0x194>
 800366a:	4616      	mov	r6, r2
 800366c:	e7bd      	b.n	80035ea <_printf_i+0x126>
 800366e:	6833      	ldr	r3, [r6, #0]
 8003670:	6825      	ldr	r5, [r4, #0]
 8003672:	1d18      	adds	r0, r3, #4
 8003674:	6961      	ldr	r1, [r4, #20]
 8003676:	6030      	str	r0, [r6, #0]
 8003678:	062e      	lsls	r6, r5, #24
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	d501      	bpl.n	8003682 <_printf_i+0x1be>
 800367e:	6019      	str	r1, [r3, #0]
 8003680:	e002      	b.n	8003688 <_printf_i+0x1c4>
 8003682:	0668      	lsls	r0, r5, #25
 8003684:	d5fb      	bpl.n	800367e <_printf_i+0x1ba>
 8003686:	8019      	strh	r1, [r3, #0]
 8003688:	2300      	movs	r3, #0
 800368a:	4616      	mov	r6, r2
 800368c:	6123      	str	r3, [r4, #16]
 800368e:	e7bc      	b.n	800360a <_printf_i+0x146>
 8003690:	6833      	ldr	r3, [r6, #0]
 8003692:	2100      	movs	r1, #0
 8003694:	1d1a      	adds	r2, r3, #4
 8003696:	6032      	str	r2, [r6, #0]
 8003698:	681e      	ldr	r6, [r3, #0]
 800369a:	6862      	ldr	r2, [r4, #4]
 800369c:	4630      	mov	r0, r6
 800369e:	f000 f9ea 	bl	8003a76 <memchr>
 80036a2:	b108      	cbz	r0, 80036a8 <_printf_i+0x1e4>
 80036a4:	1b80      	subs	r0, r0, r6
 80036a6:	6060      	str	r0, [r4, #4]
 80036a8:	6863      	ldr	r3, [r4, #4]
 80036aa:	6123      	str	r3, [r4, #16]
 80036ac:	2300      	movs	r3, #0
 80036ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036b2:	e7aa      	b.n	800360a <_printf_i+0x146>
 80036b4:	4632      	mov	r2, r6
 80036b6:	4649      	mov	r1, r9
 80036b8:	4640      	mov	r0, r8
 80036ba:	6923      	ldr	r3, [r4, #16]
 80036bc:	47d0      	blx	sl
 80036be:	3001      	adds	r0, #1
 80036c0:	d0ad      	beq.n	800361e <_printf_i+0x15a>
 80036c2:	6823      	ldr	r3, [r4, #0]
 80036c4:	079b      	lsls	r3, r3, #30
 80036c6:	d413      	bmi.n	80036f0 <_printf_i+0x22c>
 80036c8:	68e0      	ldr	r0, [r4, #12]
 80036ca:	9b03      	ldr	r3, [sp, #12]
 80036cc:	4298      	cmp	r0, r3
 80036ce:	bfb8      	it	lt
 80036d0:	4618      	movlt	r0, r3
 80036d2:	e7a6      	b.n	8003622 <_printf_i+0x15e>
 80036d4:	2301      	movs	r3, #1
 80036d6:	4632      	mov	r2, r6
 80036d8:	4649      	mov	r1, r9
 80036da:	4640      	mov	r0, r8
 80036dc:	47d0      	blx	sl
 80036de:	3001      	adds	r0, #1
 80036e0:	d09d      	beq.n	800361e <_printf_i+0x15a>
 80036e2:	3501      	adds	r5, #1
 80036e4:	68e3      	ldr	r3, [r4, #12]
 80036e6:	9903      	ldr	r1, [sp, #12]
 80036e8:	1a5b      	subs	r3, r3, r1
 80036ea:	42ab      	cmp	r3, r5
 80036ec:	dcf2      	bgt.n	80036d4 <_printf_i+0x210>
 80036ee:	e7eb      	b.n	80036c8 <_printf_i+0x204>
 80036f0:	2500      	movs	r5, #0
 80036f2:	f104 0619 	add.w	r6, r4, #25
 80036f6:	e7f5      	b.n	80036e4 <_printf_i+0x220>
 80036f8:	08005c7c 	.word	0x08005c7c
 80036fc:	08005c8d 	.word	0x08005c8d

08003700 <std>:
 8003700:	2300      	movs	r3, #0
 8003702:	b510      	push	{r4, lr}
 8003704:	4604      	mov	r4, r0
 8003706:	e9c0 3300 	strd	r3, r3, [r0]
 800370a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800370e:	6083      	str	r3, [r0, #8]
 8003710:	8181      	strh	r1, [r0, #12]
 8003712:	6643      	str	r3, [r0, #100]	@ 0x64
 8003714:	81c2      	strh	r2, [r0, #14]
 8003716:	6183      	str	r3, [r0, #24]
 8003718:	4619      	mov	r1, r3
 800371a:	2208      	movs	r2, #8
 800371c:	305c      	adds	r0, #92	@ 0x5c
 800371e:	f000 f92a 	bl	8003976 <memset>
 8003722:	4b0d      	ldr	r3, [pc, #52]	@ (8003758 <std+0x58>)
 8003724:	6224      	str	r4, [r4, #32]
 8003726:	6263      	str	r3, [r4, #36]	@ 0x24
 8003728:	4b0c      	ldr	r3, [pc, #48]	@ (800375c <std+0x5c>)
 800372a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800372c:	4b0c      	ldr	r3, [pc, #48]	@ (8003760 <std+0x60>)
 800372e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003730:	4b0c      	ldr	r3, [pc, #48]	@ (8003764 <std+0x64>)
 8003732:	6323      	str	r3, [r4, #48]	@ 0x30
 8003734:	4b0c      	ldr	r3, [pc, #48]	@ (8003768 <std+0x68>)
 8003736:	429c      	cmp	r4, r3
 8003738:	d006      	beq.n	8003748 <std+0x48>
 800373a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800373e:	4294      	cmp	r4, r2
 8003740:	d002      	beq.n	8003748 <std+0x48>
 8003742:	33d0      	adds	r3, #208	@ 0xd0
 8003744:	429c      	cmp	r4, r3
 8003746:	d105      	bne.n	8003754 <std+0x54>
 8003748:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800374c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003750:	f000 b98e 	b.w	8003a70 <__retarget_lock_init_recursive>
 8003754:	bd10      	pop	{r4, pc}
 8003756:	bf00      	nop
 8003758:	080038f1 	.word	0x080038f1
 800375c:	08003913 	.word	0x08003913
 8003760:	0800394b 	.word	0x0800394b
 8003764:	0800396f 	.word	0x0800396f
 8003768:	2000037c 	.word	0x2000037c

0800376c <stdio_exit_handler>:
 800376c:	4a02      	ldr	r2, [pc, #8]	@ (8003778 <stdio_exit_handler+0xc>)
 800376e:	4903      	ldr	r1, [pc, #12]	@ (800377c <stdio_exit_handler+0x10>)
 8003770:	4803      	ldr	r0, [pc, #12]	@ (8003780 <stdio_exit_handler+0x14>)
 8003772:	f000 b869 	b.w	8003848 <_fwalk_sglue>
 8003776:	bf00      	nop
 8003778:	2000000c 	.word	0x2000000c
 800377c:	080053f1 	.word	0x080053f1
 8003780:	2000001c 	.word	0x2000001c

08003784 <cleanup_stdio>:
 8003784:	6841      	ldr	r1, [r0, #4]
 8003786:	4b0c      	ldr	r3, [pc, #48]	@ (80037b8 <cleanup_stdio+0x34>)
 8003788:	b510      	push	{r4, lr}
 800378a:	4299      	cmp	r1, r3
 800378c:	4604      	mov	r4, r0
 800378e:	d001      	beq.n	8003794 <cleanup_stdio+0x10>
 8003790:	f001 fe2e 	bl	80053f0 <_fflush_r>
 8003794:	68a1      	ldr	r1, [r4, #8]
 8003796:	4b09      	ldr	r3, [pc, #36]	@ (80037bc <cleanup_stdio+0x38>)
 8003798:	4299      	cmp	r1, r3
 800379a:	d002      	beq.n	80037a2 <cleanup_stdio+0x1e>
 800379c:	4620      	mov	r0, r4
 800379e:	f001 fe27 	bl	80053f0 <_fflush_r>
 80037a2:	68e1      	ldr	r1, [r4, #12]
 80037a4:	4b06      	ldr	r3, [pc, #24]	@ (80037c0 <cleanup_stdio+0x3c>)
 80037a6:	4299      	cmp	r1, r3
 80037a8:	d004      	beq.n	80037b4 <cleanup_stdio+0x30>
 80037aa:	4620      	mov	r0, r4
 80037ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037b0:	f001 be1e 	b.w	80053f0 <_fflush_r>
 80037b4:	bd10      	pop	{r4, pc}
 80037b6:	bf00      	nop
 80037b8:	2000037c 	.word	0x2000037c
 80037bc:	200003e4 	.word	0x200003e4
 80037c0:	2000044c 	.word	0x2000044c

080037c4 <global_stdio_init.part.0>:
 80037c4:	b510      	push	{r4, lr}
 80037c6:	4b0b      	ldr	r3, [pc, #44]	@ (80037f4 <global_stdio_init.part.0+0x30>)
 80037c8:	4c0b      	ldr	r4, [pc, #44]	@ (80037f8 <global_stdio_init.part.0+0x34>)
 80037ca:	4a0c      	ldr	r2, [pc, #48]	@ (80037fc <global_stdio_init.part.0+0x38>)
 80037cc:	4620      	mov	r0, r4
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	2104      	movs	r1, #4
 80037d2:	2200      	movs	r2, #0
 80037d4:	f7ff ff94 	bl	8003700 <std>
 80037d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80037dc:	2201      	movs	r2, #1
 80037de:	2109      	movs	r1, #9
 80037e0:	f7ff ff8e 	bl	8003700 <std>
 80037e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80037e8:	2202      	movs	r2, #2
 80037ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037ee:	2112      	movs	r1, #18
 80037f0:	f7ff bf86 	b.w	8003700 <std>
 80037f4:	200004b4 	.word	0x200004b4
 80037f8:	2000037c 	.word	0x2000037c
 80037fc:	0800376d 	.word	0x0800376d

08003800 <__sfp_lock_acquire>:
 8003800:	4801      	ldr	r0, [pc, #4]	@ (8003808 <__sfp_lock_acquire+0x8>)
 8003802:	f000 b936 	b.w	8003a72 <__retarget_lock_acquire_recursive>
 8003806:	bf00      	nop
 8003808:	200004bd 	.word	0x200004bd

0800380c <__sfp_lock_release>:
 800380c:	4801      	ldr	r0, [pc, #4]	@ (8003814 <__sfp_lock_release+0x8>)
 800380e:	f000 b931 	b.w	8003a74 <__retarget_lock_release_recursive>
 8003812:	bf00      	nop
 8003814:	200004bd 	.word	0x200004bd

08003818 <__sinit>:
 8003818:	b510      	push	{r4, lr}
 800381a:	4604      	mov	r4, r0
 800381c:	f7ff fff0 	bl	8003800 <__sfp_lock_acquire>
 8003820:	6a23      	ldr	r3, [r4, #32]
 8003822:	b11b      	cbz	r3, 800382c <__sinit+0x14>
 8003824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003828:	f7ff bff0 	b.w	800380c <__sfp_lock_release>
 800382c:	4b04      	ldr	r3, [pc, #16]	@ (8003840 <__sinit+0x28>)
 800382e:	6223      	str	r3, [r4, #32]
 8003830:	4b04      	ldr	r3, [pc, #16]	@ (8003844 <__sinit+0x2c>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1f5      	bne.n	8003824 <__sinit+0xc>
 8003838:	f7ff ffc4 	bl	80037c4 <global_stdio_init.part.0>
 800383c:	e7f2      	b.n	8003824 <__sinit+0xc>
 800383e:	bf00      	nop
 8003840:	08003785 	.word	0x08003785
 8003844:	200004b4 	.word	0x200004b4

08003848 <_fwalk_sglue>:
 8003848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800384c:	4607      	mov	r7, r0
 800384e:	4688      	mov	r8, r1
 8003850:	4614      	mov	r4, r2
 8003852:	2600      	movs	r6, #0
 8003854:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003858:	f1b9 0901 	subs.w	r9, r9, #1
 800385c:	d505      	bpl.n	800386a <_fwalk_sglue+0x22>
 800385e:	6824      	ldr	r4, [r4, #0]
 8003860:	2c00      	cmp	r4, #0
 8003862:	d1f7      	bne.n	8003854 <_fwalk_sglue+0xc>
 8003864:	4630      	mov	r0, r6
 8003866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800386a:	89ab      	ldrh	r3, [r5, #12]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d907      	bls.n	8003880 <_fwalk_sglue+0x38>
 8003870:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003874:	3301      	adds	r3, #1
 8003876:	d003      	beq.n	8003880 <_fwalk_sglue+0x38>
 8003878:	4629      	mov	r1, r5
 800387a:	4638      	mov	r0, r7
 800387c:	47c0      	blx	r8
 800387e:	4306      	orrs	r6, r0
 8003880:	3568      	adds	r5, #104	@ 0x68
 8003882:	e7e9      	b.n	8003858 <_fwalk_sglue+0x10>

08003884 <sniprintf>:
 8003884:	b40c      	push	{r2, r3}
 8003886:	b530      	push	{r4, r5, lr}
 8003888:	4b18      	ldr	r3, [pc, #96]	@ (80038ec <sniprintf+0x68>)
 800388a:	1e0c      	subs	r4, r1, #0
 800388c:	681d      	ldr	r5, [r3, #0]
 800388e:	b09d      	sub	sp, #116	@ 0x74
 8003890:	da08      	bge.n	80038a4 <sniprintf+0x20>
 8003892:	238b      	movs	r3, #139	@ 0x8b
 8003894:	f04f 30ff 	mov.w	r0, #4294967295
 8003898:	602b      	str	r3, [r5, #0]
 800389a:	b01d      	add	sp, #116	@ 0x74
 800389c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80038a0:	b002      	add	sp, #8
 80038a2:	4770      	bx	lr
 80038a4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80038a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80038ac:	f04f 0300 	mov.w	r3, #0
 80038b0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80038b2:	bf0c      	ite	eq
 80038b4:	4623      	moveq	r3, r4
 80038b6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80038ba:	9304      	str	r3, [sp, #16]
 80038bc:	9307      	str	r3, [sp, #28]
 80038be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80038c2:	9002      	str	r0, [sp, #8]
 80038c4:	9006      	str	r0, [sp, #24]
 80038c6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80038ca:	4628      	mov	r0, r5
 80038cc:	ab21      	add	r3, sp, #132	@ 0x84
 80038ce:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80038d0:	a902      	add	r1, sp, #8
 80038d2:	9301      	str	r3, [sp, #4]
 80038d4:	f001 fc10 	bl	80050f8 <_svfiprintf_r>
 80038d8:	1c43      	adds	r3, r0, #1
 80038da:	bfbc      	itt	lt
 80038dc:	238b      	movlt	r3, #139	@ 0x8b
 80038de:	602b      	strlt	r3, [r5, #0]
 80038e0:	2c00      	cmp	r4, #0
 80038e2:	d0da      	beq.n	800389a <sniprintf+0x16>
 80038e4:	2200      	movs	r2, #0
 80038e6:	9b02      	ldr	r3, [sp, #8]
 80038e8:	701a      	strb	r2, [r3, #0]
 80038ea:	e7d6      	b.n	800389a <sniprintf+0x16>
 80038ec:	20000018 	.word	0x20000018

080038f0 <__sread>:
 80038f0:	b510      	push	{r4, lr}
 80038f2:	460c      	mov	r4, r1
 80038f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038f8:	f000 f86c 	bl	80039d4 <_read_r>
 80038fc:	2800      	cmp	r0, #0
 80038fe:	bfab      	itete	ge
 8003900:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003902:	89a3      	ldrhlt	r3, [r4, #12]
 8003904:	181b      	addge	r3, r3, r0
 8003906:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800390a:	bfac      	ite	ge
 800390c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800390e:	81a3      	strhlt	r3, [r4, #12]
 8003910:	bd10      	pop	{r4, pc}

08003912 <__swrite>:
 8003912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003916:	461f      	mov	r7, r3
 8003918:	898b      	ldrh	r3, [r1, #12]
 800391a:	4605      	mov	r5, r0
 800391c:	05db      	lsls	r3, r3, #23
 800391e:	460c      	mov	r4, r1
 8003920:	4616      	mov	r6, r2
 8003922:	d505      	bpl.n	8003930 <__swrite+0x1e>
 8003924:	2302      	movs	r3, #2
 8003926:	2200      	movs	r2, #0
 8003928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800392c:	f000 f840 	bl	80039b0 <_lseek_r>
 8003930:	89a3      	ldrh	r3, [r4, #12]
 8003932:	4632      	mov	r2, r6
 8003934:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003938:	81a3      	strh	r3, [r4, #12]
 800393a:	4628      	mov	r0, r5
 800393c:	463b      	mov	r3, r7
 800393e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003942:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003946:	f000 b857 	b.w	80039f8 <_write_r>

0800394a <__sseek>:
 800394a:	b510      	push	{r4, lr}
 800394c:	460c      	mov	r4, r1
 800394e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003952:	f000 f82d 	bl	80039b0 <_lseek_r>
 8003956:	1c43      	adds	r3, r0, #1
 8003958:	89a3      	ldrh	r3, [r4, #12]
 800395a:	bf15      	itete	ne
 800395c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800395e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003962:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003966:	81a3      	strheq	r3, [r4, #12]
 8003968:	bf18      	it	ne
 800396a:	81a3      	strhne	r3, [r4, #12]
 800396c:	bd10      	pop	{r4, pc}

0800396e <__sclose>:
 800396e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003972:	f000 b80d 	b.w	8003990 <_close_r>

08003976 <memset>:
 8003976:	4603      	mov	r3, r0
 8003978:	4402      	add	r2, r0
 800397a:	4293      	cmp	r3, r2
 800397c:	d100      	bne.n	8003980 <memset+0xa>
 800397e:	4770      	bx	lr
 8003980:	f803 1b01 	strb.w	r1, [r3], #1
 8003984:	e7f9      	b.n	800397a <memset+0x4>
	...

08003988 <_localeconv_r>:
 8003988:	4800      	ldr	r0, [pc, #0]	@ (800398c <_localeconv_r+0x4>)
 800398a:	4770      	bx	lr
 800398c:	20000158 	.word	0x20000158

08003990 <_close_r>:
 8003990:	b538      	push	{r3, r4, r5, lr}
 8003992:	2300      	movs	r3, #0
 8003994:	4d05      	ldr	r5, [pc, #20]	@ (80039ac <_close_r+0x1c>)
 8003996:	4604      	mov	r4, r0
 8003998:	4608      	mov	r0, r1
 800399a:	602b      	str	r3, [r5, #0]
 800399c:	f7fd fd13 	bl	80013c6 <_close>
 80039a0:	1c43      	adds	r3, r0, #1
 80039a2:	d102      	bne.n	80039aa <_close_r+0x1a>
 80039a4:	682b      	ldr	r3, [r5, #0]
 80039a6:	b103      	cbz	r3, 80039aa <_close_r+0x1a>
 80039a8:	6023      	str	r3, [r4, #0]
 80039aa:	bd38      	pop	{r3, r4, r5, pc}
 80039ac:	200004b8 	.word	0x200004b8

080039b0 <_lseek_r>:
 80039b0:	b538      	push	{r3, r4, r5, lr}
 80039b2:	4604      	mov	r4, r0
 80039b4:	4608      	mov	r0, r1
 80039b6:	4611      	mov	r1, r2
 80039b8:	2200      	movs	r2, #0
 80039ba:	4d05      	ldr	r5, [pc, #20]	@ (80039d0 <_lseek_r+0x20>)
 80039bc:	602a      	str	r2, [r5, #0]
 80039be:	461a      	mov	r2, r3
 80039c0:	f7fd fd25 	bl	800140e <_lseek>
 80039c4:	1c43      	adds	r3, r0, #1
 80039c6:	d102      	bne.n	80039ce <_lseek_r+0x1e>
 80039c8:	682b      	ldr	r3, [r5, #0]
 80039ca:	b103      	cbz	r3, 80039ce <_lseek_r+0x1e>
 80039cc:	6023      	str	r3, [r4, #0]
 80039ce:	bd38      	pop	{r3, r4, r5, pc}
 80039d0:	200004b8 	.word	0x200004b8

080039d4 <_read_r>:
 80039d4:	b538      	push	{r3, r4, r5, lr}
 80039d6:	4604      	mov	r4, r0
 80039d8:	4608      	mov	r0, r1
 80039da:	4611      	mov	r1, r2
 80039dc:	2200      	movs	r2, #0
 80039de:	4d05      	ldr	r5, [pc, #20]	@ (80039f4 <_read_r+0x20>)
 80039e0:	602a      	str	r2, [r5, #0]
 80039e2:	461a      	mov	r2, r3
 80039e4:	f7fd fcb6 	bl	8001354 <_read>
 80039e8:	1c43      	adds	r3, r0, #1
 80039ea:	d102      	bne.n	80039f2 <_read_r+0x1e>
 80039ec:	682b      	ldr	r3, [r5, #0]
 80039ee:	b103      	cbz	r3, 80039f2 <_read_r+0x1e>
 80039f0:	6023      	str	r3, [r4, #0]
 80039f2:	bd38      	pop	{r3, r4, r5, pc}
 80039f4:	200004b8 	.word	0x200004b8

080039f8 <_write_r>:
 80039f8:	b538      	push	{r3, r4, r5, lr}
 80039fa:	4604      	mov	r4, r0
 80039fc:	4608      	mov	r0, r1
 80039fe:	4611      	mov	r1, r2
 8003a00:	2200      	movs	r2, #0
 8003a02:	4d05      	ldr	r5, [pc, #20]	@ (8003a18 <_write_r+0x20>)
 8003a04:	602a      	str	r2, [r5, #0]
 8003a06:	461a      	mov	r2, r3
 8003a08:	f7fd fcc1 	bl	800138e <_write>
 8003a0c:	1c43      	adds	r3, r0, #1
 8003a0e:	d102      	bne.n	8003a16 <_write_r+0x1e>
 8003a10:	682b      	ldr	r3, [r5, #0]
 8003a12:	b103      	cbz	r3, 8003a16 <_write_r+0x1e>
 8003a14:	6023      	str	r3, [r4, #0]
 8003a16:	bd38      	pop	{r3, r4, r5, pc}
 8003a18:	200004b8 	.word	0x200004b8

08003a1c <__errno>:
 8003a1c:	4b01      	ldr	r3, [pc, #4]	@ (8003a24 <__errno+0x8>)
 8003a1e:	6818      	ldr	r0, [r3, #0]
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	20000018 	.word	0x20000018

08003a28 <__libc_init_array>:
 8003a28:	b570      	push	{r4, r5, r6, lr}
 8003a2a:	2600      	movs	r6, #0
 8003a2c:	4d0c      	ldr	r5, [pc, #48]	@ (8003a60 <__libc_init_array+0x38>)
 8003a2e:	4c0d      	ldr	r4, [pc, #52]	@ (8003a64 <__libc_init_array+0x3c>)
 8003a30:	1b64      	subs	r4, r4, r5
 8003a32:	10a4      	asrs	r4, r4, #2
 8003a34:	42a6      	cmp	r6, r4
 8003a36:	d109      	bne.n	8003a4c <__libc_init_array+0x24>
 8003a38:	f002 f8bc 	bl	8005bb4 <_init>
 8003a3c:	2600      	movs	r6, #0
 8003a3e:	4d0a      	ldr	r5, [pc, #40]	@ (8003a68 <__libc_init_array+0x40>)
 8003a40:	4c0a      	ldr	r4, [pc, #40]	@ (8003a6c <__libc_init_array+0x44>)
 8003a42:	1b64      	subs	r4, r4, r5
 8003a44:	10a4      	asrs	r4, r4, #2
 8003a46:	42a6      	cmp	r6, r4
 8003a48:	d105      	bne.n	8003a56 <__libc_init_array+0x2e>
 8003a4a:	bd70      	pop	{r4, r5, r6, pc}
 8003a4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a50:	4798      	blx	r3
 8003a52:	3601      	adds	r6, #1
 8003a54:	e7ee      	b.n	8003a34 <__libc_init_array+0xc>
 8003a56:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a5a:	4798      	blx	r3
 8003a5c:	3601      	adds	r6, #1
 8003a5e:	e7f2      	b.n	8003a46 <__libc_init_array+0x1e>
 8003a60:	08005fe4 	.word	0x08005fe4
 8003a64:	08005fe4 	.word	0x08005fe4
 8003a68:	08005fe4 	.word	0x08005fe4
 8003a6c:	08005fe8 	.word	0x08005fe8

08003a70 <__retarget_lock_init_recursive>:
 8003a70:	4770      	bx	lr

08003a72 <__retarget_lock_acquire_recursive>:
 8003a72:	4770      	bx	lr

08003a74 <__retarget_lock_release_recursive>:
 8003a74:	4770      	bx	lr

08003a76 <memchr>:
 8003a76:	4603      	mov	r3, r0
 8003a78:	b510      	push	{r4, lr}
 8003a7a:	b2c9      	uxtb	r1, r1
 8003a7c:	4402      	add	r2, r0
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	4618      	mov	r0, r3
 8003a82:	d101      	bne.n	8003a88 <memchr+0x12>
 8003a84:	2000      	movs	r0, #0
 8003a86:	e003      	b.n	8003a90 <memchr+0x1a>
 8003a88:	7804      	ldrb	r4, [r0, #0]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	428c      	cmp	r4, r1
 8003a8e:	d1f6      	bne.n	8003a7e <memchr+0x8>
 8003a90:	bd10      	pop	{r4, pc}

08003a92 <quorem>:
 8003a92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a96:	6903      	ldr	r3, [r0, #16]
 8003a98:	690c      	ldr	r4, [r1, #16]
 8003a9a:	4607      	mov	r7, r0
 8003a9c:	42a3      	cmp	r3, r4
 8003a9e:	db7e      	blt.n	8003b9e <quorem+0x10c>
 8003aa0:	3c01      	subs	r4, #1
 8003aa2:	00a3      	lsls	r3, r4, #2
 8003aa4:	f100 0514 	add.w	r5, r0, #20
 8003aa8:	f101 0814 	add.w	r8, r1, #20
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003ab2:	9301      	str	r3, [sp, #4]
 8003ab4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003ab8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003abc:	3301      	adds	r3, #1
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	fbb2 f6f3 	udiv	r6, r2, r3
 8003ac4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003ac8:	d32e      	bcc.n	8003b28 <quorem+0x96>
 8003aca:	f04f 0a00 	mov.w	sl, #0
 8003ace:	46c4      	mov	ip, r8
 8003ad0:	46ae      	mov	lr, r5
 8003ad2:	46d3      	mov	fp, sl
 8003ad4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003ad8:	b298      	uxth	r0, r3
 8003ada:	fb06 a000 	mla	r0, r6, r0, sl
 8003ade:	0c1b      	lsrs	r3, r3, #16
 8003ae0:	0c02      	lsrs	r2, r0, #16
 8003ae2:	fb06 2303 	mla	r3, r6, r3, r2
 8003ae6:	f8de 2000 	ldr.w	r2, [lr]
 8003aea:	b280      	uxth	r0, r0
 8003aec:	b292      	uxth	r2, r2
 8003aee:	1a12      	subs	r2, r2, r0
 8003af0:	445a      	add	r2, fp
 8003af2:	f8de 0000 	ldr.w	r0, [lr]
 8003af6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003b00:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003b04:	b292      	uxth	r2, r2
 8003b06:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003b0a:	45e1      	cmp	r9, ip
 8003b0c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003b10:	f84e 2b04 	str.w	r2, [lr], #4
 8003b14:	d2de      	bcs.n	8003ad4 <quorem+0x42>
 8003b16:	9b00      	ldr	r3, [sp, #0]
 8003b18:	58eb      	ldr	r3, [r5, r3]
 8003b1a:	b92b      	cbnz	r3, 8003b28 <quorem+0x96>
 8003b1c:	9b01      	ldr	r3, [sp, #4]
 8003b1e:	3b04      	subs	r3, #4
 8003b20:	429d      	cmp	r5, r3
 8003b22:	461a      	mov	r2, r3
 8003b24:	d32f      	bcc.n	8003b86 <quorem+0xf4>
 8003b26:	613c      	str	r4, [r7, #16]
 8003b28:	4638      	mov	r0, r7
 8003b2a:	f001 f981 	bl	8004e30 <__mcmp>
 8003b2e:	2800      	cmp	r0, #0
 8003b30:	db25      	blt.n	8003b7e <quorem+0xec>
 8003b32:	4629      	mov	r1, r5
 8003b34:	2000      	movs	r0, #0
 8003b36:	f858 2b04 	ldr.w	r2, [r8], #4
 8003b3a:	f8d1 c000 	ldr.w	ip, [r1]
 8003b3e:	fa1f fe82 	uxth.w	lr, r2
 8003b42:	fa1f f38c 	uxth.w	r3, ip
 8003b46:	eba3 030e 	sub.w	r3, r3, lr
 8003b4a:	4403      	add	r3, r0
 8003b4c:	0c12      	lsrs	r2, r2, #16
 8003b4e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003b52:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003b5c:	45c1      	cmp	r9, r8
 8003b5e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003b62:	f841 3b04 	str.w	r3, [r1], #4
 8003b66:	d2e6      	bcs.n	8003b36 <quorem+0xa4>
 8003b68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003b6c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003b70:	b922      	cbnz	r2, 8003b7c <quorem+0xea>
 8003b72:	3b04      	subs	r3, #4
 8003b74:	429d      	cmp	r5, r3
 8003b76:	461a      	mov	r2, r3
 8003b78:	d30b      	bcc.n	8003b92 <quorem+0x100>
 8003b7a:	613c      	str	r4, [r7, #16]
 8003b7c:	3601      	adds	r6, #1
 8003b7e:	4630      	mov	r0, r6
 8003b80:	b003      	add	sp, #12
 8003b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b86:	6812      	ldr	r2, [r2, #0]
 8003b88:	3b04      	subs	r3, #4
 8003b8a:	2a00      	cmp	r2, #0
 8003b8c:	d1cb      	bne.n	8003b26 <quorem+0x94>
 8003b8e:	3c01      	subs	r4, #1
 8003b90:	e7c6      	b.n	8003b20 <quorem+0x8e>
 8003b92:	6812      	ldr	r2, [r2, #0]
 8003b94:	3b04      	subs	r3, #4
 8003b96:	2a00      	cmp	r2, #0
 8003b98:	d1ef      	bne.n	8003b7a <quorem+0xe8>
 8003b9a:	3c01      	subs	r4, #1
 8003b9c:	e7ea      	b.n	8003b74 <quorem+0xe2>
 8003b9e:	2000      	movs	r0, #0
 8003ba0:	e7ee      	b.n	8003b80 <quorem+0xee>
 8003ba2:	0000      	movs	r0, r0
 8003ba4:	0000      	movs	r0, r0
	...

08003ba8 <_dtoa_r>:
 8003ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bac:	4614      	mov	r4, r2
 8003bae:	461d      	mov	r5, r3
 8003bb0:	69c7      	ldr	r7, [r0, #28]
 8003bb2:	b097      	sub	sp, #92	@ 0x5c
 8003bb4:	4681      	mov	r9, r0
 8003bb6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003bba:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8003bbc:	b97f      	cbnz	r7, 8003bde <_dtoa_r+0x36>
 8003bbe:	2010      	movs	r0, #16
 8003bc0:	f000 fe0e 	bl	80047e0 <malloc>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	f8c9 001c 	str.w	r0, [r9, #28]
 8003bca:	b920      	cbnz	r0, 8003bd6 <_dtoa_r+0x2e>
 8003bcc:	21ef      	movs	r1, #239	@ 0xef
 8003bce:	4bac      	ldr	r3, [pc, #688]	@ (8003e80 <_dtoa_r+0x2d8>)
 8003bd0:	48ac      	ldr	r0, [pc, #688]	@ (8003e84 <_dtoa_r+0x2dc>)
 8003bd2:	f001 fc6d 	bl	80054b0 <__assert_func>
 8003bd6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003bda:	6007      	str	r7, [r0, #0]
 8003bdc:	60c7      	str	r7, [r0, #12]
 8003bde:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003be2:	6819      	ldr	r1, [r3, #0]
 8003be4:	b159      	cbz	r1, 8003bfe <_dtoa_r+0x56>
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	2301      	movs	r3, #1
 8003bea:	4093      	lsls	r3, r2
 8003bec:	604a      	str	r2, [r1, #4]
 8003bee:	608b      	str	r3, [r1, #8]
 8003bf0:	4648      	mov	r0, r9
 8003bf2:	f000 feeb 	bl	80049cc <_Bfree>
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	1e2b      	subs	r3, r5, #0
 8003c00:	bfaf      	iteee	ge
 8003c02:	2300      	movge	r3, #0
 8003c04:	2201      	movlt	r2, #1
 8003c06:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003c0a:	9307      	strlt	r3, [sp, #28]
 8003c0c:	bfa8      	it	ge
 8003c0e:	6033      	strge	r3, [r6, #0]
 8003c10:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8003c14:	4b9c      	ldr	r3, [pc, #624]	@ (8003e88 <_dtoa_r+0x2e0>)
 8003c16:	bfb8      	it	lt
 8003c18:	6032      	strlt	r2, [r6, #0]
 8003c1a:	ea33 0308 	bics.w	r3, r3, r8
 8003c1e:	d112      	bne.n	8003c46 <_dtoa_r+0x9e>
 8003c20:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003c24:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003c26:	6013      	str	r3, [r2, #0]
 8003c28:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8003c2c:	4323      	orrs	r3, r4
 8003c2e:	f000 855e 	beq.w	80046ee <_dtoa_r+0xb46>
 8003c32:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003c34:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8003e8c <_dtoa_r+0x2e4>
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 8560 	beq.w	80046fe <_dtoa_r+0xb56>
 8003c3e:	f10a 0303 	add.w	r3, sl, #3
 8003c42:	f000 bd5a 	b.w	80046fa <_dtoa_r+0xb52>
 8003c46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003c4a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8003c4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003c52:	2200      	movs	r2, #0
 8003c54:	2300      	movs	r3, #0
 8003c56:	f7fc fea7 	bl	80009a8 <__aeabi_dcmpeq>
 8003c5a:	4607      	mov	r7, r0
 8003c5c:	b158      	cbz	r0, 8003c76 <_dtoa_r+0xce>
 8003c5e:	2301      	movs	r3, #1
 8003c60:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003c62:	6013      	str	r3, [r2, #0]
 8003c64:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003c66:	b113      	cbz	r3, 8003c6e <_dtoa_r+0xc6>
 8003c68:	4b89      	ldr	r3, [pc, #548]	@ (8003e90 <_dtoa_r+0x2e8>)
 8003c6a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8003c6c:	6013      	str	r3, [r2, #0]
 8003c6e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8003e94 <_dtoa_r+0x2ec>
 8003c72:	f000 bd44 	b.w	80046fe <_dtoa_r+0xb56>
 8003c76:	ab14      	add	r3, sp, #80	@ 0x50
 8003c78:	9301      	str	r3, [sp, #4]
 8003c7a:	ab15      	add	r3, sp, #84	@ 0x54
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	4648      	mov	r0, r9
 8003c80:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8003c84:	f001 f984 	bl	8004f90 <__d2b>
 8003c88:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8003c8c:	9003      	str	r0, [sp, #12]
 8003c8e:	2e00      	cmp	r6, #0
 8003c90:	d078      	beq.n	8003d84 <_dtoa_r+0x1dc>
 8003c92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003c96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003c98:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003c9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ca0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003ca4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003ca8:	9712      	str	r7, [sp, #72]	@ 0x48
 8003caa:	4619      	mov	r1, r3
 8003cac:	2200      	movs	r2, #0
 8003cae:	4b7a      	ldr	r3, [pc, #488]	@ (8003e98 <_dtoa_r+0x2f0>)
 8003cb0:	f7fc fa5a 	bl	8000168 <__aeabi_dsub>
 8003cb4:	a36c      	add	r3, pc, #432	@ (adr r3, 8003e68 <_dtoa_r+0x2c0>)
 8003cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cba:	f7fc fc0d 	bl	80004d8 <__aeabi_dmul>
 8003cbe:	a36c      	add	r3, pc, #432	@ (adr r3, 8003e70 <_dtoa_r+0x2c8>)
 8003cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc4:	f7fc fa52 	bl	800016c <__adddf3>
 8003cc8:	4604      	mov	r4, r0
 8003cca:	4630      	mov	r0, r6
 8003ccc:	460d      	mov	r5, r1
 8003cce:	f7fc fb99 	bl	8000404 <__aeabi_i2d>
 8003cd2:	a369      	add	r3, pc, #420	@ (adr r3, 8003e78 <_dtoa_r+0x2d0>)
 8003cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd8:	f7fc fbfe 	bl	80004d8 <__aeabi_dmul>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4620      	mov	r0, r4
 8003ce2:	4629      	mov	r1, r5
 8003ce4:	f7fc fa42 	bl	800016c <__adddf3>
 8003ce8:	4604      	mov	r4, r0
 8003cea:	460d      	mov	r5, r1
 8003cec:	f7fc fea4 	bl	8000a38 <__aeabi_d2iz>
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	4607      	mov	r7, r0
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	4620      	mov	r0, r4
 8003cf8:	4629      	mov	r1, r5
 8003cfa:	f7fc fe5f 	bl	80009bc <__aeabi_dcmplt>
 8003cfe:	b140      	cbz	r0, 8003d12 <_dtoa_r+0x16a>
 8003d00:	4638      	mov	r0, r7
 8003d02:	f7fc fb7f 	bl	8000404 <__aeabi_i2d>
 8003d06:	4622      	mov	r2, r4
 8003d08:	462b      	mov	r3, r5
 8003d0a:	f7fc fe4d 	bl	80009a8 <__aeabi_dcmpeq>
 8003d0e:	b900      	cbnz	r0, 8003d12 <_dtoa_r+0x16a>
 8003d10:	3f01      	subs	r7, #1
 8003d12:	2f16      	cmp	r7, #22
 8003d14:	d854      	bhi.n	8003dc0 <_dtoa_r+0x218>
 8003d16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003d1a:	4b60      	ldr	r3, [pc, #384]	@ (8003e9c <_dtoa_r+0x2f4>)
 8003d1c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d24:	f7fc fe4a 	bl	80009bc <__aeabi_dcmplt>
 8003d28:	2800      	cmp	r0, #0
 8003d2a:	d04b      	beq.n	8003dc4 <_dtoa_r+0x21c>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	3f01      	subs	r7, #1
 8003d30:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003d32:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003d34:	1b9b      	subs	r3, r3, r6
 8003d36:	1e5a      	subs	r2, r3, #1
 8003d38:	bf49      	itett	mi
 8003d3a:	f1c3 0301 	rsbmi	r3, r3, #1
 8003d3e:	2300      	movpl	r3, #0
 8003d40:	9304      	strmi	r3, [sp, #16]
 8003d42:	2300      	movmi	r3, #0
 8003d44:	9209      	str	r2, [sp, #36]	@ 0x24
 8003d46:	bf54      	ite	pl
 8003d48:	9304      	strpl	r3, [sp, #16]
 8003d4a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8003d4c:	2f00      	cmp	r7, #0
 8003d4e:	db3b      	blt.n	8003dc8 <_dtoa_r+0x220>
 8003d50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d52:	970e      	str	r7, [sp, #56]	@ 0x38
 8003d54:	443b      	add	r3, r7
 8003d56:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d58:	2300      	movs	r3, #0
 8003d5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8003d5c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003d5e:	2b09      	cmp	r3, #9
 8003d60:	d865      	bhi.n	8003e2e <_dtoa_r+0x286>
 8003d62:	2b05      	cmp	r3, #5
 8003d64:	bfc4      	itt	gt
 8003d66:	3b04      	subgt	r3, #4
 8003d68:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8003d6a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003d6c:	bfc8      	it	gt
 8003d6e:	2400      	movgt	r4, #0
 8003d70:	f1a3 0302 	sub.w	r3, r3, #2
 8003d74:	bfd8      	it	le
 8003d76:	2401      	movle	r4, #1
 8003d78:	2b03      	cmp	r3, #3
 8003d7a:	d864      	bhi.n	8003e46 <_dtoa_r+0x29e>
 8003d7c:	e8df f003 	tbb	[pc, r3]
 8003d80:	2c385553 	.word	0x2c385553
 8003d84:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8003d88:	441e      	add	r6, r3
 8003d8a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003d8e:	2b20      	cmp	r3, #32
 8003d90:	bfc1      	itttt	gt
 8003d92:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003d96:	fa08 f803 	lslgt.w	r8, r8, r3
 8003d9a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003d9e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003da2:	bfd6      	itet	le
 8003da4:	f1c3 0320 	rsble	r3, r3, #32
 8003da8:	ea48 0003 	orrgt.w	r0, r8, r3
 8003dac:	fa04 f003 	lslle.w	r0, r4, r3
 8003db0:	f7fc fb18 	bl	80003e4 <__aeabi_ui2d>
 8003db4:	2201      	movs	r2, #1
 8003db6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003dba:	3e01      	subs	r6, #1
 8003dbc:	9212      	str	r2, [sp, #72]	@ 0x48
 8003dbe:	e774      	b.n	8003caa <_dtoa_r+0x102>
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e7b5      	b.n	8003d30 <_dtoa_r+0x188>
 8003dc4:	900f      	str	r0, [sp, #60]	@ 0x3c
 8003dc6:	e7b4      	b.n	8003d32 <_dtoa_r+0x18a>
 8003dc8:	9b04      	ldr	r3, [sp, #16]
 8003dca:	1bdb      	subs	r3, r3, r7
 8003dcc:	9304      	str	r3, [sp, #16]
 8003dce:	427b      	negs	r3, r7
 8003dd0:	930a      	str	r3, [sp, #40]	@ 0x28
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	930e      	str	r3, [sp, #56]	@ 0x38
 8003dd6:	e7c1      	b.n	8003d5c <_dtoa_r+0x1b4>
 8003dd8:	2301      	movs	r3, #1
 8003dda:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003ddc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003dde:	eb07 0b03 	add.w	fp, r7, r3
 8003de2:	f10b 0301 	add.w	r3, fp, #1
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	9308      	str	r3, [sp, #32]
 8003dea:	bfb8      	it	lt
 8003dec:	2301      	movlt	r3, #1
 8003dee:	e006      	b.n	8003dfe <_dtoa_r+0x256>
 8003df0:	2301      	movs	r3, #1
 8003df2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003df4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	dd28      	ble.n	8003e4c <_dtoa_r+0x2a4>
 8003dfa:	469b      	mov	fp, r3
 8003dfc:	9308      	str	r3, [sp, #32]
 8003dfe:	2100      	movs	r1, #0
 8003e00:	2204      	movs	r2, #4
 8003e02:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8003e06:	f102 0514 	add.w	r5, r2, #20
 8003e0a:	429d      	cmp	r5, r3
 8003e0c:	d926      	bls.n	8003e5c <_dtoa_r+0x2b4>
 8003e0e:	6041      	str	r1, [r0, #4]
 8003e10:	4648      	mov	r0, r9
 8003e12:	f000 fd9b 	bl	800494c <_Balloc>
 8003e16:	4682      	mov	sl, r0
 8003e18:	2800      	cmp	r0, #0
 8003e1a:	d143      	bne.n	8003ea4 <_dtoa_r+0x2fc>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	f240 11af 	movw	r1, #431	@ 0x1af
 8003e22:	4b1f      	ldr	r3, [pc, #124]	@ (8003ea0 <_dtoa_r+0x2f8>)
 8003e24:	e6d4      	b.n	8003bd0 <_dtoa_r+0x28>
 8003e26:	2300      	movs	r3, #0
 8003e28:	e7e3      	b.n	8003df2 <_dtoa_r+0x24a>
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	e7d5      	b.n	8003dda <_dtoa_r+0x232>
 8003e2e:	2401      	movs	r4, #1
 8003e30:	2300      	movs	r3, #0
 8003e32:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003e34:	9320      	str	r3, [sp, #128]	@ 0x80
 8003e36:	f04f 3bff 	mov.w	fp, #4294967295
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	2312      	movs	r3, #18
 8003e3e:	f8cd b020 	str.w	fp, [sp, #32]
 8003e42:	9221      	str	r2, [sp, #132]	@ 0x84
 8003e44:	e7db      	b.n	8003dfe <_dtoa_r+0x256>
 8003e46:	2301      	movs	r3, #1
 8003e48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003e4a:	e7f4      	b.n	8003e36 <_dtoa_r+0x28e>
 8003e4c:	f04f 0b01 	mov.w	fp, #1
 8003e50:	465b      	mov	r3, fp
 8003e52:	f8cd b020 	str.w	fp, [sp, #32]
 8003e56:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8003e5a:	e7d0      	b.n	8003dfe <_dtoa_r+0x256>
 8003e5c:	3101      	adds	r1, #1
 8003e5e:	0052      	lsls	r2, r2, #1
 8003e60:	e7d1      	b.n	8003e06 <_dtoa_r+0x25e>
 8003e62:	bf00      	nop
 8003e64:	f3af 8000 	nop.w
 8003e68:	636f4361 	.word	0x636f4361
 8003e6c:	3fd287a7 	.word	0x3fd287a7
 8003e70:	8b60c8b3 	.word	0x8b60c8b3
 8003e74:	3fc68a28 	.word	0x3fc68a28
 8003e78:	509f79fb 	.word	0x509f79fb
 8003e7c:	3fd34413 	.word	0x3fd34413
 8003e80:	08005cab 	.word	0x08005cab
 8003e84:	08005cc2 	.word	0x08005cc2
 8003e88:	7ff00000 	.word	0x7ff00000
 8003e8c:	08005ca7 	.word	0x08005ca7
 8003e90:	08005c7b 	.word	0x08005c7b
 8003e94:	08005c7a 	.word	0x08005c7a
 8003e98:	3ff80000 	.word	0x3ff80000
 8003e9c:	08005e10 	.word	0x08005e10
 8003ea0:	08005d1a 	.word	0x08005d1a
 8003ea4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003ea8:	6018      	str	r0, [r3, #0]
 8003eaa:	9b08      	ldr	r3, [sp, #32]
 8003eac:	2b0e      	cmp	r3, #14
 8003eae:	f200 80a1 	bhi.w	8003ff4 <_dtoa_r+0x44c>
 8003eb2:	2c00      	cmp	r4, #0
 8003eb4:	f000 809e 	beq.w	8003ff4 <_dtoa_r+0x44c>
 8003eb8:	2f00      	cmp	r7, #0
 8003eba:	dd33      	ble.n	8003f24 <_dtoa_r+0x37c>
 8003ebc:	4b9c      	ldr	r3, [pc, #624]	@ (8004130 <_dtoa_r+0x588>)
 8003ebe:	f007 020f 	and.w	r2, r7, #15
 8003ec2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003ec6:	05f8      	lsls	r0, r7, #23
 8003ec8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ecc:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8003ed0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003ed4:	d516      	bpl.n	8003f04 <_dtoa_r+0x35c>
 8003ed6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003eda:	4b96      	ldr	r3, [pc, #600]	@ (8004134 <_dtoa_r+0x58c>)
 8003edc:	2603      	movs	r6, #3
 8003ede:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003ee2:	f7fc fc23 	bl	800072c <__aeabi_ddiv>
 8003ee6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003eea:	f004 040f 	and.w	r4, r4, #15
 8003eee:	4d91      	ldr	r5, [pc, #580]	@ (8004134 <_dtoa_r+0x58c>)
 8003ef0:	b954      	cbnz	r4, 8003f08 <_dtoa_r+0x360>
 8003ef2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003ef6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003efa:	f7fc fc17 	bl	800072c <__aeabi_ddiv>
 8003efe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003f02:	e028      	b.n	8003f56 <_dtoa_r+0x3ae>
 8003f04:	2602      	movs	r6, #2
 8003f06:	e7f2      	b.n	8003eee <_dtoa_r+0x346>
 8003f08:	07e1      	lsls	r1, r4, #31
 8003f0a:	d508      	bpl.n	8003f1e <_dtoa_r+0x376>
 8003f0c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003f10:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003f14:	f7fc fae0 	bl	80004d8 <__aeabi_dmul>
 8003f18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003f1c:	3601      	adds	r6, #1
 8003f1e:	1064      	asrs	r4, r4, #1
 8003f20:	3508      	adds	r5, #8
 8003f22:	e7e5      	b.n	8003ef0 <_dtoa_r+0x348>
 8003f24:	f000 80af 	beq.w	8004086 <_dtoa_r+0x4de>
 8003f28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003f2c:	427c      	negs	r4, r7
 8003f2e:	4b80      	ldr	r3, [pc, #512]	@ (8004130 <_dtoa_r+0x588>)
 8003f30:	f004 020f 	and.w	r2, r4, #15
 8003f34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3c:	f7fc facc 	bl	80004d8 <__aeabi_dmul>
 8003f40:	2602      	movs	r6, #2
 8003f42:	2300      	movs	r3, #0
 8003f44:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003f48:	4d7a      	ldr	r5, [pc, #488]	@ (8004134 <_dtoa_r+0x58c>)
 8003f4a:	1124      	asrs	r4, r4, #4
 8003f4c:	2c00      	cmp	r4, #0
 8003f4e:	f040 808f 	bne.w	8004070 <_dtoa_r+0x4c8>
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1d3      	bne.n	8003efe <_dtoa_r+0x356>
 8003f56:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8003f5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 8094 	beq.w	800408a <_dtoa_r+0x4e2>
 8003f62:	2200      	movs	r2, #0
 8003f64:	4620      	mov	r0, r4
 8003f66:	4629      	mov	r1, r5
 8003f68:	4b73      	ldr	r3, [pc, #460]	@ (8004138 <_dtoa_r+0x590>)
 8003f6a:	f7fc fd27 	bl	80009bc <__aeabi_dcmplt>
 8003f6e:	2800      	cmp	r0, #0
 8003f70:	f000 808b 	beq.w	800408a <_dtoa_r+0x4e2>
 8003f74:	9b08      	ldr	r3, [sp, #32]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f000 8087 	beq.w	800408a <_dtoa_r+0x4e2>
 8003f7c:	f1bb 0f00 	cmp.w	fp, #0
 8003f80:	dd34      	ble.n	8003fec <_dtoa_r+0x444>
 8003f82:	4620      	mov	r0, r4
 8003f84:	2200      	movs	r2, #0
 8003f86:	4629      	mov	r1, r5
 8003f88:	4b6c      	ldr	r3, [pc, #432]	@ (800413c <_dtoa_r+0x594>)
 8003f8a:	f7fc faa5 	bl	80004d8 <__aeabi_dmul>
 8003f8e:	465c      	mov	r4, fp
 8003f90:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003f94:	f107 38ff 	add.w	r8, r7, #4294967295
 8003f98:	3601      	adds	r6, #1
 8003f9a:	4630      	mov	r0, r6
 8003f9c:	f7fc fa32 	bl	8000404 <__aeabi_i2d>
 8003fa0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003fa4:	f7fc fa98 	bl	80004d8 <__aeabi_dmul>
 8003fa8:	2200      	movs	r2, #0
 8003faa:	4b65      	ldr	r3, [pc, #404]	@ (8004140 <_dtoa_r+0x598>)
 8003fac:	f7fc f8de 	bl	800016c <__adddf3>
 8003fb0:	4605      	mov	r5, r0
 8003fb2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8003fb6:	2c00      	cmp	r4, #0
 8003fb8:	d16a      	bne.n	8004090 <_dtoa_r+0x4e8>
 8003fba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	4b60      	ldr	r3, [pc, #384]	@ (8004144 <_dtoa_r+0x59c>)
 8003fc2:	f7fc f8d1 	bl	8000168 <__aeabi_dsub>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	460b      	mov	r3, r1
 8003fca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003fce:	462a      	mov	r2, r5
 8003fd0:	4633      	mov	r3, r6
 8003fd2:	f7fc fd11 	bl	80009f8 <__aeabi_dcmpgt>
 8003fd6:	2800      	cmp	r0, #0
 8003fd8:	f040 8298 	bne.w	800450c <_dtoa_r+0x964>
 8003fdc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003fe0:	462a      	mov	r2, r5
 8003fe2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8003fe6:	f7fc fce9 	bl	80009bc <__aeabi_dcmplt>
 8003fea:	bb38      	cbnz	r0, 800403c <_dtoa_r+0x494>
 8003fec:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8003ff0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8003ff4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f2c0 8157 	blt.w	80042aa <_dtoa_r+0x702>
 8003ffc:	2f0e      	cmp	r7, #14
 8003ffe:	f300 8154 	bgt.w	80042aa <_dtoa_r+0x702>
 8004002:	4b4b      	ldr	r3, [pc, #300]	@ (8004130 <_dtoa_r+0x588>)
 8004004:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004008:	e9d3 3400 	ldrd	r3, r4, [r3]
 800400c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004010:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004012:	2b00      	cmp	r3, #0
 8004014:	f280 80e5 	bge.w	80041e2 <_dtoa_r+0x63a>
 8004018:	9b08      	ldr	r3, [sp, #32]
 800401a:	2b00      	cmp	r3, #0
 800401c:	f300 80e1 	bgt.w	80041e2 <_dtoa_r+0x63a>
 8004020:	d10c      	bne.n	800403c <_dtoa_r+0x494>
 8004022:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004026:	2200      	movs	r2, #0
 8004028:	4b46      	ldr	r3, [pc, #280]	@ (8004144 <_dtoa_r+0x59c>)
 800402a:	f7fc fa55 	bl	80004d8 <__aeabi_dmul>
 800402e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004032:	f7fc fcd7 	bl	80009e4 <__aeabi_dcmpge>
 8004036:	2800      	cmp	r0, #0
 8004038:	f000 8266 	beq.w	8004508 <_dtoa_r+0x960>
 800403c:	2400      	movs	r4, #0
 800403e:	4625      	mov	r5, r4
 8004040:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004042:	4656      	mov	r6, sl
 8004044:	ea6f 0803 	mvn.w	r8, r3
 8004048:	2700      	movs	r7, #0
 800404a:	4621      	mov	r1, r4
 800404c:	4648      	mov	r0, r9
 800404e:	f000 fcbd 	bl	80049cc <_Bfree>
 8004052:	2d00      	cmp	r5, #0
 8004054:	f000 80bd 	beq.w	80041d2 <_dtoa_r+0x62a>
 8004058:	b12f      	cbz	r7, 8004066 <_dtoa_r+0x4be>
 800405a:	42af      	cmp	r7, r5
 800405c:	d003      	beq.n	8004066 <_dtoa_r+0x4be>
 800405e:	4639      	mov	r1, r7
 8004060:	4648      	mov	r0, r9
 8004062:	f000 fcb3 	bl	80049cc <_Bfree>
 8004066:	4629      	mov	r1, r5
 8004068:	4648      	mov	r0, r9
 800406a:	f000 fcaf 	bl	80049cc <_Bfree>
 800406e:	e0b0      	b.n	80041d2 <_dtoa_r+0x62a>
 8004070:	07e2      	lsls	r2, r4, #31
 8004072:	d505      	bpl.n	8004080 <_dtoa_r+0x4d8>
 8004074:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004078:	f7fc fa2e 	bl	80004d8 <__aeabi_dmul>
 800407c:	2301      	movs	r3, #1
 800407e:	3601      	adds	r6, #1
 8004080:	1064      	asrs	r4, r4, #1
 8004082:	3508      	adds	r5, #8
 8004084:	e762      	b.n	8003f4c <_dtoa_r+0x3a4>
 8004086:	2602      	movs	r6, #2
 8004088:	e765      	b.n	8003f56 <_dtoa_r+0x3ae>
 800408a:	46b8      	mov	r8, r7
 800408c:	9c08      	ldr	r4, [sp, #32]
 800408e:	e784      	b.n	8003f9a <_dtoa_r+0x3f2>
 8004090:	4b27      	ldr	r3, [pc, #156]	@ (8004130 <_dtoa_r+0x588>)
 8004092:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004094:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004098:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800409c:	4454      	add	r4, sl
 800409e:	2900      	cmp	r1, #0
 80040a0:	d054      	beq.n	800414c <_dtoa_r+0x5a4>
 80040a2:	2000      	movs	r0, #0
 80040a4:	4928      	ldr	r1, [pc, #160]	@ (8004148 <_dtoa_r+0x5a0>)
 80040a6:	f7fc fb41 	bl	800072c <__aeabi_ddiv>
 80040aa:	4633      	mov	r3, r6
 80040ac:	462a      	mov	r2, r5
 80040ae:	f7fc f85b 	bl	8000168 <__aeabi_dsub>
 80040b2:	4656      	mov	r6, sl
 80040b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80040b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80040bc:	f7fc fcbc 	bl	8000a38 <__aeabi_d2iz>
 80040c0:	4605      	mov	r5, r0
 80040c2:	f7fc f99f 	bl	8000404 <__aeabi_i2d>
 80040c6:	4602      	mov	r2, r0
 80040c8:	460b      	mov	r3, r1
 80040ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80040ce:	f7fc f84b 	bl	8000168 <__aeabi_dsub>
 80040d2:	4602      	mov	r2, r0
 80040d4:	460b      	mov	r3, r1
 80040d6:	3530      	adds	r5, #48	@ 0x30
 80040d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80040dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80040e0:	f806 5b01 	strb.w	r5, [r6], #1
 80040e4:	f7fc fc6a 	bl	80009bc <__aeabi_dcmplt>
 80040e8:	2800      	cmp	r0, #0
 80040ea:	d172      	bne.n	80041d2 <_dtoa_r+0x62a>
 80040ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80040f0:	2000      	movs	r0, #0
 80040f2:	4911      	ldr	r1, [pc, #68]	@ (8004138 <_dtoa_r+0x590>)
 80040f4:	f7fc f838 	bl	8000168 <__aeabi_dsub>
 80040f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80040fc:	f7fc fc5e 	bl	80009bc <__aeabi_dcmplt>
 8004100:	2800      	cmp	r0, #0
 8004102:	f040 80b4 	bne.w	800426e <_dtoa_r+0x6c6>
 8004106:	42a6      	cmp	r6, r4
 8004108:	f43f af70 	beq.w	8003fec <_dtoa_r+0x444>
 800410c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004110:	2200      	movs	r2, #0
 8004112:	4b0a      	ldr	r3, [pc, #40]	@ (800413c <_dtoa_r+0x594>)
 8004114:	f7fc f9e0 	bl	80004d8 <__aeabi_dmul>
 8004118:	2200      	movs	r2, #0
 800411a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800411e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004122:	4b06      	ldr	r3, [pc, #24]	@ (800413c <_dtoa_r+0x594>)
 8004124:	f7fc f9d8 	bl	80004d8 <__aeabi_dmul>
 8004128:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800412c:	e7c4      	b.n	80040b8 <_dtoa_r+0x510>
 800412e:	bf00      	nop
 8004130:	08005e10 	.word	0x08005e10
 8004134:	08005de8 	.word	0x08005de8
 8004138:	3ff00000 	.word	0x3ff00000
 800413c:	40240000 	.word	0x40240000
 8004140:	401c0000 	.word	0x401c0000
 8004144:	40140000 	.word	0x40140000
 8004148:	3fe00000 	.word	0x3fe00000
 800414c:	4631      	mov	r1, r6
 800414e:	4628      	mov	r0, r5
 8004150:	f7fc f9c2 	bl	80004d8 <__aeabi_dmul>
 8004154:	4656      	mov	r6, sl
 8004156:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800415a:	9413      	str	r4, [sp, #76]	@ 0x4c
 800415c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004160:	f7fc fc6a 	bl	8000a38 <__aeabi_d2iz>
 8004164:	4605      	mov	r5, r0
 8004166:	f7fc f94d 	bl	8000404 <__aeabi_i2d>
 800416a:	4602      	mov	r2, r0
 800416c:	460b      	mov	r3, r1
 800416e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004172:	f7fb fff9 	bl	8000168 <__aeabi_dsub>
 8004176:	4602      	mov	r2, r0
 8004178:	460b      	mov	r3, r1
 800417a:	3530      	adds	r5, #48	@ 0x30
 800417c:	f806 5b01 	strb.w	r5, [r6], #1
 8004180:	42a6      	cmp	r6, r4
 8004182:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004186:	f04f 0200 	mov.w	r2, #0
 800418a:	d124      	bne.n	80041d6 <_dtoa_r+0x62e>
 800418c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004190:	4bae      	ldr	r3, [pc, #696]	@ (800444c <_dtoa_r+0x8a4>)
 8004192:	f7fb ffeb 	bl	800016c <__adddf3>
 8004196:	4602      	mov	r2, r0
 8004198:	460b      	mov	r3, r1
 800419a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800419e:	f7fc fc2b 	bl	80009f8 <__aeabi_dcmpgt>
 80041a2:	2800      	cmp	r0, #0
 80041a4:	d163      	bne.n	800426e <_dtoa_r+0x6c6>
 80041a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80041aa:	2000      	movs	r0, #0
 80041ac:	49a7      	ldr	r1, [pc, #668]	@ (800444c <_dtoa_r+0x8a4>)
 80041ae:	f7fb ffdb 	bl	8000168 <__aeabi_dsub>
 80041b2:	4602      	mov	r2, r0
 80041b4:	460b      	mov	r3, r1
 80041b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80041ba:	f7fc fbff 	bl	80009bc <__aeabi_dcmplt>
 80041be:	2800      	cmp	r0, #0
 80041c0:	f43f af14 	beq.w	8003fec <_dtoa_r+0x444>
 80041c4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80041c6:	1e73      	subs	r3, r6, #1
 80041c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80041ca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80041ce:	2b30      	cmp	r3, #48	@ 0x30
 80041d0:	d0f8      	beq.n	80041c4 <_dtoa_r+0x61c>
 80041d2:	4647      	mov	r7, r8
 80041d4:	e03b      	b.n	800424e <_dtoa_r+0x6a6>
 80041d6:	4b9e      	ldr	r3, [pc, #632]	@ (8004450 <_dtoa_r+0x8a8>)
 80041d8:	f7fc f97e 	bl	80004d8 <__aeabi_dmul>
 80041dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80041e0:	e7bc      	b.n	800415c <_dtoa_r+0x5b4>
 80041e2:	4656      	mov	r6, sl
 80041e4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80041e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80041ec:	4620      	mov	r0, r4
 80041ee:	4629      	mov	r1, r5
 80041f0:	f7fc fa9c 	bl	800072c <__aeabi_ddiv>
 80041f4:	f7fc fc20 	bl	8000a38 <__aeabi_d2iz>
 80041f8:	4680      	mov	r8, r0
 80041fa:	f7fc f903 	bl	8000404 <__aeabi_i2d>
 80041fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004202:	f7fc f969 	bl	80004d8 <__aeabi_dmul>
 8004206:	4602      	mov	r2, r0
 8004208:	460b      	mov	r3, r1
 800420a:	4620      	mov	r0, r4
 800420c:	4629      	mov	r1, r5
 800420e:	f7fb ffab 	bl	8000168 <__aeabi_dsub>
 8004212:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004216:	9d08      	ldr	r5, [sp, #32]
 8004218:	f806 4b01 	strb.w	r4, [r6], #1
 800421c:	eba6 040a 	sub.w	r4, r6, sl
 8004220:	42a5      	cmp	r5, r4
 8004222:	4602      	mov	r2, r0
 8004224:	460b      	mov	r3, r1
 8004226:	d133      	bne.n	8004290 <_dtoa_r+0x6e8>
 8004228:	f7fb ffa0 	bl	800016c <__adddf3>
 800422c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004230:	4604      	mov	r4, r0
 8004232:	460d      	mov	r5, r1
 8004234:	f7fc fbe0 	bl	80009f8 <__aeabi_dcmpgt>
 8004238:	b9c0      	cbnz	r0, 800426c <_dtoa_r+0x6c4>
 800423a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800423e:	4620      	mov	r0, r4
 8004240:	4629      	mov	r1, r5
 8004242:	f7fc fbb1 	bl	80009a8 <__aeabi_dcmpeq>
 8004246:	b110      	cbz	r0, 800424e <_dtoa_r+0x6a6>
 8004248:	f018 0f01 	tst.w	r8, #1
 800424c:	d10e      	bne.n	800426c <_dtoa_r+0x6c4>
 800424e:	4648      	mov	r0, r9
 8004250:	9903      	ldr	r1, [sp, #12]
 8004252:	f000 fbbb 	bl	80049cc <_Bfree>
 8004256:	2300      	movs	r3, #0
 8004258:	7033      	strb	r3, [r6, #0]
 800425a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800425c:	3701      	adds	r7, #1
 800425e:	601f      	str	r7, [r3, #0]
 8004260:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004262:	2b00      	cmp	r3, #0
 8004264:	f000 824b 	beq.w	80046fe <_dtoa_r+0xb56>
 8004268:	601e      	str	r6, [r3, #0]
 800426a:	e248      	b.n	80046fe <_dtoa_r+0xb56>
 800426c:	46b8      	mov	r8, r7
 800426e:	4633      	mov	r3, r6
 8004270:	461e      	mov	r6, r3
 8004272:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004276:	2a39      	cmp	r2, #57	@ 0x39
 8004278:	d106      	bne.n	8004288 <_dtoa_r+0x6e0>
 800427a:	459a      	cmp	sl, r3
 800427c:	d1f8      	bne.n	8004270 <_dtoa_r+0x6c8>
 800427e:	2230      	movs	r2, #48	@ 0x30
 8004280:	f108 0801 	add.w	r8, r8, #1
 8004284:	f88a 2000 	strb.w	r2, [sl]
 8004288:	781a      	ldrb	r2, [r3, #0]
 800428a:	3201      	adds	r2, #1
 800428c:	701a      	strb	r2, [r3, #0]
 800428e:	e7a0      	b.n	80041d2 <_dtoa_r+0x62a>
 8004290:	2200      	movs	r2, #0
 8004292:	4b6f      	ldr	r3, [pc, #444]	@ (8004450 <_dtoa_r+0x8a8>)
 8004294:	f7fc f920 	bl	80004d8 <__aeabi_dmul>
 8004298:	2200      	movs	r2, #0
 800429a:	2300      	movs	r3, #0
 800429c:	4604      	mov	r4, r0
 800429e:	460d      	mov	r5, r1
 80042a0:	f7fc fb82 	bl	80009a8 <__aeabi_dcmpeq>
 80042a4:	2800      	cmp	r0, #0
 80042a6:	d09f      	beq.n	80041e8 <_dtoa_r+0x640>
 80042a8:	e7d1      	b.n	800424e <_dtoa_r+0x6a6>
 80042aa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80042ac:	2a00      	cmp	r2, #0
 80042ae:	f000 80ea 	beq.w	8004486 <_dtoa_r+0x8de>
 80042b2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80042b4:	2a01      	cmp	r2, #1
 80042b6:	f300 80cd 	bgt.w	8004454 <_dtoa_r+0x8ac>
 80042ba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80042bc:	2a00      	cmp	r2, #0
 80042be:	f000 80c1 	beq.w	8004444 <_dtoa_r+0x89c>
 80042c2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80042c6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80042c8:	9e04      	ldr	r6, [sp, #16]
 80042ca:	9a04      	ldr	r2, [sp, #16]
 80042cc:	2101      	movs	r1, #1
 80042ce:	441a      	add	r2, r3
 80042d0:	9204      	str	r2, [sp, #16]
 80042d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80042d4:	4648      	mov	r0, r9
 80042d6:	441a      	add	r2, r3
 80042d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80042da:	f000 fc2b 	bl	8004b34 <__i2b>
 80042de:	4605      	mov	r5, r0
 80042e0:	b166      	cbz	r6, 80042fc <_dtoa_r+0x754>
 80042e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	dd09      	ble.n	80042fc <_dtoa_r+0x754>
 80042e8:	42b3      	cmp	r3, r6
 80042ea:	bfa8      	it	ge
 80042ec:	4633      	movge	r3, r6
 80042ee:	9a04      	ldr	r2, [sp, #16]
 80042f0:	1af6      	subs	r6, r6, r3
 80042f2:	1ad2      	subs	r2, r2, r3
 80042f4:	9204      	str	r2, [sp, #16]
 80042f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80042fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80042fe:	b30b      	cbz	r3, 8004344 <_dtoa_r+0x79c>
 8004300:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004302:	2b00      	cmp	r3, #0
 8004304:	f000 80c6 	beq.w	8004494 <_dtoa_r+0x8ec>
 8004308:	2c00      	cmp	r4, #0
 800430a:	f000 80c0 	beq.w	800448e <_dtoa_r+0x8e6>
 800430e:	4629      	mov	r1, r5
 8004310:	4622      	mov	r2, r4
 8004312:	4648      	mov	r0, r9
 8004314:	f000 fcc6 	bl	8004ca4 <__pow5mult>
 8004318:	9a03      	ldr	r2, [sp, #12]
 800431a:	4601      	mov	r1, r0
 800431c:	4605      	mov	r5, r0
 800431e:	4648      	mov	r0, r9
 8004320:	f000 fc1e 	bl	8004b60 <__multiply>
 8004324:	9903      	ldr	r1, [sp, #12]
 8004326:	4680      	mov	r8, r0
 8004328:	4648      	mov	r0, r9
 800432a:	f000 fb4f 	bl	80049cc <_Bfree>
 800432e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004330:	1b1b      	subs	r3, r3, r4
 8004332:	930a      	str	r3, [sp, #40]	@ 0x28
 8004334:	f000 80b1 	beq.w	800449a <_dtoa_r+0x8f2>
 8004338:	4641      	mov	r1, r8
 800433a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800433c:	4648      	mov	r0, r9
 800433e:	f000 fcb1 	bl	8004ca4 <__pow5mult>
 8004342:	9003      	str	r0, [sp, #12]
 8004344:	2101      	movs	r1, #1
 8004346:	4648      	mov	r0, r9
 8004348:	f000 fbf4 	bl	8004b34 <__i2b>
 800434c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800434e:	4604      	mov	r4, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 81d8 	beq.w	8004706 <_dtoa_r+0xb5e>
 8004356:	461a      	mov	r2, r3
 8004358:	4601      	mov	r1, r0
 800435a:	4648      	mov	r0, r9
 800435c:	f000 fca2 	bl	8004ca4 <__pow5mult>
 8004360:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004362:	4604      	mov	r4, r0
 8004364:	2b01      	cmp	r3, #1
 8004366:	f300 809f 	bgt.w	80044a8 <_dtoa_r+0x900>
 800436a:	9b06      	ldr	r3, [sp, #24]
 800436c:	2b00      	cmp	r3, #0
 800436e:	f040 8097 	bne.w	80044a0 <_dtoa_r+0x8f8>
 8004372:	9b07      	ldr	r3, [sp, #28]
 8004374:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004378:	2b00      	cmp	r3, #0
 800437a:	f040 8093 	bne.w	80044a4 <_dtoa_r+0x8fc>
 800437e:	9b07      	ldr	r3, [sp, #28]
 8004380:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004384:	0d1b      	lsrs	r3, r3, #20
 8004386:	051b      	lsls	r3, r3, #20
 8004388:	b133      	cbz	r3, 8004398 <_dtoa_r+0x7f0>
 800438a:	9b04      	ldr	r3, [sp, #16]
 800438c:	3301      	adds	r3, #1
 800438e:	9304      	str	r3, [sp, #16]
 8004390:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004392:	3301      	adds	r3, #1
 8004394:	9309      	str	r3, [sp, #36]	@ 0x24
 8004396:	2301      	movs	r3, #1
 8004398:	930a      	str	r3, [sp, #40]	@ 0x28
 800439a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 81b8 	beq.w	8004712 <_dtoa_r+0xb6a>
 80043a2:	6923      	ldr	r3, [r4, #16]
 80043a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80043a8:	6918      	ldr	r0, [r3, #16]
 80043aa:	f000 fb77 	bl	8004a9c <__hi0bits>
 80043ae:	f1c0 0020 	rsb	r0, r0, #32
 80043b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043b4:	4418      	add	r0, r3
 80043b6:	f010 001f 	ands.w	r0, r0, #31
 80043ba:	f000 8082 	beq.w	80044c2 <_dtoa_r+0x91a>
 80043be:	f1c0 0320 	rsb	r3, r0, #32
 80043c2:	2b04      	cmp	r3, #4
 80043c4:	dd73      	ble.n	80044ae <_dtoa_r+0x906>
 80043c6:	9b04      	ldr	r3, [sp, #16]
 80043c8:	f1c0 001c 	rsb	r0, r0, #28
 80043cc:	4403      	add	r3, r0
 80043ce:	9304      	str	r3, [sp, #16]
 80043d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043d2:	4406      	add	r6, r0
 80043d4:	4403      	add	r3, r0
 80043d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80043d8:	9b04      	ldr	r3, [sp, #16]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	dd05      	ble.n	80043ea <_dtoa_r+0x842>
 80043de:	461a      	mov	r2, r3
 80043e0:	4648      	mov	r0, r9
 80043e2:	9903      	ldr	r1, [sp, #12]
 80043e4:	f000 fcb8 	bl	8004d58 <__lshift>
 80043e8:	9003      	str	r0, [sp, #12]
 80043ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	dd05      	ble.n	80043fc <_dtoa_r+0x854>
 80043f0:	4621      	mov	r1, r4
 80043f2:	461a      	mov	r2, r3
 80043f4:	4648      	mov	r0, r9
 80043f6:	f000 fcaf 	bl	8004d58 <__lshift>
 80043fa:	4604      	mov	r4, r0
 80043fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d061      	beq.n	80044c6 <_dtoa_r+0x91e>
 8004402:	4621      	mov	r1, r4
 8004404:	9803      	ldr	r0, [sp, #12]
 8004406:	f000 fd13 	bl	8004e30 <__mcmp>
 800440a:	2800      	cmp	r0, #0
 800440c:	da5b      	bge.n	80044c6 <_dtoa_r+0x91e>
 800440e:	2300      	movs	r3, #0
 8004410:	220a      	movs	r2, #10
 8004412:	4648      	mov	r0, r9
 8004414:	9903      	ldr	r1, [sp, #12]
 8004416:	f000 fafb 	bl	8004a10 <__multadd>
 800441a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800441c:	f107 38ff 	add.w	r8, r7, #4294967295
 8004420:	9003      	str	r0, [sp, #12]
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 8177 	beq.w	8004716 <_dtoa_r+0xb6e>
 8004428:	4629      	mov	r1, r5
 800442a:	2300      	movs	r3, #0
 800442c:	220a      	movs	r2, #10
 800442e:	4648      	mov	r0, r9
 8004430:	f000 faee 	bl	8004a10 <__multadd>
 8004434:	f1bb 0f00 	cmp.w	fp, #0
 8004438:	4605      	mov	r5, r0
 800443a:	dc6f      	bgt.n	800451c <_dtoa_r+0x974>
 800443c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800443e:	2b02      	cmp	r3, #2
 8004440:	dc49      	bgt.n	80044d6 <_dtoa_r+0x92e>
 8004442:	e06b      	b.n	800451c <_dtoa_r+0x974>
 8004444:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004446:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800444a:	e73c      	b.n	80042c6 <_dtoa_r+0x71e>
 800444c:	3fe00000 	.word	0x3fe00000
 8004450:	40240000 	.word	0x40240000
 8004454:	9b08      	ldr	r3, [sp, #32]
 8004456:	1e5c      	subs	r4, r3, #1
 8004458:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800445a:	42a3      	cmp	r3, r4
 800445c:	db09      	blt.n	8004472 <_dtoa_r+0x8ca>
 800445e:	1b1c      	subs	r4, r3, r4
 8004460:	9b08      	ldr	r3, [sp, #32]
 8004462:	2b00      	cmp	r3, #0
 8004464:	f6bf af30 	bge.w	80042c8 <_dtoa_r+0x720>
 8004468:	9b04      	ldr	r3, [sp, #16]
 800446a:	9a08      	ldr	r2, [sp, #32]
 800446c:	1a9e      	subs	r6, r3, r2
 800446e:	2300      	movs	r3, #0
 8004470:	e72b      	b.n	80042ca <_dtoa_r+0x722>
 8004472:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004474:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004476:	1ae3      	subs	r3, r4, r3
 8004478:	441a      	add	r2, r3
 800447a:	940a      	str	r4, [sp, #40]	@ 0x28
 800447c:	9e04      	ldr	r6, [sp, #16]
 800447e:	2400      	movs	r4, #0
 8004480:	9b08      	ldr	r3, [sp, #32]
 8004482:	920e      	str	r2, [sp, #56]	@ 0x38
 8004484:	e721      	b.n	80042ca <_dtoa_r+0x722>
 8004486:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004488:	9e04      	ldr	r6, [sp, #16]
 800448a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800448c:	e728      	b.n	80042e0 <_dtoa_r+0x738>
 800448e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004492:	e751      	b.n	8004338 <_dtoa_r+0x790>
 8004494:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004496:	9903      	ldr	r1, [sp, #12]
 8004498:	e750      	b.n	800433c <_dtoa_r+0x794>
 800449a:	f8cd 800c 	str.w	r8, [sp, #12]
 800449e:	e751      	b.n	8004344 <_dtoa_r+0x79c>
 80044a0:	2300      	movs	r3, #0
 80044a2:	e779      	b.n	8004398 <_dtoa_r+0x7f0>
 80044a4:	9b06      	ldr	r3, [sp, #24]
 80044a6:	e777      	b.n	8004398 <_dtoa_r+0x7f0>
 80044a8:	2300      	movs	r3, #0
 80044aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80044ac:	e779      	b.n	80043a2 <_dtoa_r+0x7fa>
 80044ae:	d093      	beq.n	80043d8 <_dtoa_r+0x830>
 80044b0:	9a04      	ldr	r2, [sp, #16]
 80044b2:	331c      	adds	r3, #28
 80044b4:	441a      	add	r2, r3
 80044b6:	9204      	str	r2, [sp, #16]
 80044b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80044ba:	441e      	add	r6, r3
 80044bc:	441a      	add	r2, r3
 80044be:	9209      	str	r2, [sp, #36]	@ 0x24
 80044c0:	e78a      	b.n	80043d8 <_dtoa_r+0x830>
 80044c2:	4603      	mov	r3, r0
 80044c4:	e7f4      	b.n	80044b0 <_dtoa_r+0x908>
 80044c6:	9b08      	ldr	r3, [sp, #32]
 80044c8:	46b8      	mov	r8, r7
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	dc20      	bgt.n	8004510 <_dtoa_r+0x968>
 80044ce:	469b      	mov	fp, r3
 80044d0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	dd1e      	ble.n	8004514 <_dtoa_r+0x96c>
 80044d6:	f1bb 0f00 	cmp.w	fp, #0
 80044da:	f47f adb1 	bne.w	8004040 <_dtoa_r+0x498>
 80044de:	4621      	mov	r1, r4
 80044e0:	465b      	mov	r3, fp
 80044e2:	2205      	movs	r2, #5
 80044e4:	4648      	mov	r0, r9
 80044e6:	f000 fa93 	bl	8004a10 <__multadd>
 80044ea:	4601      	mov	r1, r0
 80044ec:	4604      	mov	r4, r0
 80044ee:	9803      	ldr	r0, [sp, #12]
 80044f0:	f000 fc9e 	bl	8004e30 <__mcmp>
 80044f4:	2800      	cmp	r0, #0
 80044f6:	f77f ada3 	ble.w	8004040 <_dtoa_r+0x498>
 80044fa:	4656      	mov	r6, sl
 80044fc:	2331      	movs	r3, #49	@ 0x31
 80044fe:	f108 0801 	add.w	r8, r8, #1
 8004502:	f806 3b01 	strb.w	r3, [r6], #1
 8004506:	e59f      	b.n	8004048 <_dtoa_r+0x4a0>
 8004508:	46b8      	mov	r8, r7
 800450a:	9c08      	ldr	r4, [sp, #32]
 800450c:	4625      	mov	r5, r4
 800450e:	e7f4      	b.n	80044fa <_dtoa_r+0x952>
 8004510:	f8dd b020 	ldr.w	fp, [sp, #32]
 8004514:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004516:	2b00      	cmp	r3, #0
 8004518:	f000 8101 	beq.w	800471e <_dtoa_r+0xb76>
 800451c:	2e00      	cmp	r6, #0
 800451e:	dd05      	ble.n	800452c <_dtoa_r+0x984>
 8004520:	4629      	mov	r1, r5
 8004522:	4632      	mov	r2, r6
 8004524:	4648      	mov	r0, r9
 8004526:	f000 fc17 	bl	8004d58 <__lshift>
 800452a:	4605      	mov	r5, r0
 800452c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800452e:	2b00      	cmp	r3, #0
 8004530:	d05c      	beq.n	80045ec <_dtoa_r+0xa44>
 8004532:	4648      	mov	r0, r9
 8004534:	6869      	ldr	r1, [r5, #4]
 8004536:	f000 fa09 	bl	800494c <_Balloc>
 800453a:	4606      	mov	r6, r0
 800453c:	b928      	cbnz	r0, 800454a <_dtoa_r+0x9a2>
 800453e:	4602      	mov	r2, r0
 8004540:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004544:	4b80      	ldr	r3, [pc, #512]	@ (8004748 <_dtoa_r+0xba0>)
 8004546:	f7ff bb43 	b.w	8003bd0 <_dtoa_r+0x28>
 800454a:	692a      	ldr	r2, [r5, #16]
 800454c:	f105 010c 	add.w	r1, r5, #12
 8004550:	3202      	adds	r2, #2
 8004552:	0092      	lsls	r2, r2, #2
 8004554:	300c      	adds	r0, #12
 8004556:	f000 ff9d 	bl	8005494 <memcpy>
 800455a:	2201      	movs	r2, #1
 800455c:	4631      	mov	r1, r6
 800455e:	4648      	mov	r0, r9
 8004560:	f000 fbfa 	bl	8004d58 <__lshift>
 8004564:	462f      	mov	r7, r5
 8004566:	4605      	mov	r5, r0
 8004568:	f10a 0301 	add.w	r3, sl, #1
 800456c:	9304      	str	r3, [sp, #16]
 800456e:	eb0a 030b 	add.w	r3, sl, fp
 8004572:	930a      	str	r3, [sp, #40]	@ 0x28
 8004574:	9b06      	ldr	r3, [sp, #24]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	9309      	str	r3, [sp, #36]	@ 0x24
 800457c:	9b04      	ldr	r3, [sp, #16]
 800457e:	4621      	mov	r1, r4
 8004580:	9803      	ldr	r0, [sp, #12]
 8004582:	f103 3bff 	add.w	fp, r3, #4294967295
 8004586:	f7ff fa84 	bl	8003a92 <quorem>
 800458a:	4603      	mov	r3, r0
 800458c:	4639      	mov	r1, r7
 800458e:	3330      	adds	r3, #48	@ 0x30
 8004590:	9006      	str	r0, [sp, #24]
 8004592:	9803      	ldr	r0, [sp, #12]
 8004594:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004596:	f000 fc4b 	bl	8004e30 <__mcmp>
 800459a:	462a      	mov	r2, r5
 800459c:	9008      	str	r0, [sp, #32]
 800459e:	4621      	mov	r1, r4
 80045a0:	4648      	mov	r0, r9
 80045a2:	f000 fc61 	bl	8004e68 <__mdiff>
 80045a6:	68c2      	ldr	r2, [r0, #12]
 80045a8:	4606      	mov	r6, r0
 80045aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80045ac:	bb02      	cbnz	r2, 80045f0 <_dtoa_r+0xa48>
 80045ae:	4601      	mov	r1, r0
 80045b0:	9803      	ldr	r0, [sp, #12]
 80045b2:	f000 fc3d 	bl	8004e30 <__mcmp>
 80045b6:	4602      	mov	r2, r0
 80045b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80045ba:	4631      	mov	r1, r6
 80045bc:	4648      	mov	r0, r9
 80045be:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 80045c2:	f000 fa03 	bl	80049cc <_Bfree>
 80045c6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80045c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80045ca:	9e04      	ldr	r6, [sp, #16]
 80045cc:	ea42 0103 	orr.w	r1, r2, r3
 80045d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045d2:	4319      	orrs	r1, r3
 80045d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80045d6:	d10d      	bne.n	80045f4 <_dtoa_r+0xa4c>
 80045d8:	2b39      	cmp	r3, #57	@ 0x39
 80045da:	d027      	beq.n	800462c <_dtoa_r+0xa84>
 80045dc:	9a08      	ldr	r2, [sp, #32]
 80045de:	2a00      	cmp	r2, #0
 80045e0:	dd01      	ble.n	80045e6 <_dtoa_r+0xa3e>
 80045e2:	9b06      	ldr	r3, [sp, #24]
 80045e4:	3331      	adds	r3, #49	@ 0x31
 80045e6:	f88b 3000 	strb.w	r3, [fp]
 80045ea:	e52e      	b.n	800404a <_dtoa_r+0x4a2>
 80045ec:	4628      	mov	r0, r5
 80045ee:	e7b9      	b.n	8004564 <_dtoa_r+0x9bc>
 80045f0:	2201      	movs	r2, #1
 80045f2:	e7e2      	b.n	80045ba <_dtoa_r+0xa12>
 80045f4:	9908      	ldr	r1, [sp, #32]
 80045f6:	2900      	cmp	r1, #0
 80045f8:	db04      	blt.n	8004604 <_dtoa_r+0xa5c>
 80045fa:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80045fc:	4301      	orrs	r1, r0
 80045fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004600:	4301      	orrs	r1, r0
 8004602:	d120      	bne.n	8004646 <_dtoa_r+0xa9e>
 8004604:	2a00      	cmp	r2, #0
 8004606:	ddee      	ble.n	80045e6 <_dtoa_r+0xa3e>
 8004608:	2201      	movs	r2, #1
 800460a:	9903      	ldr	r1, [sp, #12]
 800460c:	4648      	mov	r0, r9
 800460e:	9304      	str	r3, [sp, #16]
 8004610:	f000 fba2 	bl	8004d58 <__lshift>
 8004614:	4621      	mov	r1, r4
 8004616:	9003      	str	r0, [sp, #12]
 8004618:	f000 fc0a 	bl	8004e30 <__mcmp>
 800461c:	2800      	cmp	r0, #0
 800461e:	9b04      	ldr	r3, [sp, #16]
 8004620:	dc02      	bgt.n	8004628 <_dtoa_r+0xa80>
 8004622:	d1e0      	bne.n	80045e6 <_dtoa_r+0xa3e>
 8004624:	07da      	lsls	r2, r3, #31
 8004626:	d5de      	bpl.n	80045e6 <_dtoa_r+0xa3e>
 8004628:	2b39      	cmp	r3, #57	@ 0x39
 800462a:	d1da      	bne.n	80045e2 <_dtoa_r+0xa3a>
 800462c:	2339      	movs	r3, #57	@ 0x39
 800462e:	f88b 3000 	strb.w	r3, [fp]
 8004632:	4633      	mov	r3, r6
 8004634:	461e      	mov	r6, r3
 8004636:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800463a:	3b01      	subs	r3, #1
 800463c:	2a39      	cmp	r2, #57	@ 0x39
 800463e:	d04e      	beq.n	80046de <_dtoa_r+0xb36>
 8004640:	3201      	adds	r2, #1
 8004642:	701a      	strb	r2, [r3, #0]
 8004644:	e501      	b.n	800404a <_dtoa_r+0x4a2>
 8004646:	2a00      	cmp	r2, #0
 8004648:	dd03      	ble.n	8004652 <_dtoa_r+0xaaa>
 800464a:	2b39      	cmp	r3, #57	@ 0x39
 800464c:	d0ee      	beq.n	800462c <_dtoa_r+0xa84>
 800464e:	3301      	adds	r3, #1
 8004650:	e7c9      	b.n	80045e6 <_dtoa_r+0xa3e>
 8004652:	9a04      	ldr	r2, [sp, #16]
 8004654:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004656:	f802 3c01 	strb.w	r3, [r2, #-1]
 800465a:	428a      	cmp	r2, r1
 800465c:	d028      	beq.n	80046b0 <_dtoa_r+0xb08>
 800465e:	2300      	movs	r3, #0
 8004660:	220a      	movs	r2, #10
 8004662:	9903      	ldr	r1, [sp, #12]
 8004664:	4648      	mov	r0, r9
 8004666:	f000 f9d3 	bl	8004a10 <__multadd>
 800466a:	42af      	cmp	r7, r5
 800466c:	9003      	str	r0, [sp, #12]
 800466e:	f04f 0300 	mov.w	r3, #0
 8004672:	f04f 020a 	mov.w	r2, #10
 8004676:	4639      	mov	r1, r7
 8004678:	4648      	mov	r0, r9
 800467a:	d107      	bne.n	800468c <_dtoa_r+0xae4>
 800467c:	f000 f9c8 	bl	8004a10 <__multadd>
 8004680:	4607      	mov	r7, r0
 8004682:	4605      	mov	r5, r0
 8004684:	9b04      	ldr	r3, [sp, #16]
 8004686:	3301      	adds	r3, #1
 8004688:	9304      	str	r3, [sp, #16]
 800468a:	e777      	b.n	800457c <_dtoa_r+0x9d4>
 800468c:	f000 f9c0 	bl	8004a10 <__multadd>
 8004690:	4629      	mov	r1, r5
 8004692:	4607      	mov	r7, r0
 8004694:	2300      	movs	r3, #0
 8004696:	220a      	movs	r2, #10
 8004698:	4648      	mov	r0, r9
 800469a:	f000 f9b9 	bl	8004a10 <__multadd>
 800469e:	4605      	mov	r5, r0
 80046a0:	e7f0      	b.n	8004684 <_dtoa_r+0xadc>
 80046a2:	f1bb 0f00 	cmp.w	fp, #0
 80046a6:	bfcc      	ite	gt
 80046a8:	465e      	movgt	r6, fp
 80046aa:	2601      	movle	r6, #1
 80046ac:	2700      	movs	r7, #0
 80046ae:	4456      	add	r6, sl
 80046b0:	2201      	movs	r2, #1
 80046b2:	9903      	ldr	r1, [sp, #12]
 80046b4:	4648      	mov	r0, r9
 80046b6:	9304      	str	r3, [sp, #16]
 80046b8:	f000 fb4e 	bl	8004d58 <__lshift>
 80046bc:	4621      	mov	r1, r4
 80046be:	9003      	str	r0, [sp, #12]
 80046c0:	f000 fbb6 	bl	8004e30 <__mcmp>
 80046c4:	2800      	cmp	r0, #0
 80046c6:	dcb4      	bgt.n	8004632 <_dtoa_r+0xa8a>
 80046c8:	d102      	bne.n	80046d0 <_dtoa_r+0xb28>
 80046ca:	9b04      	ldr	r3, [sp, #16]
 80046cc:	07db      	lsls	r3, r3, #31
 80046ce:	d4b0      	bmi.n	8004632 <_dtoa_r+0xa8a>
 80046d0:	4633      	mov	r3, r6
 80046d2:	461e      	mov	r6, r3
 80046d4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80046d8:	2a30      	cmp	r2, #48	@ 0x30
 80046da:	d0fa      	beq.n	80046d2 <_dtoa_r+0xb2a>
 80046dc:	e4b5      	b.n	800404a <_dtoa_r+0x4a2>
 80046de:	459a      	cmp	sl, r3
 80046e0:	d1a8      	bne.n	8004634 <_dtoa_r+0xa8c>
 80046e2:	2331      	movs	r3, #49	@ 0x31
 80046e4:	f108 0801 	add.w	r8, r8, #1
 80046e8:	f88a 3000 	strb.w	r3, [sl]
 80046ec:	e4ad      	b.n	800404a <_dtoa_r+0x4a2>
 80046ee:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80046f0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800474c <_dtoa_r+0xba4>
 80046f4:	b11b      	cbz	r3, 80046fe <_dtoa_r+0xb56>
 80046f6:	f10a 0308 	add.w	r3, sl, #8
 80046fa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80046fc:	6013      	str	r3, [r2, #0]
 80046fe:	4650      	mov	r0, sl
 8004700:	b017      	add	sp, #92	@ 0x5c
 8004702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004706:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004708:	2b01      	cmp	r3, #1
 800470a:	f77f ae2e 	ble.w	800436a <_dtoa_r+0x7c2>
 800470e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004710:	930a      	str	r3, [sp, #40]	@ 0x28
 8004712:	2001      	movs	r0, #1
 8004714:	e64d      	b.n	80043b2 <_dtoa_r+0x80a>
 8004716:	f1bb 0f00 	cmp.w	fp, #0
 800471a:	f77f aed9 	ble.w	80044d0 <_dtoa_r+0x928>
 800471e:	4656      	mov	r6, sl
 8004720:	4621      	mov	r1, r4
 8004722:	9803      	ldr	r0, [sp, #12]
 8004724:	f7ff f9b5 	bl	8003a92 <quorem>
 8004728:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800472c:	f806 3b01 	strb.w	r3, [r6], #1
 8004730:	eba6 020a 	sub.w	r2, r6, sl
 8004734:	4593      	cmp	fp, r2
 8004736:	ddb4      	ble.n	80046a2 <_dtoa_r+0xafa>
 8004738:	2300      	movs	r3, #0
 800473a:	220a      	movs	r2, #10
 800473c:	4648      	mov	r0, r9
 800473e:	9903      	ldr	r1, [sp, #12]
 8004740:	f000 f966 	bl	8004a10 <__multadd>
 8004744:	9003      	str	r0, [sp, #12]
 8004746:	e7eb      	b.n	8004720 <_dtoa_r+0xb78>
 8004748:	08005d1a 	.word	0x08005d1a
 800474c:	08005c9e 	.word	0x08005c9e

08004750 <_free_r>:
 8004750:	b538      	push	{r3, r4, r5, lr}
 8004752:	4605      	mov	r5, r0
 8004754:	2900      	cmp	r1, #0
 8004756:	d040      	beq.n	80047da <_free_r+0x8a>
 8004758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800475c:	1f0c      	subs	r4, r1, #4
 800475e:	2b00      	cmp	r3, #0
 8004760:	bfb8      	it	lt
 8004762:	18e4      	addlt	r4, r4, r3
 8004764:	f000 f8e6 	bl	8004934 <__malloc_lock>
 8004768:	4a1c      	ldr	r2, [pc, #112]	@ (80047dc <_free_r+0x8c>)
 800476a:	6813      	ldr	r3, [r2, #0]
 800476c:	b933      	cbnz	r3, 800477c <_free_r+0x2c>
 800476e:	6063      	str	r3, [r4, #4]
 8004770:	6014      	str	r4, [r2, #0]
 8004772:	4628      	mov	r0, r5
 8004774:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004778:	f000 b8e2 	b.w	8004940 <__malloc_unlock>
 800477c:	42a3      	cmp	r3, r4
 800477e:	d908      	bls.n	8004792 <_free_r+0x42>
 8004780:	6820      	ldr	r0, [r4, #0]
 8004782:	1821      	adds	r1, r4, r0
 8004784:	428b      	cmp	r3, r1
 8004786:	bf01      	itttt	eq
 8004788:	6819      	ldreq	r1, [r3, #0]
 800478a:	685b      	ldreq	r3, [r3, #4]
 800478c:	1809      	addeq	r1, r1, r0
 800478e:	6021      	streq	r1, [r4, #0]
 8004790:	e7ed      	b.n	800476e <_free_r+0x1e>
 8004792:	461a      	mov	r2, r3
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	b10b      	cbz	r3, 800479c <_free_r+0x4c>
 8004798:	42a3      	cmp	r3, r4
 800479a:	d9fa      	bls.n	8004792 <_free_r+0x42>
 800479c:	6811      	ldr	r1, [r2, #0]
 800479e:	1850      	adds	r0, r2, r1
 80047a0:	42a0      	cmp	r0, r4
 80047a2:	d10b      	bne.n	80047bc <_free_r+0x6c>
 80047a4:	6820      	ldr	r0, [r4, #0]
 80047a6:	4401      	add	r1, r0
 80047a8:	1850      	adds	r0, r2, r1
 80047aa:	4283      	cmp	r3, r0
 80047ac:	6011      	str	r1, [r2, #0]
 80047ae:	d1e0      	bne.n	8004772 <_free_r+0x22>
 80047b0:	6818      	ldr	r0, [r3, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	4408      	add	r0, r1
 80047b6:	6010      	str	r0, [r2, #0]
 80047b8:	6053      	str	r3, [r2, #4]
 80047ba:	e7da      	b.n	8004772 <_free_r+0x22>
 80047bc:	d902      	bls.n	80047c4 <_free_r+0x74>
 80047be:	230c      	movs	r3, #12
 80047c0:	602b      	str	r3, [r5, #0]
 80047c2:	e7d6      	b.n	8004772 <_free_r+0x22>
 80047c4:	6820      	ldr	r0, [r4, #0]
 80047c6:	1821      	adds	r1, r4, r0
 80047c8:	428b      	cmp	r3, r1
 80047ca:	bf01      	itttt	eq
 80047cc:	6819      	ldreq	r1, [r3, #0]
 80047ce:	685b      	ldreq	r3, [r3, #4]
 80047d0:	1809      	addeq	r1, r1, r0
 80047d2:	6021      	streq	r1, [r4, #0]
 80047d4:	6063      	str	r3, [r4, #4]
 80047d6:	6054      	str	r4, [r2, #4]
 80047d8:	e7cb      	b.n	8004772 <_free_r+0x22>
 80047da:	bd38      	pop	{r3, r4, r5, pc}
 80047dc:	200004c4 	.word	0x200004c4

080047e0 <malloc>:
 80047e0:	4b02      	ldr	r3, [pc, #8]	@ (80047ec <malloc+0xc>)
 80047e2:	4601      	mov	r1, r0
 80047e4:	6818      	ldr	r0, [r3, #0]
 80047e6:	f000 b825 	b.w	8004834 <_malloc_r>
 80047ea:	bf00      	nop
 80047ec:	20000018 	.word	0x20000018

080047f0 <sbrk_aligned>:
 80047f0:	b570      	push	{r4, r5, r6, lr}
 80047f2:	4e0f      	ldr	r6, [pc, #60]	@ (8004830 <sbrk_aligned+0x40>)
 80047f4:	460c      	mov	r4, r1
 80047f6:	6831      	ldr	r1, [r6, #0]
 80047f8:	4605      	mov	r5, r0
 80047fa:	b911      	cbnz	r1, 8004802 <sbrk_aligned+0x12>
 80047fc:	f000 fe3a 	bl	8005474 <_sbrk_r>
 8004800:	6030      	str	r0, [r6, #0]
 8004802:	4621      	mov	r1, r4
 8004804:	4628      	mov	r0, r5
 8004806:	f000 fe35 	bl	8005474 <_sbrk_r>
 800480a:	1c43      	adds	r3, r0, #1
 800480c:	d103      	bne.n	8004816 <sbrk_aligned+0x26>
 800480e:	f04f 34ff 	mov.w	r4, #4294967295
 8004812:	4620      	mov	r0, r4
 8004814:	bd70      	pop	{r4, r5, r6, pc}
 8004816:	1cc4      	adds	r4, r0, #3
 8004818:	f024 0403 	bic.w	r4, r4, #3
 800481c:	42a0      	cmp	r0, r4
 800481e:	d0f8      	beq.n	8004812 <sbrk_aligned+0x22>
 8004820:	1a21      	subs	r1, r4, r0
 8004822:	4628      	mov	r0, r5
 8004824:	f000 fe26 	bl	8005474 <_sbrk_r>
 8004828:	3001      	adds	r0, #1
 800482a:	d1f2      	bne.n	8004812 <sbrk_aligned+0x22>
 800482c:	e7ef      	b.n	800480e <sbrk_aligned+0x1e>
 800482e:	bf00      	nop
 8004830:	200004c0 	.word	0x200004c0

08004834 <_malloc_r>:
 8004834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004838:	1ccd      	adds	r5, r1, #3
 800483a:	f025 0503 	bic.w	r5, r5, #3
 800483e:	3508      	adds	r5, #8
 8004840:	2d0c      	cmp	r5, #12
 8004842:	bf38      	it	cc
 8004844:	250c      	movcc	r5, #12
 8004846:	2d00      	cmp	r5, #0
 8004848:	4606      	mov	r6, r0
 800484a:	db01      	blt.n	8004850 <_malloc_r+0x1c>
 800484c:	42a9      	cmp	r1, r5
 800484e:	d904      	bls.n	800485a <_malloc_r+0x26>
 8004850:	230c      	movs	r3, #12
 8004852:	6033      	str	r3, [r6, #0]
 8004854:	2000      	movs	r0, #0
 8004856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800485a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004930 <_malloc_r+0xfc>
 800485e:	f000 f869 	bl	8004934 <__malloc_lock>
 8004862:	f8d8 3000 	ldr.w	r3, [r8]
 8004866:	461c      	mov	r4, r3
 8004868:	bb44      	cbnz	r4, 80048bc <_malloc_r+0x88>
 800486a:	4629      	mov	r1, r5
 800486c:	4630      	mov	r0, r6
 800486e:	f7ff ffbf 	bl	80047f0 <sbrk_aligned>
 8004872:	1c43      	adds	r3, r0, #1
 8004874:	4604      	mov	r4, r0
 8004876:	d158      	bne.n	800492a <_malloc_r+0xf6>
 8004878:	f8d8 4000 	ldr.w	r4, [r8]
 800487c:	4627      	mov	r7, r4
 800487e:	2f00      	cmp	r7, #0
 8004880:	d143      	bne.n	800490a <_malloc_r+0xd6>
 8004882:	2c00      	cmp	r4, #0
 8004884:	d04b      	beq.n	800491e <_malloc_r+0xea>
 8004886:	6823      	ldr	r3, [r4, #0]
 8004888:	4639      	mov	r1, r7
 800488a:	4630      	mov	r0, r6
 800488c:	eb04 0903 	add.w	r9, r4, r3
 8004890:	f000 fdf0 	bl	8005474 <_sbrk_r>
 8004894:	4581      	cmp	r9, r0
 8004896:	d142      	bne.n	800491e <_malloc_r+0xea>
 8004898:	6821      	ldr	r1, [r4, #0]
 800489a:	4630      	mov	r0, r6
 800489c:	1a6d      	subs	r5, r5, r1
 800489e:	4629      	mov	r1, r5
 80048a0:	f7ff ffa6 	bl	80047f0 <sbrk_aligned>
 80048a4:	3001      	adds	r0, #1
 80048a6:	d03a      	beq.n	800491e <_malloc_r+0xea>
 80048a8:	6823      	ldr	r3, [r4, #0]
 80048aa:	442b      	add	r3, r5
 80048ac:	6023      	str	r3, [r4, #0]
 80048ae:	f8d8 3000 	ldr.w	r3, [r8]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	bb62      	cbnz	r2, 8004910 <_malloc_r+0xdc>
 80048b6:	f8c8 7000 	str.w	r7, [r8]
 80048ba:	e00f      	b.n	80048dc <_malloc_r+0xa8>
 80048bc:	6822      	ldr	r2, [r4, #0]
 80048be:	1b52      	subs	r2, r2, r5
 80048c0:	d420      	bmi.n	8004904 <_malloc_r+0xd0>
 80048c2:	2a0b      	cmp	r2, #11
 80048c4:	d917      	bls.n	80048f6 <_malloc_r+0xc2>
 80048c6:	1961      	adds	r1, r4, r5
 80048c8:	42a3      	cmp	r3, r4
 80048ca:	6025      	str	r5, [r4, #0]
 80048cc:	bf18      	it	ne
 80048ce:	6059      	strne	r1, [r3, #4]
 80048d0:	6863      	ldr	r3, [r4, #4]
 80048d2:	bf08      	it	eq
 80048d4:	f8c8 1000 	streq.w	r1, [r8]
 80048d8:	5162      	str	r2, [r4, r5]
 80048da:	604b      	str	r3, [r1, #4]
 80048dc:	4630      	mov	r0, r6
 80048de:	f000 f82f 	bl	8004940 <__malloc_unlock>
 80048e2:	f104 000b 	add.w	r0, r4, #11
 80048e6:	1d23      	adds	r3, r4, #4
 80048e8:	f020 0007 	bic.w	r0, r0, #7
 80048ec:	1ac2      	subs	r2, r0, r3
 80048ee:	bf1c      	itt	ne
 80048f0:	1a1b      	subne	r3, r3, r0
 80048f2:	50a3      	strne	r3, [r4, r2]
 80048f4:	e7af      	b.n	8004856 <_malloc_r+0x22>
 80048f6:	6862      	ldr	r2, [r4, #4]
 80048f8:	42a3      	cmp	r3, r4
 80048fa:	bf0c      	ite	eq
 80048fc:	f8c8 2000 	streq.w	r2, [r8]
 8004900:	605a      	strne	r2, [r3, #4]
 8004902:	e7eb      	b.n	80048dc <_malloc_r+0xa8>
 8004904:	4623      	mov	r3, r4
 8004906:	6864      	ldr	r4, [r4, #4]
 8004908:	e7ae      	b.n	8004868 <_malloc_r+0x34>
 800490a:	463c      	mov	r4, r7
 800490c:	687f      	ldr	r7, [r7, #4]
 800490e:	e7b6      	b.n	800487e <_malloc_r+0x4a>
 8004910:	461a      	mov	r2, r3
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	42a3      	cmp	r3, r4
 8004916:	d1fb      	bne.n	8004910 <_malloc_r+0xdc>
 8004918:	2300      	movs	r3, #0
 800491a:	6053      	str	r3, [r2, #4]
 800491c:	e7de      	b.n	80048dc <_malloc_r+0xa8>
 800491e:	230c      	movs	r3, #12
 8004920:	4630      	mov	r0, r6
 8004922:	6033      	str	r3, [r6, #0]
 8004924:	f000 f80c 	bl	8004940 <__malloc_unlock>
 8004928:	e794      	b.n	8004854 <_malloc_r+0x20>
 800492a:	6005      	str	r5, [r0, #0]
 800492c:	e7d6      	b.n	80048dc <_malloc_r+0xa8>
 800492e:	bf00      	nop
 8004930:	200004c4 	.word	0x200004c4

08004934 <__malloc_lock>:
 8004934:	4801      	ldr	r0, [pc, #4]	@ (800493c <__malloc_lock+0x8>)
 8004936:	f7ff b89c 	b.w	8003a72 <__retarget_lock_acquire_recursive>
 800493a:	bf00      	nop
 800493c:	200004bc 	.word	0x200004bc

08004940 <__malloc_unlock>:
 8004940:	4801      	ldr	r0, [pc, #4]	@ (8004948 <__malloc_unlock+0x8>)
 8004942:	f7ff b897 	b.w	8003a74 <__retarget_lock_release_recursive>
 8004946:	bf00      	nop
 8004948:	200004bc 	.word	0x200004bc

0800494c <_Balloc>:
 800494c:	b570      	push	{r4, r5, r6, lr}
 800494e:	69c6      	ldr	r6, [r0, #28]
 8004950:	4604      	mov	r4, r0
 8004952:	460d      	mov	r5, r1
 8004954:	b976      	cbnz	r6, 8004974 <_Balloc+0x28>
 8004956:	2010      	movs	r0, #16
 8004958:	f7ff ff42 	bl	80047e0 <malloc>
 800495c:	4602      	mov	r2, r0
 800495e:	61e0      	str	r0, [r4, #28]
 8004960:	b920      	cbnz	r0, 800496c <_Balloc+0x20>
 8004962:	216b      	movs	r1, #107	@ 0x6b
 8004964:	4b17      	ldr	r3, [pc, #92]	@ (80049c4 <_Balloc+0x78>)
 8004966:	4818      	ldr	r0, [pc, #96]	@ (80049c8 <_Balloc+0x7c>)
 8004968:	f000 fda2 	bl	80054b0 <__assert_func>
 800496c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004970:	6006      	str	r6, [r0, #0]
 8004972:	60c6      	str	r6, [r0, #12]
 8004974:	69e6      	ldr	r6, [r4, #28]
 8004976:	68f3      	ldr	r3, [r6, #12]
 8004978:	b183      	cbz	r3, 800499c <_Balloc+0x50>
 800497a:	69e3      	ldr	r3, [r4, #28]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004982:	b9b8      	cbnz	r0, 80049b4 <_Balloc+0x68>
 8004984:	2101      	movs	r1, #1
 8004986:	fa01 f605 	lsl.w	r6, r1, r5
 800498a:	1d72      	adds	r2, r6, #5
 800498c:	4620      	mov	r0, r4
 800498e:	0092      	lsls	r2, r2, #2
 8004990:	f000 fdac 	bl	80054ec <_calloc_r>
 8004994:	b160      	cbz	r0, 80049b0 <_Balloc+0x64>
 8004996:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800499a:	e00e      	b.n	80049ba <_Balloc+0x6e>
 800499c:	2221      	movs	r2, #33	@ 0x21
 800499e:	2104      	movs	r1, #4
 80049a0:	4620      	mov	r0, r4
 80049a2:	f000 fda3 	bl	80054ec <_calloc_r>
 80049a6:	69e3      	ldr	r3, [r4, #28]
 80049a8:	60f0      	str	r0, [r6, #12]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1e4      	bne.n	800497a <_Balloc+0x2e>
 80049b0:	2000      	movs	r0, #0
 80049b2:	bd70      	pop	{r4, r5, r6, pc}
 80049b4:	6802      	ldr	r2, [r0, #0]
 80049b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80049ba:	2300      	movs	r3, #0
 80049bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80049c0:	e7f7      	b.n	80049b2 <_Balloc+0x66>
 80049c2:	bf00      	nop
 80049c4:	08005cab 	.word	0x08005cab
 80049c8:	08005d2b 	.word	0x08005d2b

080049cc <_Bfree>:
 80049cc:	b570      	push	{r4, r5, r6, lr}
 80049ce:	69c6      	ldr	r6, [r0, #28]
 80049d0:	4605      	mov	r5, r0
 80049d2:	460c      	mov	r4, r1
 80049d4:	b976      	cbnz	r6, 80049f4 <_Bfree+0x28>
 80049d6:	2010      	movs	r0, #16
 80049d8:	f7ff ff02 	bl	80047e0 <malloc>
 80049dc:	4602      	mov	r2, r0
 80049de:	61e8      	str	r0, [r5, #28]
 80049e0:	b920      	cbnz	r0, 80049ec <_Bfree+0x20>
 80049e2:	218f      	movs	r1, #143	@ 0x8f
 80049e4:	4b08      	ldr	r3, [pc, #32]	@ (8004a08 <_Bfree+0x3c>)
 80049e6:	4809      	ldr	r0, [pc, #36]	@ (8004a0c <_Bfree+0x40>)
 80049e8:	f000 fd62 	bl	80054b0 <__assert_func>
 80049ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80049f0:	6006      	str	r6, [r0, #0]
 80049f2:	60c6      	str	r6, [r0, #12]
 80049f4:	b13c      	cbz	r4, 8004a06 <_Bfree+0x3a>
 80049f6:	69eb      	ldr	r3, [r5, #28]
 80049f8:	6862      	ldr	r2, [r4, #4]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a00:	6021      	str	r1, [r4, #0]
 8004a02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004a06:	bd70      	pop	{r4, r5, r6, pc}
 8004a08:	08005cab 	.word	0x08005cab
 8004a0c:	08005d2b 	.word	0x08005d2b

08004a10 <__multadd>:
 8004a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a14:	4607      	mov	r7, r0
 8004a16:	460c      	mov	r4, r1
 8004a18:	461e      	mov	r6, r3
 8004a1a:	2000      	movs	r0, #0
 8004a1c:	690d      	ldr	r5, [r1, #16]
 8004a1e:	f101 0c14 	add.w	ip, r1, #20
 8004a22:	f8dc 3000 	ldr.w	r3, [ip]
 8004a26:	3001      	adds	r0, #1
 8004a28:	b299      	uxth	r1, r3
 8004a2a:	fb02 6101 	mla	r1, r2, r1, r6
 8004a2e:	0c1e      	lsrs	r6, r3, #16
 8004a30:	0c0b      	lsrs	r3, r1, #16
 8004a32:	fb02 3306 	mla	r3, r2, r6, r3
 8004a36:	b289      	uxth	r1, r1
 8004a38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004a3c:	4285      	cmp	r5, r0
 8004a3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004a42:	f84c 1b04 	str.w	r1, [ip], #4
 8004a46:	dcec      	bgt.n	8004a22 <__multadd+0x12>
 8004a48:	b30e      	cbz	r6, 8004a8e <__multadd+0x7e>
 8004a4a:	68a3      	ldr	r3, [r4, #8]
 8004a4c:	42ab      	cmp	r3, r5
 8004a4e:	dc19      	bgt.n	8004a84 <__multadd+0x74>
 8004a50:	6861      	ldr	r1, [r4, #4]
 8004a52:	4638      	mov	r0, r7
 8004a54:	3101      	adds	r1, #1
 8004a56:	f7ff ff79 	bl	800494c <_Balloc>
 8004a5a:	4680      	mov	r8, r0
 8004a5c:	b928      	cbnz	r0, 8004a6a <__multadd+0x5a>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	21ba      	movs	r1, #186	@ 0xba
 8004a62:	4b0c      	ldr	r3, [pc, #48]	@ (8004a94 <__multadd+0x84>)
 8004a64:	480c      	ldr	r0, [pc, #48]	@ (8004a98 <__multadd+0x88>)
 8004a66:	f000 fd23 	bl	80054b0 <__assert_func>
 8004a6a:	6922      	ldr	r2, [r4, #16]
 8004a6c:	f104 010c 	add.w	r1, r4, #12
 8004a70:	3202      	adds	r2, #2
 8004a72:	0092      	lsls	r2, r2, #2
 8004a74:	300c      	adds	r0, #12
 8004a76:	f000 fd0d 	bl	8005494 <memcpy>
 8004a7a:	4621      	mov	r1, r4
 8004a7c:	4638      	mov	r0, r7
 8004a7e:	f7ff ffa5 	bl	80049cc <_Bfree>
 8004a82:	4644      	mov	r4, r8
 8004a84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004a88:	3501      	adds	r5, #1
 8004a8a:	615e      	str	r6, [r3, #20]
 8004a8c:	6125      	str	r5, [r4, #16]
 8004a8e:	4620      	mov	r0, r4
 8004a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a94:	08005d1a 	.word	0x08005d1a
 8004a98:	08005d2b 	.word	0x08005d2b

08004a9c <__hi0bits>:
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004aa2:	bf3a      	itte	cc
 8004aa4:	0403      	lslcc	r3, r0, #16
 8004aa6:	2010      	movcc	r0, #16
 8004aa8:	2000      	movcs	r0, #0
 8004aaa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004aae:	bf3c      	itt	cc
 8004ab0:	021b      	lslcc	r3, r3, #8
 8004ab2:	3008      	addcc	r0, #8
 8004ab4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ab8:	bf3c      	itt	cc
 8004aba:	011b      	lslcc	r3, r3, #4
 8004abc:	3004      	addcc	r0, #4
 8004abe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ac2:	bf3c      	itt	cc
 8004ac4:	009b      	lslcc	r3, r3, #2
 8004ac6:	3002      	addcc	r0, #2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	db05      	blt.n	8004ad8 <__hi0bits+0x3c>
 8004acc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004ad0:	f100 0001 	add.w	r0, r0, #1
 8004ad4:	bf08      	it	eq
 8004ad6:	2020      	moveq	r0, #32
 8004ad8:	4770      	bx	lr

08004ada <__lo0bits>:
 8004ada:	6803      	ldr	r3, [r0, #0]
 8004adc:	4602      	mov	r2, r0
 8004ade:	f013 0007 	ands.w	r0, r3, #7
 8004ae2:	d00b      	beq.n	8004afc <__lo0bits+0x22>
 8004ae4:	07d9      	lsls	r1, r3, #31
 8004ae6:	d421      	bmi.n	8004b2c <__lo0bits+0x52>
 8004ae8:	0798      	lsls	r0, r3, #30
 8004aea:	bf49      	itett	mi
 8004aec:	085b      	lsrmi	r3, r3, #1
 8004aee:	089b      	lsrpl	r3, r3, #2
 8004af0:	2001      	movmi	r0, #1
 8004af2:	6013      	strmi	r3, [r2, #0]
 8004af4:	bf5c      	itt	pl
 8004af6:	2002      	movpl	r0, #2
 8004af8:	6013      	strpl	r3, [r2, #0]
 8004afa:	4770      	bx	lr
 8004afc:	b299      	uxth	r1, r3
 8004afe:	b909      	cbnz	r1, 8004b04 <__lo0bits+0x2a>
 8004b00:	2010      	movs	r0, #16
 8004b02:	0c1b      	lsrs	r3, r3, #16
 8004b04:	b2d9      	uxtb	r1, r3
 8004b06:	b909      	cbnz	r1, 8004b0c <__lo0bits+0x32>
 8004b08:	3008      	adds	r0, #8
 8004b0a:	0a1b      	lsrs	r3, r3, #8
 8004b0c:	0719      	lsls	r1, r3, #28
 8004b0e:	bf04      	itt	eq
 8004b10:	091b      	lsreq	r3, r3, #4
 8004b12:	3004      	addeq	r0, #4
 8004b14:	0799      	lsls	r1, r3, #30
 8004b16:	bf04      	itt	eq
 8004b18:	089b      	lsreq	r3, r3, #2
 8004b1a:	3002      	addeq	r0, #2
 8004b1c:	07d9      	lsls	r1, r3, #31
 8004b1e:	d403      	bmi.n	8004b28 <__lo0bits+0x4e>
 8004b20:	085b      	lsrs	r3, r3, #1
 8004b22:	f100 0001 	add.w	r0, r0, #1
 8004b26:	d003      	beq.n	8004b30 <__lo0bits+0x56>
 8004b28:	6013      	str	r3, [r2, #0]
 8004b2a:	4770      	bx	lr
 8004b2c:	2000      	movs	r0, #0
 8004b2e:	4770      	bx	lr
 8004b30:	2020      	movs	r0, #32
 8004b32:	4770      	bx	lr

08004b34 <__i2b>:
 8004b34:	b510      	push	{r4, lr}
 8004b36:	460c      	mov	r4, r1
 8004b38:	2101      	movs	r1, #1
 8004b3a:	f7ff ff07 	bl	800494c <_Balloc>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	b928      	cbnz	r0, 8004b4e <__i2b+0x1a>
 8004b42:	f240 1145 	movw	r1, #325	@ 0x145
 8004b46:	4b04      	ldr	r3, [pc, #16]	@ (8004b58 <__i2b+0x24>)
 8004b48:	4804      	ldr	r0, [pc, #16]	@ (8004b5c <__i2b+0x28>)
 8004b4a:	f000 fcb1 	bl	80054b0 <__assert_func>
 8004b4e:	2301      	movs	r3, #1
 8004b50:	6144      	str	r4, [r0, #20]
 8004b52:	6103      	str	r3, [r0, #16]
 8004b54:	bd10      	pop	{r4, pc}
 8004b56:	bf00      	nop
 8004b58:	08005d1a 	.word	0x08005d1a
 8004b5c:	08005d2b 	.word	0x08005d2b

08004b60 <__multiply>:
 8004b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b64:	4617      	mov	r7, r2
 8004b66:	690a      	ldr	r2, [r1, #16]
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	4689      	mov	r9, r1
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	bfa2      	ittt	ge
 8004b70:	463b      	movge	r3, r7
 8004b72:	460f      	movge	r7, r1
 8004b74:	4699      	movge	r9, r3
 8004b76:	693d      	ldr	r5, [r7, #16]
 8004b78:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	6879      	ldr	r1, [r7, #4]
 8004b80:	eb05 060a 	add.w	r6, r5, sl
 8004b84:	42b3      	cmp	r3, r6
 8004b86:	b085      	sub	sp, #20
 8004b88:	bfb8      	it	lt
 8004b8a:	3101      	addlt	r1, #1
 8004b8c:	f7ff fede 	bl	800494c <_Balloc>
 8004b90:	b930      	cbnz	r0, 8004ba0 <__multiply+0x40>
 8004b92:	4602      	mov	r2, r0
 8004b94:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004b98:	4b40      	ldr	r3, [pc, #256]	@ (8004c9c <__multiply+0x13c>)
 8004b9a:	4841      	ldr	r0, [pc, #260]	@ (8004ca0 <__multiply+0x140>)
 8004b9c:	f000 fc88 	bl	80054b0 <__assert_func>
 8004ba0:	f100 0414 	add.w	r4, r0, #20
 8004ba4:	4623      	mov	r3, r4
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8004bac:	4573      	cmp	r3, lr
 8004bae:	d320      	bcc.n	8004bf2 <__multiply+0x92>
 8004bb0:	f107 0814 	add.w	r8, r7, #20
 8004bb4:	f109 0114 	add.w	r1, r9, #20
 8004bb8:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8004bbc:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8004bc0:	9302      	str	r3, [sp, #8]
 8004bc2:	1beb      	subs	r3, r5, r7
 8004bc4:	3b15      	subs	r3, #21
 8004bc6:	f023 0303 	bic.w	r3, r3, #3
 8004bca:	3304      	adds	r3, #4
 8004bcc:	3715      	adds	r7, #21
 8004bce:	42bd      	cmp	r5, r7
 8004bd0:	bf38      	it	cc
 8004bd2:	2304      	movcc	r3, #4
 8004bd4:	9301      	str	r3, [sp, #4]
 8004bd6:	9b02      	ldr	r3, [sp, #8]
 8004bd8:	9103      	str	r1, [sp, #12]
 8004bda:	428b      	cmp	r3, r1
 8004bdc:	d80c      	bhi.n	8004bf8 <__multiply+0x98>
 8004bde:	2e00      	cmp	r6, #0
 8004be0:	dd03      	ble.n	8004bea <__multiply+0x8a>
 8004be2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d055      	beq.n	8004c96 <__multiply+0x136>
 8004bea:	6106      	str	r6, [r0, #16]
 8004bec:	b005      	add	sp, #20
 8004bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bf2:	f843 2b04 	str.w	r2, [r3], #4
 8004bf6:	e7d9      	b.n	8004bac <__multiply+0x4c>
 8004bf8:	f8b1 a000 	ldrh.w	sl, [r1]
 8004bfc:	f1ba 0f00 	cmp.w	sl, #0
 8004c00:	d01f      	beq.n	8004c42 <__multiply+0xe2>
 8004c02:	46c4      	mov	ip, r8
 8004c04:	46a1      	mov	r9, r4
 8004c06:	2700      	movs	r7, #0
 8004c08:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004c0c:	f8d9 3000 	ldr.w	r3, [r9]
 8004c10:	fa1f fb82 	uxth.w	fp, r2
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	fb0a 330b 	mla	r3, sl, fp, r3
 8004c1a:	443b      	add	r3, r7
 8004c1c:	f8d9 7000 	ldr.w	r7, [r9]
 8004c20:	0c12      	lsrs	r2, r2, #16
 8004c22:	0c3f      	lsrs	r7, r7, #16
 8004c24:	fb0a 7202 	mla	r2, sl, r2, r7
 8004c28:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c32:	4565      	cmp	r5, ip
 8004c34:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8004c38:	f849 3b04 	str.w	r3, [r9], #4
 8004c3c:	d8e4      	bhi.n	8004c08 <__multiply+0xa8>
 8004c3e:	9b01      	ldr	r3, [sp, #4]
 8004c40:	50e7      	str	r7, [r4, r3]
 8004c42:	9b03      	ldr	r3, [sp, #12]
 8004c44:	3104      	adds	r1, #4
 8004c46:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004c4a:	f1b9 0f00 	cmp.w	r9, #0
 8004c4e:	d020      	beq.n	8004c92 <__multiply+0x132>
 8004c50:	4647      	mov	r7, r8
 8004c52:	46a4      	mov	ip, r4
 8004c54:	f04f 0a00 	mov.w	sl, #0
 8004c58:	6823      	ldr	r3, [r4, #0]
 8004c5a:	f8b7 b000 	ldrh.w	fp, [r7]
 8004c5e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	fb09 220b 	mla	r2, r9, fp, r2
 8004c68:	4452      	add	r2, sl
 8004c6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c6e:	f84c 3b04 	str.w	r3, [ip], #4
 8004c72:	f857 3b04 	ldr.w	r3, [r7], #4
 8004c76:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004c7a:	f8bc 3000 	ldrh.w	r3, [ip]
 8004c7e:	42bd      	cmp	r5, r7
 8004c80:	fb09 330a 	mla	r3, r9, sl, r3
 8004c84:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8004c88:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004c8c:	d8e5      	bhi.n	8004c5a <__multiply+0xfa>
 8004c8e:	9a01      	ldr	r2, [sp, #4]
 8004c90:	50a3      	str	r3, [r4, r2]
 8004c92:	3404      	adds	r4, #4
 8004c94:	e79f      	b.n	8004bd6 <__multiply+0x76>
 8004c96:	3e01      	subs	r6, #1
 8004c98:	e7a1      	b.n	8004bde <__multiply+0x7e>
 8004c9a:	bf00      	nop
 8004c9c:	08005d1a 	.word	0x08005d1a
 8004ca0:	08005d2b 	.word	0x08005d2b

08004ca4 <__pow5mult>:
 8004ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ca8:	4615      	mov	r5, r2
 8004caa:	f012 0203 	ands.w	r2, r2, #3
 8004cae:	4607      	mov	r7, r0
 8004cb0:	460e      	mov	r6, r1
 8004cb2:	d007      	beq.n	8004cc4 <__pow5mult+0x20>
 8004cb4:	4c25      	ldr	r4, [pc, #148]	@ (8004d4c <__pow5mult+0xa8>)
 8004cb6:	3a01      	subs	r2, #1
 8004cb8:	2300      	movs	r3, #0
 8004cba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004cbe:	f7ff fea7 	bl	8004a10 <__multadd>
 8004cc2:	4606      	mov	r6, r0
 8004cc4:	10ad      	asrs	r5, r5, #2
 8004cc6:	d03d      	beq.n	8004d44 <__pow5mult+0xa0>
 8004cc8:	69fc      	ldr	r4, [r7, #28]
 8004cca:	b97c      	cbnz	r4, 8004cec <__pow5mult+0x48>
 8004ccc:	2010      	movs	r0, #16
 8004cce:	f7ff fd87 	bl	80047e0 <malloc>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	61f8      	str	r0, [r7, #28]
 8004cd6:	b928      	cbnz	r0, 8004ce4 <__pow5mult+0x40>
 8004cd8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004cdc:	4b1c      	ldr	r3, [pc, #112]	@ (8004d50 <__pow5mult+0xac>)
 8004cde:	481d      	ldr	r0, [pc, #116]	@ (8004d54 <__pow5mult+0xb0>)
 8004ce0:	f000 fbe6 	bl	80054b0 <__assert_func>
 8004ce4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004ce8:	6004      	str	r4, [r0, #0]
 8004cea:	60c4      	str	r4, [r0, #12]
 8004cec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004cf0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004cf4:	b94c      	cbnz	r4, 8004d0a <__pow5mult+0x66>
 8004cf6:	f240 2171 	movw	r1, #625	@ 0x271
 8004cfa:	4638      	mov	r0, r7
 8004cfc:	f7ff ff1a 	bl	8004b34 <__i2b>
 8004d00:	2300      	movs	r3, #0
 8004d02:	4604      	mov	r4, r0
 8004d04:	f8c8 0008 	str.w	r0, [r8, #8]
 8004d08:	6003      	str	r3, [r0, #0]
 8004d0a:	f04f 0900 	mov.w	r9, #0
 8004d0e:	07eb      	lsls	r3, r5, #31
 8004d10:	d50a      	bpl.n	8004d28 <__pow5mult+0x84>
 8004d12:	4631      	mov	r1, r6
 8004d14:	4622      	mov	r2, r4
 8004d16:	4638      	mov	r0, r7
 8004d18:	f7ff ff22 	bl	8004b60 <__multiply>
 8004d1c:	4680      	mov	r8, r0
 8004d1e:	4631      	mov	r1, r6
 8004d20:	4638      	mov	r0, r7
 8004d22:	f7ff fe53 	bl	80049cc <_Bfree>
 8004d26:	4646      	mov	r6, r8
 8004d28:	106d      	asrs	r5, r5, #1
 8004d2a:	d00b      	beq.n	8004d44 <__pow5mult+0xa0>
 8004d2c:	6820      	ldr	r0, [r4, #0]
 8004d2e:	b938      	cbnz	r0, 8004d40 <__pow5mult+0x9c>
 8004d30:	4622      	mov	r2, r4
 8004d32:	4621      	mov	r1, r4
 8004d34:	4638      	mov	r0, r7
 8004d36:	f7ff ff13 	bl	8004b60 <__multiply>
 8004d3a:	6020      	str	r0, [r4, #0]
 8004d3c:	f8c0 9000 	str.w	r9, [r0]
 8004d40:	4604      	mov	r4, r0
 8004d42:	e7e4      	b.n	8004d0e <__pow5mult+0x6a>
 8004d44:	4630      	mov	r0, r6
 8004d46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d4a:	bf00      	nop
 8004d4c:	08005ddc 	.word	0x08005ddc
 8004d50:	08005cab 	.word	0x08005cab
 8004d54:	08005d2b 	.word	0x08005d2b

08004d58 <__lshift>:
 8004d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d5c:	460c      	mov	r4, r1
 8004d5e:	4607      	mov	r7, r0
 8004d60:	4691      	mov	r9, r2
 8004d62:	6923      	ldr	r3, [r4, #16]
 8004d64:	6849      	ldr	r1, [r1, #4]
 8004d66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004d6a:	68a3      	ldr	r3, [r4, #8]
 8004d6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004d70:	f108 0601 	add.w	r6, r8, #1
 8004d74:	42b3      	cmp	r3, r6
 8004d76:	db0b      	blt.n	8004d90 <__lshift+0x38>
 8004d78:	4638      	mov	r0, r7
 8004d7a:	f7ff fde7 	bl	800494c <_Balloc>
 8004d7e:	4605      	mov	r5, r0
 8004d80:	b948      	cbnz	r0, 8004d96 <__lshift+0x3e>
 8004d82:	4602      	mov	r2, r0
 8004d84:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004d88:	4b27      	ldr	r3, [pc, #156]	@ (8004e28 <__lshift+0xd0>)
 8004d8a:	4828      	ldr	r0, [pc, #160]	@ (8004e2c <__lshift+0xd4>)
 8004d8c:	f000 fb90 	bl	80054b0 <__assert_func>
 8004d90:	3101      	adds	r1, #1
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	e7ee      	b.n	8004d74 <__lshift+0x1c>
 8004d96:	2300      	movs	r3, #0
 8004d98:	f100 0114 	add.w	r1, r0, #20
 8004d9c:	f100 0210 	add.w	r2, r0, #16
 8004da0:	4618      	mov	r0, r3
 8004da2:	4553      	cmp	r3, sl
 8004da4:	db33      	blt.n	8004e0e <__lshift+0xb6>
 8004da6:	6920      	ldr	r0, [r4, #16]
 8004da8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004dac:	f104 0314 	add.w	r3, r4, #20
 8004db0:	f019 091f 	ands.w	r9, r9, #31
 8004db4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004db8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004dbc:	d02b      	beq.n	8004e16 <__lshift+0xbe>
 8004dbe:	468a      	mov	sl, r1
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f1c9 0e20 	rsb	lr, r9, #32
 8004dc6:	6818      	ldr	r0, [r3, #0]
 8004dc8:	fa00 f009 	lsl.w	r0, r0, r9
 8004dcc:	4310      	orrs	r0, r2
 8004dce:	f84a 0b04 	str.w	r0, [sl], #4
 8004dd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dd6:	459c      	cmp	ip, r3
 8004dd8:	fa22 f20e 	lsr.w	r2, r2, lr
 8004ddc:	d8f3      	bhi.n	8004dc6 <__lshift+0x6e>
 8004dde:	ebac 0304 	sub.w	r3, ip, r4
 8004de2:	3b15      	subs	r3, #21
 8004de4:	f023 0303 	bic.w	r3, r3, #3
 8004de8:	3304      	adds	r3, #4
 8004dea:	f104 0015 	add.w	r0, r4, #21
 8004dee:	4560      	cmp	r0, ip
 8004df0:	bf88      	it	hi
 8004df2:	2304      	movhi	r3, #4
 8004df4:	50ca      	str	r2, [r1, r3]
 8004df6:	b10a      	cbz	r2, 8004dfc <__lshift+0xa4>
 8004df8:	f108 0602 	add.w	r6, r8, #2
 8004dfc:	3e01      	subs	r6, #1
 8004dfe:	4638      	mov	r0, r7
 8004e00:	4621      	mov	r1, r4
 8004e02:	612e      	str	r6, [r5, #16]
 8004e04:	f7ff fde2 	bl	80049cc <_Bfree>
 8004e08:	4628      	mov	r0, r5
 8004e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e0e:	f842 0f04 	str.w	r0, [r2, #4]!
 8004e12:	3301      	adds	r3, #1
 8004e14:	e7c5      	b.n	8004da2 <__lshift+0x4a>
 8004e16:	3904      	subs	r1, #4
 8004e18:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e1c:	459c      	cmp	ip, r3
 8004e1e:	f841 2f04 	str.w	r2, [r1, #4]!
 8004e22:	d8f9      	bhi.n	8004e18 <__lshift+0xc0>
 8004e24:	e7ea      	b.n	8004dfc <__lshift+0xa4>
 8004e26:	bf00      	nop
 8004e28:	08005d1a 	.word	0x08005d1a
 8004e2c:	08005d2b 	.word	0x08005d2b

08004e30 <__mcmp>:
 8004e30:	4603      	mov	r3, r0
 8004e32:	690a      	ldr	r2, [r1, #16]
 8004e34:	6900      	ldr	r0, [r0, #16]
 8004e36:	b530      	push	{r4, r5, lr}
 8004e38:	1a80      	subs	r0, r0, r2
 8004e3a:	d10e      	bne.n	8004e5a <__mcmp+0x2a>
 8004e3c:	3314      	adds	r3, #20
 8004e3e:	3114      	adds	r1, #20
 8004e40:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004e44:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004e48:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004e4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004e50:	4295      	cmp	r5, r2
 8004e52:	d003      	beq.n	8004e5c <__mcmp+0x2c>
 8004e54:	d205      	bcs.n	8004e62 <__mcmp+0x32>
 8004e56:	f04f 30ff 	mov.w	r0, #4294967295
 8004e5a:	bd30      	pop	{r4, r5, pc}
 8004e5c:	42a3      	cmp	r3, r4
 8004e5e:	d3f3      	bcc.n	8004e48 <__mcmp+0x18>
 8004e60:	e7fb      	b.n	8004e5a <__mcmp+0x2a>
 8004e62:	2001      	movs	r0, #1
 8004e64:	e7f9      	b.n	8004e5a <__mcmp+0x2a>
	...

08004e68 <__mdiff>:
 8004e68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e6c:	4689      	mov	r9, r1
 8004e6e:	4606      	mov	r6, r0
 8004e70:	4611      	mov	r1, r2
 8004e72:	4648      	mov	r0, r9
 8004e74:	4614      	mov	r4, r2
 8004e76:	f7ff ffdb 	bl	8004e30 <__mcmp>
 8004e7a:	1e05      	subs	r5, r0, #0
 8004e7c:	d112      	bne.n	8004ea4 <__mdiff+0x3c>
 8004e7e:	4629      	mov	r1, r5
 8004e80:	4630      	mov	r0, r6
 8004e82:	f7ff fd63 	bl	800494c <_Balloc>
 8004e86:	4602      	mov	r2, r0
 8004e88:	b928      	cbnz	r0, 8004e96 <__mdiff+0x2e>
 8004e8a:	f240 2137 	movw	r1, #567	@ 0x237
 8004e8e:	4b3e      	ldr	r3, [pc, #248]	@ (8004f88 <__mdiff+0x120>)
 8004e90:	483e      	ldr	r0, [pc, #248]	@ (8004f8c <__mdiff+0x124>)
 8004e92:	f000 fb0d 	bl	80054b0 <__assert_func>
 8004e96:	2301      	movs	r3, #1
 8004e98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004e9c:	4610      	mov	r0, r2
 8004e9e:	b003      	add	sp, #12
 8004ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ea4:	bfbc      	itt	lt
 8004ea6:	464b      	movlt	r3, r9
 8004ea8:	46a1      	movlt	r9, r4
 8004eaa:	4630      	mov	r0, r6
 8004eac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004eb0:	bfba      	itte	lt
 8004eb2:	461c      	movlt	r4, r3
 8004eb4:	2501      	movlt	r5, #1
 8004eb6:	2500      	movge	r5, #0
 8004eb8:	f7ff fd48 	bl	800494c <_Balloc>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	b918      	cbnz	r0, 8004ec8 <__mdiff+0x60>
 8004ec0:	f240 2145 	movw	r1, #581	@ 0x245
 8004ec4:	4b30      	ldr	r3, [pc, #192]	@ (8004f88 <__mdiff+0x120>)
 8004ec6:	e7e3      	b.n	8004e90 <__mdiff+0x28>
 8004ec8:	f100 0b14 	add.w	fp, r0, #20
 8004ecc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004ed0:	f109 0310 	add.w	r3, r9, #16
 8004ed4:	60c5      	str	r5, [r0, #12]
 8004ed6:	f04f 0c00 	mov.w	ip, #0
 8004eda:	f109 0514 	add.w	r5, r9, #20
 8004ede:	46d9      	mov	r9, fp
 8004ee0:	6926      	ldr	r6, [r4, #16]
 8004ee2:	f104 0e14 	add.w	lr, r4, #20
 8004ee6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8004eea:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8004eee:	9301      	str	r3, [sp, #4]
 8004ef0:	9b01      	ldr	r3, [sp, #4]
 8004ef2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8004ef6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8004efa:	b281      	uxth	r1, r0
 8004efc:	9301      	str	r3, [sp, #4]
 8004efe:	fa1f f38a 	uxth.w	r3, sl
 8004f02:	1a5b      	subs	r3, r3, r1
 8004f04:	0c00      	lsrs	r0, r0, #16
 8004f06:	4463      	add	r3, ip
 8004f08:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8004f0c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004f16:	4576      	cmp	r6, lr
 8004f18:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004f1c:	f849 3b04 	str.w	r3, [r9], #4
 8004f20:	d8e6      	bhi.n	8004ef0 <__mdiff+0x88>
 8004f22:	1b33      	subs	r3, r6, r4
 8004f24:	3b15      	subs	r3, #21
 8004f26:	f023 0303 	bic.w	r3, r3, #3
 8004f2a:	3415      	adds	r4, #21
 8004f2c:	3304      	adds	r3, #4
 8004f2e:	42a6      	cmp	r6, r4
 8004f30:	bf38      	it	cc
 8004f32:	2304      	movcc	r3, #4
 8004f34:	441d      	add	r5, r3
 8004f36:	445b      	add	r3, fp
 8004f38:	461e      	mov	r6, r3
 8004f3a:	462c      	mov	r4, r5
 8004f3c:	4544      	cmp	r4, r8
 8004f3e:	d30e      	bcc.n	8004f5e <__mdiff+0xf6>
 8004f40:	f108 0103 	add.w	r1, r8, #3
 8004f44:	1b49      	subs	r1, r1, r5
 8004f46:	f021 0103 	bic.w	r1, r1, #3
 8004f4a:	3d03      	subs	r5, #3
 8004f4c:	45a8      	cmp	r8, r5
 8004f4e:	bf38      	it	cc
 8004f50:	2100      	movcc	r1, #0
 8004f52:	440b      	add	r3, r1
 8004f54:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004f58:	b199      	cbz	r1, 8004f82 <__mdiff+0x11a>
 8004f5a:	6117      	str	r7, [r2, #16]
 8004f5c:	e79e      	b.n	8004e9c <__mdiff+0x34>
 8004f5e:	46e6      	mov	lr, ip
 8004f60:	f854 1b04 	ldr.w	r1, [r4], #4
 8004f64:	fa1f fc81 	uxth.w	ip, r1
 8004f68:	44f4      	add	ip, lr
 8004f6a:	0c08      	lsrs	r0, r1, #16
 8004f6c:	4471      	add	r1, lr
 8004f6e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8004f72:	b289      	uxth	r1, r1
 8004f74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004f78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004f7c:	f846 1b04 	str.w	r1, [r6], #4
 8004f80:	e7dc      	b.n	8004f3c <__mdiff+0xd4>
 8004f82:	3f01      	subs	r7, #1
 8004f84:	e7e6      	b.n	8004f54 <__mdiff+0xec>
 8004f86:	bf00      	nop
 8004f88:	08005d1a 	.word	0x08005d1a
 8004f8c:	08005d2b 	.word	0x08005d2b

08004f90 <__d2b>:
 8004f90:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8004f94:	2101      	movs	r1, #1
 8004f96:	4690      	mov	r8, r2
 8004f98:	4699      	mov	r9, r3
 8004f9a:	9e08      	ldr	r6, [sp, #32]
 8004f9c:	f7ff fcd6 	bl	800494c <_Balloc>
 8004fa0:	4604      	mov	r4, r0
 8004fa2:	b930      	cbnz	r0, 8004fb2 <__d2b+0x22>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	f240 310f 	movw	r1, #783	@ 0x30f
 8004faa:	4b23      	ldr	r3, [pc, #140]	@ (8005038 <__d2b+0xa8>)
 8004fac:	4823      	ldr	r0, [pc, #140]	@ (800503c <__d2b+0xac>)
 8004fae:	f000 fa7f 	bl	80054b0 <__assert_func>
 8004fb2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004fb6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004fba:	b10d      	cbz	r5, 8004fc0 <__d2b+0x30>
 8004fbc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fc0:	9301      	str	r3, [sp, #4]
 8004fc2:	f1b8 0300 	subs.w	r3, r8, #0
 8004fc6:	d024      	beq.n	8005012 <__d2b+0x82>
 8004fc8:	4668      	mov	r0, sp
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	f7ff fd85 	bl	8004ada <__lo0bits>
 8004fd0:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004fd4:	b1d8      	cbz	r0, 800500e <__d2b+0x7e>
 8004fd6:	f1c0 0320 	rsb	r3, r0, #32
 8004fda:	fa02 f303 	lsl.w	r3, r2, r3
 8004fde:	430b      	orrs	r3, r1
 8004fe0:	40c2      	lsrs	r2, r0
 8004fe2:	6163      	str	r3, [r4, #20]
 8004fe4:	9201      	str	r2, [sp, #4]
 8004fe6:	9b01      	ldr	r3, [sp, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	bf0c      	ite	eq
 8004fec:	2201      	moveq	r2, #1
 8004fee:	2202      	movne	r2, #2
 8004ff0:	61a3      	str	r3, [r4, #24]
 8004ff2:	6122      	str	r2, [r4, #16]
 8004ff4:	b1ad      	cbz	r5, 8005022 <__d2b+0x92>
 8004ff6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8004ffa:	4405      	add	r5, r0
 8004ffc:	6035      	str	r5, [r6, #0]
 8004ffe:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005002:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005004:	6018      	str	r0, [r3, #0]
 8005006:	4620      	mov	r0, r4
 8005008:	b002      	add	sp, #8
 800500a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800500e:	6161      	str	r1, [r4, #20]
 8005010:	e7e9      	b.n	8004fe6 <__d2b+0x56>
 8005012:	a801      	add	r0, sp, #4
 8005014:	f7ff fd61 	bl	8004ada <__lo0bits>
 8005018:	9b01      	ldr	r3, [sp, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	6163      	str	r3, [r4, #20]
 800501e:	3020      	adds	r0, #32
 8005020:	e7e7      	b.n	8004ff2 <__d2b+0x62>
 8005022:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005026:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800502a:	6030      	str	r0, [r6, #0]
 800502c:	6918      	ldr	r0, [r3, #16]
 800502e:	f7ff fd35 	bl	8004a9c <__hi0bits>
 8005032:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005036:	e7e4      	b.n	8005002 <__d2b+0x72>
 8005038:	08005d1a 	.word	0x08005d1a
 800503c:	08005d2b 	.word	0x08005d2b

08005040 <__ssputs_r>:
 8005040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005044:	461f      	mov	r7, r3
 8005046:	688e      	ldr	r6, [r1, #8]
 8005048:	4682      	mov	sl, r0
 800504a:	42be      	cmp	r6, r7
 800504c:	460c      	mov	r4, r1
 800504e:	4690      	mov	r8, r2
 8005050:	680b      	ldr	r3, [r1, #0]
 8005052:	d82d      	bhi.n	80050b0 <__ssputs_r+0x70>
 8005054:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005058:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800505c:	d026      	beq.n	80050ac <__ssputs_r+0x6c>
 800505e:	6965      	ldr	r5, [r4, #20]
 8005060:	6909      	ldr	r1, [r1, #16]
 8005062:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005066:	eba3 0901 	sub.w	r9, r3, r1
 800506a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800506e:	1c7b      	adds	r3, r7, #1
 8005070:	444b      	add	r3, r9
 8005072:	106d      	asrs	r5, r5, #1
 8005074:	429d      	cmp	r5, r3
 8005076:	bf38      	it	cc
 8005078:	461d      	movcc	r5, r3
 800507a:	0553      	lsls	r3, r2, #21
 800507c:	d527      	bpl.n	80050ce <__ssputs_r+0x8e>
 800507e:	4629      	mov	r1, r5
 8005080:	f7ff fbd8 	bl	8004834 <_malloc_r>
 8005084:	4606      	mov	r6, r0
 8005086:	b360      	cbz	r0, 80050e2 <__ssputs_r+0xa2>
 8005088:	464a      	mov	r2, r9
 800508a:	6921      	ldr	r1, [r4, #16]
 800508c:	f000 fa02 	bl	8005494 <memcpy>
 8005090:	89a3      	ldrh	r3, [r4, #12]
 8005092:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005096:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800509a:	81a3      	strh	r3, [r4, #12]
 800509c:	6126      	str	r6, [r4, #16]
 800509e:	444e      	add	r6, r9
 80050a0:	6026      	str	r6, [r4, #0]
 80050a2:	463e      	mov	r6, r7
 80050a4:	6165      	str	r5, [r4, #20]
 80050a6:	eba5 0509 	sub.w	r5, r5, r9
 80050aa:	60a5      	str	r5, [r4, #8]
 80050ac:	42be      	cmp	r6, r7
 80050ae:	d900      	bls.n	80050b2 <__ssputs_r+0x72>
 80050b0:	463e      	mov	r6, r7
 80050b2:	4632      	mov	r2, r6
 80050b4:	4641      	mov	r1, r8
 80050b6:	6820      	ldr	r0, [r4, #0]
 80050b8:	f000 f9c2 	bl	8005440 <memmove>
 80050bc:	2000      	movs	r0, #0
 80050be:	68a3      	ldr	r3, [r4, #8]
 80050c0:	1b9b      	subs	r3, r3, r6
 80050c2:	60a3      	str	r3, [r4, #8]
 80050c4:	6823      	ldr	r3, [r4, #0]
 80050c6:	4433      	add	r3, r6
 80050c8:	6023      	str	r3, [r4, #0]
 80050ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050ce:	462a      	mov	r2, r5
 80050d0:	f000 fa32 	bl	8005538 <_realloc_r>
 80050d4:	4606      	mov	r6, r0
 80050d6:	2800      	cmp	r0, #0
 80050d8:	d1e0      	bne.n	800509c <__ssputs_r+0x5c>
 80050da:	4650      	mov	r0, sl
 80050dc:	6921      	ldr	r1, [r4, #16]
 80050de:	f7ff fb37 	bl	8004750 <_free_r>
 80050e2:	230c      	movs	r3, #12
 80050e4:	f8ca 3000 	str.w	r3, [sl]
 80050e8:	89a3      	ldrh	r3, [r4, #12]
 80050ea:	f04f 30ff 	mov.w	r0, #4294967295
 80050ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050f2:	81a3      	strh	r3, [r4, #12]
 80050f4:	e7e9      	b.n	80050ca <__ssputs_r+0x8a>
	...

080050f8 <_svfiprintf_r>:
 80050f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050fc:	4698      	mov	r8, r3
 80050fe:	898b      	ldrh	r3, [r1, #12]
 8005100:	4607      	mov	r7, r0
 8005102:	061b      	lsls	r3, r3, #24
 8005104:	460d      	mov	r5, r1
 8005106:	4614      	mov	r4, r2
 8005108:	b09d      	sub	sp, #116	@ 0x74
 800510a:	d510      	bpl.n	800512e <_svfiprintf_r+0x36>
 800510c:	690b      	ldr	r3, [r1, #16]
 800510e:	b973      	cbnz	r3, 800512e <_svfiprintf_r+0x36>
 8005110:	2140      	movs	r1, #64	@ 0x40
 8005112:	f7ff fb8f 	bl	8004834 <_malloc_r>
 8005116:	6028      	str	r0, [r5, #0]
 8005118:	6128      	str	r0, [r5, #16]
 800511a:	b930      	cbnz	r0, 800512a <_svfiprintf_r+0x32>
 800511c:	230c      	movs	r3, #12
 800511e:	603b      	str	r3, [r7, #0]
 8005120:	f04f 30ff 	mov.w	r0, #4294967295
 8005124:	b01d      	add	sp, #116	@ 0x74
 8005126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800512a:	2340      	movs	r3, #64	@ 0x40
 800512c:	616b      	str	r3, [r5, #20]
 800512e:	2300      	movs	r3, #0
 8005130:	9309      	str	r3, [sp, #36]	@ 0x24
 8005132:	2320      	movs	r3, #32
 8005134:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005138:	2330      	movs	r3, #48	@ 0x30
 800513a:	f04f 0901 	mov.w	r9, #1
 800513e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005142:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80052dc <_svfiprintf_r+0x1e4>
 8005146:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800514a:	4623      	mov	r3, r4
 800514c:	469a      	mov	sl, r3
 800514e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005152:	b10a      	cbz	r2, 8005158 <_svfiprintf_r+0x60>
 8005154:	2a25      	cmp	r2, #37	@ 0x25
 8005156:	d1f9      	bne.n	800514c <_svfiprintf_r+0x54>
 8005158:	ebba 0b04 	subs.w	fp, sl, r4
 800515c:	d00b      	beq.n	8005176 <_svfiprintf_r+0x7e>
 800515e:	465b      	mov	r3, fp
 8005160:	4622      	mov	r2, r4
 8005162:	4629      	mov	r1, r5
 8005164:	4638      	mov	r0, r7
 8005166:	f7ff ff6b 	bl	8005040 <__ssputs_r>
 800516a:	3001      	adds	r0, #1
 800516c:	f000 80a7 	beq.w	80052be <_svfiprintf_r+0x1c6>
 8005170:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005172:	445a      	add	r2, fp
 8005174:	9209      	str	r2, [sp, #36]	@ 0x24
 8005176:	f89a 3000 	ldrb.w	r3, [sl]
 800517a:	2b00      	cmp	r3, #0
 800517c:	f000 809f 	beq.w	80052be <_svfiprintf_r+0x1c6>
 8005180:	2300      	movs	r3, #0
 8005182:	f04f 32ff 	mov.w	r2, #4294967295
 8005186:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800518a:	f10a 0a01 	add.w	sl, sl, #1
 800518e:	9304      	str	r3, [sp, #16]
 8005190:	9307      	str	r3, [sp, #28]
 8005192:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005196:	931a      	str	r3, [sp, #104]	@ 0x68
 8005198:	4654      	mov	r4, sl
 800519a:	2205      	movs	r2, #5
 800519c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051a0:	484e      	ldr	r0, [pc, #312]	@ (80052dc <_svfiprintf_r+0x1e4>)
 80051a2:	f7fe fc68 	bl	8003a76 <memchr>
 80051a6:	9a04      	ldr	r2, [sp, #16]
 80051a8:	b9d8      	cbnz	r0, 80051e2 <_svfiprintf_r+0xea>
 80051aa:	06d0      	lsls	r0, r2, #27
 80051ac:	bf44      	itt	mi
 80051ae:	2320      	movmi	r3, #32
 80051b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051b4:	0711      	lsls	r1, r2, #28
 80051b6:	bf44      	itt	mi
 80051b8:	232b      	movmi	r3, #43	@ 0x2b
 80051ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051be:	f89a 3000 	ldrb.w	r3, [sl]
 80051c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80051c4:	d015      	beq.n	80051f2 <_svfiprintf_r+0xfa>
 80051c6:	4654      	mov	r4, sl
 80051c8:	2000      	movs	r0, #0
 80051ca:	f04f 0c0a 	mov.w	ip, #10
 80051ce:	9a07      	ldr	r2, [sp, #28]
 80051d0:	4621      	mov	r1, r4
 80051d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051d6:	3b30      	subs	r3, #48	@ 0x30
 80051d8:	2b09      	cmp	r3, #9
 80051da:	d94b      	bls.n	8005274 <_svfiprintf_r+0x17c>
 80051dc:	b1b0      	cbz	r0, 800520c <_svfiprintf_r+0x114>
 80051de:	9207      	str	r2, [sp, #28]
 80051e0:	e014      	b.n	800520c <_svfiprintf_r+0x114>
 80051e2:	eba0 0308 	sub.w	r3, r0, r8
 80051e6:	fa09 f303 	lsl.w	r3, r9, r3
 80051ea:	4313      	orrs	r3, r2
 80051ec:	46a2      	mov	sl, r4
 80051ee:	9304      	str	r3, [sp, #16]
 80051f0:	e7d2      	b.n	8005198 <_svfiprintf_r+0xa0>
 80051f2:	9b03      	ldr	r3, [sp, #12]
 80051f4:	1d19      	adds	r1, r3, #4
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	9103      	str	r1, [sp, #12]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	bfbb      	ittet	lt
 80051fe:	425b      	neglt	r3, r3
 8005200:	f042 0202 	orrlt.w	r2, r2, #2
 8005204:	9307      	strge	r3, [sp, #28]
 8005206:	9307      	strlt	r3, [sp, #28]
 8005208:	bfb8      	it	lt
 800520a:	9204      	strlt	r2, [sp, #16]
 800520c:	7823      	ldrb	r3, [r4, #0]
 800520e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005210:	d10a      	bne.n	8005228 <_svfiprintf_r+0x130>
 8005212:	7863      	ldrb	r3, [r4, #1]
 8005214:	2b2a      	cmp	r3, #42	@ 0x2a
 8005216:	d132      	bne.n	800527e <_svfiprintf_r+0x186>
 8005218:	9b03      	ldr	r3, [sp, #12]
 800521a:	3402      	adds	r4, #2
 800521c:	1d1a      	adds	r2, r3, #4
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	9203      	str	r2, [sp, #12]
 8005222:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005226:	9305      	str	r3, [sp, #20]
 8005228:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80052e0 <_svfiprintf_r+0x1e8>
 800522c:	2203      	movs	r2, #3
 800522e:	4650      	mov	r0, sl
 8005230:	7821      	ldrb	r1, [r4, #0]
 8005232:	f7fe fc20 	bl	8003a76 <memchr>
 8005236:	b138      	cbz	r0, 8005248 <_svfiprintf_r+0x150>
 8005238:	2240      	movs	r2, #64	@ 0x40
 800523a:	9b04      	ldr	r3, [sp, #16]
 800523c:	eba0 000a 	sub.w	r0, r0, sl
 8005240:	4082      	lsls	r2, r0
 8005242:	4313      	orrs	r3, r2
 8005244:	3401      	adds	r4, #1
 8005246:	9304      	str	r3, [sp, #16]
 8005248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800524c:	2206      	movs	r2, #6
 800524e:	4825      	ldr	r0, [pc, #148]	@ (80052e4 <_svfiprintf_r+0x1ec>)
 8005250:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005254:	f7fe fc0f 	bl	8003a76 <memchr>
 8005258:	2800      	cmp	r0, #0
 800525a:	d036      	beq.n	80052ca <_svfiprintf_r+0x1d2>
 800525c:	4b22      	ldr	r3, [pc, #136]	@ (80052e8 <_svfiprintf_r+0x1f0>)
 800525e:	bb1b      	cbnz	r3, 80052a8 <_svfiprintf_r+0x1b0>
 8005260:	9b03      	ldr	r3, [sp, #12]
 8005262:	3307      	adds	r3, #7
 8005264:	f023 0307 	bic.w	r3, r3, #7
 8005268:	3308      	adds	r3, #8
 800526a:	9303      	str	r3, [sp, #12]
 800526c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800526e:	4433      	add	r3, r6
 8005270:	9309      	str	r3, [sp, #36]	@ 0x24
 8005272:	e76a      	b.n	800514a <_svfiprintf_r+0x52>
 8005274:	460c      	mov	r4, r1
 8005276:	2001      	movs	r0, #1
 8005278:	fb0c 3202 	mla	r2, ip, r2, r3
 800527c:	e7a8      	b.n	80051d0 <_svfiprintf_r+0xd8>
 800527e:	2300      	movs	r3, #0
 8005280:	f04f 0c0a 	mov.w	ip, #10
 8005284:	4619      	mov	r1, r3
 8005286:	3401      	adds	r4, #1
 8005288:	9305      	str	r3, [sp, #20]
 800528a:	4620      	mov	r0, r4
 800528c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005290:	3a30      	subs	r2, #48	@ 0x30
 8005292:	2a09      	cmp	r2, #9
 8005294:	d903      	bls.n	800529e <_svfiprintf_r+0x1a6>
 8005296:	2b00      	cmp	r3, #0
 8005298:	d0c6      	beq.n	8005228 <_svfiprintf_r+0x130>
 800529a:	9105      	str	r1, [sp, #20]
 800529c:	e7c4      	b.n	8005228 <_svfiprintf_r+0x130>
 800529e:	4604      	mov	r4, r0
 80052a0:	2301      	movs	r3, #1
 80052a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80052a6:	e7f0      	b.n	800528a <_svfiprintf_r+0x192>
 80052a8:	ab03      	add	r3, sp, #12
 80052aa:	9300      	str	r3, [sp, #0]
 80052ac:	462a      	mov	r2, r5
 80052ae:	4638      	mov	r0, r7
 80052b0:	4b0e      	ldr	r3, [pc, #56]	@ (80052ec <_svfiprintf_r+0x1f4>)
 80052b2:	a904      	add	r1, sp, #16
 80052b4:	f7fd fe68 	bl	8002f88 <_printf_float>
 80052b8:	1c42      	adds	r2, r0, #1
 80052ba:	4606      	mov	r6, r0
 80052bc:	d1d6      	bne.n	800526c <_svfiprintf_r+0x174>
 80052be:	89ab      	ldrh	r3, [r5, #12]
 80052c0:	065b      	lsls	r3, r3, #25
 80052c2:	f53f af2d 	bmi.w	8005120 <_svfiprintf_r+0x28>
 80052c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80052c8:	e72c      	b.n	8005124 <_svfiprintf_r+0x2c>
 80052ca:	ab03      	add	r3, sp, #12
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	462a      	mov	r2, r5
 80052d0:	4638      	mov	r0, r7
 80052d2:	4b06      	ldr	r3, [pc, #24]	@ (80052ec <_svfiprintf_r+0x1f4>)
 80052d4:	a904      	add	r1, sp, #16
 80052d6:	f7fe f8f5 	bl	80034c4 <_printf_i>
 80052da:	e7ed      	b.n	80052b8 <_svfiprintf_r+0x1c0>
 80052dc:	08005d84 	.word	0x08005d84
 80052e0:	08005d8a 	.word	0x08005d8a
 80052e4:	08005d8e 	.word	0x08005d8e
 80052e8:	08002f89 	.word	0x08002f89
 80052ec:	08005041 	.word	0x08005041

080052f0 <__sflush_r>:
 80052f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80052f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f6:	0716      	lsls	r6, r2, #28
 80052f8:	4605      	mov	r5, r0
 80052fa:	460c      	mov	r4, r1
 80052fc:	d454      	bmi.n	80053a8 <__sflush_r+0xb8>
 80052fe:	684b      	ldr	r3, [r1, #4]
 8005300:	2b00      	cmp	r3, #0
 8005302:	dc02      	bgt.n	800530a <__sflush_r+0x1a>
 8005304:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005306:	2b00      	cmp	r3, #0
 8005308:	dd48      	ble.n	800539c <__sflush_r+0xac>
 800530a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800530c:	2e00      	cmp	r6, #0
 800530e:	d045      	beq.n	800539c <__sflush_r+0xac>
 8005310:	2300      	movs	r3, #0
 8005312:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005316:	682f      	ldr	r7, [r5, #0]
 8005318:	6a21      	ldr	r1, [r4, #32]
 800531a:	602b      	str	r3, [r5, #0]
 800531c:	d030      	beq.n	8005380 <__sflush_r+0x90>
 800531e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005320:	89a3      	ldrh	r3, [r4, #12]
 8005322:	0759      	lsls	r1, r3, #29
 8005324:	d505      	bpl.n	8005332 <__sflush_r+0x42>
 8005326:	6863      	ldr	r3, [r4, #4]
 8005328:	1ad2      	subs	r2, r2, r3
 800532a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800532c:	b10b      	cbz	r3, 8005332 <__sflush_r+0x42>
 800532e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005330:	1ad2      	subs	r2, r2, r3
 8005332:	2300      	movs	r3, #0
 8005334:	4628      	mov	r0, r5
 8005336:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005338:	6a21      	ldr	r1, [r4, #32]
 800533a:	47b0      	blx	r6
 800533c:	1c43      	adds	r3, r0, #1
 800533e:	89a3      	ldrh	r3, [r4, #12]
 8005340:	d106      	bne.n	8005350 <__sflush_r+0x60>
 8005342:	6829      	ldr	r1, [r5, #0]
 8005344:	291d      	cmp	r1, #29
 8005346:	d82b      	bhi.n	80053a0 <__sflush_r+0xb0>
 8005348:	4a28      	ldr	r2, [pc, #160]	@ (80053ec <__sflush_r+0xfc>)
 800534a:	40ca      	lsrs	r2, r1
 800534c:	07d6      	lsls	r6, r2, #31
 800534e:	d527      	bpl.n	80053a0 <__sflush_r+0xb0>
 8005350:	2200      	movs	r2, #0
 8005352:	6062      	str	r2, [r4, #4]
 8005354:	6922      	ldr	r2, [r4, #16]
 8005356:	04d9      	lsls	r1, r3, #19
 8005358:	6022      	str	r2, [r4, #0]
 800535a:	d504      	bpl.n	8005366 <__sflush_r+0x76>
 800535c:	1c42      	adds	r2, r0, #1
 800535e:	d101      	bne.n	8005364 <__sflush_r+0x74>
 8005360:	682b      	ldr	r3, [r5, #0]
 8005362:	b903      	cbnz	r3, 8005366 <__sflush_r+0x76>
 8005364:	6560      	str	r0, [r4, #84]	@ 0x54
 8005366:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005368:	602f      	str	r7, [r5, #0]
 800536a:	b1b9      	cbz	r1, 800539c <__sflush_r+0xac>
 800536c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005370:	4299      	cmp	r1, r3
 8005372:	d002      	beq.n	800537a <__sflush_r+0x8a>
 8005374:	4628      	mov	r0, r5
 8005376:	f7ff f9eb 	bl	8004750 <_free_r>
 800537a:	2300      	movs	r3, #0
 800537c:	6363      	str	r3, [r4, #52]	@ 0x34
 800537e:	e00d      	b.n	800539c <__sflush_r+0xac>
 8005380:	2301      	movs	r3, #1
 8005382:	4628      	mov	r0, r5
 8005384:	47b0      	blx	r6
 8005386:	4602      	mov	r2, r0
 8005388:	1c50      	adds	r0, r2, #1
 800538a:	d1c9      	bne.n	8005320 <__sflush_r+0x30>
 800538c:	682b      	ldr	r3, [r5, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d0c6      	beq.n	8005320 <__sflush_r+0x30>
 8005392:	2b1d      	cmp	r3, #29
 8005394:	d001      	beq.n	800539a <__sflush_r+0xaa>
 8005396:	2b16      	cmp	r3, #22
 8005398:	d11d      	bne.n	80053d6 <__sflush_r+0xe6>
 800539a:	602f      	str	r7, [r5, #0]
 800539c:	2000      	movs	r0, #0
 800539e:	e021      	b.n	80053e4 <__sflush_r+0xf4>
 80053a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053a4:	b21b      	sxth	r3, r3
 80053a6:	e01a      	b.n	80053de <__sflush_r+0xee>
 80053a8:	690f      	ldr	r7, [r1, #16]
 80053aa:	2f00      	cmp	r7, #0
 80053ac:	d0f6      	beq.n	800539c <__sflush_r+0xac>
 80053ae:	0793      	lsls	r3, r2, #30
 80053b0:	bf18      	it	ne
 80053b2:	2300      	movne	r3, #0
 80053b4:	680e      	ldr	r6, [r1, #0]
 80053b6:	bf08      	it	eq
 80053b8:	694b      	ldreq	r3, [r1, #20]
 80053ba:	1bf6      	subs	r6, r6, r7
 80053bc:	600f      	str	r7, [r1, #0]
 80053be:	608b      	str	r3, [r1, #8]
 80053c0:	2e00      	cmp	r6, #0
 80053c2:	ddeb      	ble.n	800539c <__sflush_r+0xac>
 80053c4:	4633      	mov	r3, r6
 80053c6:	463a      	mov	r2, r7
 80053c8:	4628      	mov	r0, r5
 80053ca:	6a21      	ldr	r1, [r4, #32]
 80053cc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80053d0:	47e0      	blx	ip
 80053d2:	2800      	cmp	r0, #0
 80053d4:	dc07      	bgt.n	80053e6 <__sflush_r+0xf6>
 80053d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053de:	f04f 30ff 	mov.w	r0, #4294967295
 80053e2:	81a3      	strh	r3, [r4, #12]
 80053e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053e6:	4407      	add	r7, r0
 80053e8:	1a36      	subs	r6, r6, r0
 80053ea:	e7e9      	b.n	80053c0 <__sflush_r+0xd0>
 80053ec:	20400001 	.word	0x20400001

080053f0 <_fflush_r>:
 80053f0:	b538      	push	{r3, r4, r5, lr}
 80053f2:	690b      	ldr	r3, [r1, #16]
 80053f4:	4605      	mov	r5, r0
 80053f6:	460c      	mov	r4, r1
 80053f8:	b913      	cbnz	r3, 8005400 <_fflush_r+0x10>
 80053fa:	2500      	movs	r5, #0
 80053fc:	4628      	mov	r0, r5
 80053fe:	bd38      	pop	{r3, r4, r5, pc}
 8005400:	b118      	cbz	r0, 800540a <_fflush_r+0x1a>
 8005402:	6a03      	ldr	r3, [r0, #32]
 8005404:	b90b      	cbnz	r3, 800540a <_fflush_r+0x1a>
 8005406:	f7fe fa07 	bl	8003818 <__sinit>
 800540a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d0f3      	beq.n	80053fa <_fflush_r+0xa>
 8005412:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005414:	07d0      	lsls	r0, r2, #31
 8005416:	d404      	bmi.n	8005422 <_fflush_r+0x32>
 8005418:	0599      	lsls	r1, r3, #22
 800541a:	d402      	bmi.n	8005422 <_fflush_r+0x32>
 800541c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800541e:	f7fe fb28 	bl	8003a72 <__retarget_lock_acquire_recursive>
 8005422:	4628      	mov	r0, r5
 8005424:	4621      	mov	r1, r4
 8005426:	f7ff ff63 	bl	80052f0 <__sflush_r>
 800542a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800542c:	4605      	mov	r5, r0
 800542e:	07da      	lsls	r2, r3, #31
 8005430:	d4e4      	bmi.n	80053fc <_fflush_r+0xc>
 8005432:	89a3      	ldrh	r3, [r4, #12]
 8005434:	059b      	lsls	r3, r3, #22
 8005436:	d4e1      	bmi.n	80053fc <_fflush_r+0xc>
 8005438:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800543a:	f7fe fb1b 	bl	8003a74 <__retarget_lock_release_recursive>
 800543e:	e7dd      	b.n	80053fc <_fflush_r+0xc>

08005440 <memmove>:
 8005440:	4288      	cmp	r0, r1
 8005442:	b510      	push	{r4, lr}
 8005444:	eb01 0402 	add.w	r4, r1, r2
 8005448:	d902      	bls.n	8005450 <memmove+0x10>
 800544a:	4284      	cmp	r4, r0
 800544c:	4623      	mov	r3, r4
 800544e:	d807      	bhi.n	8005460 <memmove+0x20>
 8005450:	1e43      	subs	r3, r0, #1
 8005452:	42a1      	cmp	r1, r4
 8005454:	d008      	beq.n	8005468 <memmove+0x28>
 8005456:	f811 2b01 	ldrb.w	r2, [r1], #1
 800545a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800545e:	e7f8      	b.n	8005452 <memmove+0x12>
 8005460:	4601      	mov	r1, r0
 8005462:	4402      	add	r2, r0
 8005464:	428a      	cmp	r2, r1
 8005466:	d100      	bne.n	800546a <memmove+0x2a>
 8005468:	bd10      	pop	{r4, pc}
 800546a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800546e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005472:	e7f7      	b.n	8005464 <memmove+0x24>

08005474 <_sbrk_r>:
 8005474:	b538      	push	{r3, r4, r5, lr}
 8005476:	2300      	movs	r3, #0
 8005478:	4d05      	ldr	r5, [pc, #20]	@ (8005490 <_sbrk_r+0x1c>)
 800547a:	4604      	mov	r4, r0
 800547c:	4608      	mov	r0, r1
 800547e:	602b      	str	r3, [r5, #0]
 8005480:	f7fb ffd2 	bl	8001428 <_sbrk>
 8005484:	1c43      	adds	r3, r0, #1
 8005486:	d102      	bne.n	800548e <_sbrk_r+0x1a>
 8005488:	682b      	ldr	r3, [r5, #0]
 800548a:	b103      	cbz	r3, 800548e <_sbrk_r+0x1a>
 800548c:	6023      	str	r3, [r4, #0]
 800548e:	bd38      	pop	{r3, r4, r5, pc}
 8005490:	200004b8 	.word	0x200004b8

08005494 <memcpy>:
 8005494:	440a      	add	r2, r1
 8005496:	4291      	cmp	r1, r2
 8005498:	f100 33ff 	add.w	r3, r0, #4294967295
 800549c:	d100      	bne.n	80054a0 <memcpy+0xc>
 800549e:	4770      	bx	lr
 80054a0:	b510      	push	{r4, lr}
 80054a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054a6:	4291      	cmp	r1, r2
 80054a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054ac:	d1f9      	bne.n	80054a2 <memcpy+0xe>
 80054ae:	bd10      	pop	{r4, pc}

080054b0 <__assert_func>:
 80054b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80054b2:	4614      	mov	r4, r2
 80054b4:	461a      	mov	r2, r3
 80054b6:	4b09      	ldr	r3, [pc, #36]	@ (80054dc <__assert_func+0x2c>)
 80054b8:	4605      	mov	r5, r0
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68d8      	ldr	r0, [r3, #12]
 80054be:	b14c      	cbz	r4, 80054d4 <__assert_func+0x24>
 80054c0:	4b07      	ldr	r3, [pc, #28]	@ (80054e0 <__assert_func+0x30>)
 80054c2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80054c6:	9100      	str	r1, [sp, #0]
 80054c8:	462b      	mov	r3, r5
 80054ca:	4906      	ldr	r1, [pc, #24]	@ (80054e4 <__assert_func+0x34>)
 80054cc:	f000 f870 	bl	80055b0 <fiprintf>
 80054d0:	f000 f880 	bl	80055d4 <abort>
 80054d4:	4b04      	ldr	r3, [pc, #16]	@ (80054e8 <__assert_func+0x38>)
 80054d6:	461c      	mov	r4, r3
 80054d8:	e7f3      	b.n	80054c2 <__assert_func+0x12>
 80054da:	bf00      	nop
 80054dc:	20000018 	.word	0x20000018
 80054e0:	08005d9f 	.word	0x08005d9f
 80054e4:	08005dac 	.word	0x08005dac
 80054e8:	08005dda 	.word	0x08005dda

080054ec <_calloc_r>:
 80054ec:	b570      	push	{r4, r5, r6, lr}
 80054ee:	fba1 5402 	umull	r5, r4, r1, r2
 80054f2:	b934      	cbnz	r4, 8005502 <_calloc_r+0x16>
 80054f4:	4629      	mov	r1, r5
 80054f6:	f7ff f99d 	bl	8004834 <_malloc_r>
 80054fa:	4606      	mov	r6, r0
 80054fc:	b928      	cbnz	r0, 800550a <_calloc_r+0x1e>
 80054fe:	4630      	mov	r0, r6
 8005500:	bd70      	pop	{r4, r5, r6, pc}
 8005502:	220c      	movs	r2, #12
 8005504:	2600      	movs	r6, #0
 8005506:	6002      	str	r2, [r0, #0]
 8005508:	e7f9      	b.n	80054fe <_calloc_r+0x12>
 800550a:	462a      	mov	r2, r5
 800550c:	4621      	mov	r1, r4
 800550e:	f7fe fa32 	bl	8003976 <memset>
 8005512:	e7f4      	b.n	80054fe <_calloc_r+0x12>

08005514 <__ascii_mbtowc>:
 8005514:	b082      	sub	sp, #8
 8005516:	b901      	cbnz	r1, 800551a <__ascii_mbtowc+0x6>
 8005518:	a901      	add	r1, sp, #4
 800551a:	b142      	cbz	r2, 800552e <__ascii_mbtowc+0x1a>
 800551c:	b14b      	cbz	r3, 8005532 <__ascii_mbtowc+0x1e>
 800551e:	7813      	ldrb	r3, [r2, #0]
 8005520:	600b      	str	r3, [r1, #0]
 8005522:	7812      	ldrb	r2, [r2, #0]
 8005524:	1e10      	subs	r0, r2, #0
 8005526:	bf18      	it	ne
 8005528:	2001      	movne	r0, #1
 800552a:	b002      	add	sp, #8
 800552c:	4770      	bx	lr
 800552e:	4610      	mov	r0, r2
 8005530:	e7fb      	b.n	800552a <__ascii_mbtowc+0x16>
 8005532:	f06f 0001 	mvn.w	r0, #1
 8005536:	e7f8      	b.n	800552a <__ascii_mbtowc+0x16>

08005538 <_realloc_r>:
 8005538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800553c:	4607      	mov	r7, r0
 800553e:	4614      	mov	r4, r2
 8005540:	460d      	mov	r5, r1
 8005542:	b921      	cbnz	r1, 800554e <_realloc_r+0x16>
 8005544:	4611      	mov	r1, r2
 8005546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800554a:	f7ff b973 	b.w	8004834 <_malloc_r>
 800554e:	b92a      	cbnz	r2, 800555c <_realloc_r+0x24>
 8005550:	f7ff f8fe 	bl	8004750 <_free_r>
 8005554:	4625      	mov	r5, r4
 8005556:	4628      	mov	r0, r5
 8005558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800555c:	f000 f841 	bl	80055e2 <_malloc_usable_size_r>
 8005560:	4284      	cmp	r4, r0
 8005562:	4606      	mov	r6, r0
 8005564:	d802      	bhi.n	800556c <_realloc_r+0x34>
 8005566:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800556a:	d8f4      	bhi.n	8005556 <_realloc_r+0x1e>
 800556c:	4621      	mov	r1, r4
 800556e:	4638      	mov	r0, r7
 8005570:	f7ff f960 	bl	8004834 <_malloc_r>
 8005574:	4680      	mov	r8, r0
 8005576:	b908      	cbnz	r0, 800557c <_realloc_r+0x44>
 8005578:	4645      	mov	r5, r8
 800557a:	e7ec      	b.n	8005556 <_realloc_r+0x1e>
 800557c:	42b4      	cmp	r4, r6
 800557e:	4622      	mov	r2, r4
 8005580:	4629      	mov	r1, r5
 8005582:	bf28      	it	cs
 8005584:	4632      	movcs	r2, r6
 8005586:	f7ff ff85 	bl	8005494 <memcpy>
 800558a:	4629      	mov	r1, r5
 800558c:	4638      	mov	r0, r7
 800558e:	f7ff f8df 	bl	8004750 <_free_r>
 8005592:	e7f1      	b.n	8005578 <_realloc_r+0x40>

08005594 <__ascii_wctomb>:
 8005594:	4603      	mov	r3, r0
 8005596:	4608      	mov	r0, r1
 8005598:	b141      	cbz	r1, 80055ac <__ascii_wctomb+0x18>
 800559a:	2aff      	cmp	r2, #255	@ 0xff
 800559c:	d904      	bls.n	80055a8 <__ascii_wctomb+0x14>
 800559e:	228a      	movs	r2, #138	@ 0x8a
 80055a0:	f04f 30ff 	mov.w	r0, #4294967295
 80055a4:	601a      	str	r2, [r3, #0]
 80055a6:	4770      	bx	lr
 80055a8:	2001      	movs	r0, #1
 80055aa:	700a      	strb	r2, [r1, #0]
 80055ac:	4770      	bx	lr
	...

080055b0 <fiprintf>:
 80055b0:	b40e      	push	{r1, r2, r3}
 80055b2:	b503      	push	{r0, r1, lr}
 80055b4:	4601      	mov	r1, r0
 80055b6:	ab03      	add	r3, sp, #12
 80055b8:	4805      	ldr	r0, [pc, #20]	@ (80055d0 <fiprintf+0x20>)
 80055ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80055be:	6800      	ldr	r0, [r0, #0]
 80055c0:	9301      	str	r3, [sp, #4]
 80055c2:	f000 f83d 	bl	8005640 <_vfiprintf_r>
 80055c6:	b002      	add	sp, #8
 80055c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80055cc:	b003      	add	sp, #12
 80055ce:	4770      	bx	lr
 80055d0:	20000018 	.word	0x20000018

080055d4 <abort>:
 80055d4:	2006      	movs	r0, #6
 80055d6:	b508      	push	{r3, lr}
 80055d8:	f000 fa06 	bl	80059e8 <raise>
 80055dc:	2001      	movs	r0, #1
 80055de:	f7fb feae 	bl	800133e <_exit>

080055e2 <_malloc_usable_size_r>:
 80055e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055e6:	1f18      	subs	r0, r3, #4
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	bfbc      	itt	lt
 80055ec:	580b      	ldrlt	r3, [r1, r0]
 80055ee:	18c0      	addlt	r0, r0, r3
 80055f0:	4770      	bx	lr

080055f2 <__sfputc_r>:
 80055f2:	6893      	ldr	r3, [r2, #8]
 80055f4:	b410      	push	{r4}
 80055f6:	3b01      	subs	r3, #1
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	6093      	str	r3, [r2, #8]
 80055fc:	da07      	bge.n	800560e <__sfputc_r+0x1c>
 80055fe:	6994      	ldr	r4, [r2, #24]
 8005600:	42a3      	cmp	r3, r4
 8005602:	db01      	blt.n	8005608 <__sfputc_r+0x16>
 8005604:	290a      	cmp	r1, #10
 8005606:	d102      	bne.n	800560e <__sfputc_r+0x1c>
 8005608:	bc10      	pop	{r4}
 800560a:	f000 b931 	b.w	8005870 <__swbuf_r>
 800560e:	6813      	ldr	r3, [r2, #0]
 8005610:	1c58      	adds	r0, r3, #1
 8005612:	6010      	str	r0, [r2, #0]
 8005614:	7019      	strb	r1, [r3, #0]
 8005616:	4608      	mov	r0, r1
 8005618:	bc10      	pop	{r4}
 800561a:	4770      	bx	lr

0800561c <__sfputs_r>:
 800561c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561e:	4606      	mov	r6, r0
 8005620:	460f      	mov	r7, r1
 8005622:	4614      	mov	r4, r2
 8005624:	18d5      	adds	r5, r2, r3
 8005626:	42ac      	cmp	r4, r5
 8005628:	d101      	bne.n	800562e <__sfputs_r+0x12>
 800562a:	2000      	movs	r0, #0
 800562c:	e007      	b.n	800563e <__sfputs_r+0x22>
 800562e:	463a      	mov	r2, r7
 8005630:	4630      	mov	r0, r6
 8005632:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005636:	f7ff ffdc 	bl	80055f2 <__sfputc_r>
 800563a:	1c43      	adds	r3, r0, #1
 800563c:	d1f3      	bne.n	8005626 <__sfputs_r+0xa>
 800563e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005640 <_vfiprintf_r>:
 8005640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005644:	460d      	mov	r5, r1
 8005646:	4614      	mov	r4, r2
 8005648:	4698      	mov	r8, r3
 800564a:	4606      	mov	r6, r0
 800564c:	b09d      	sub	sp, #116	@ 0x74
 800564e:	b118      	cbz	r0, 8005658 <_vfiprintf_r+0x18>
 8005650:	6a03      	ldr	r3, [r0, #32]
 8005652:	b90b      	cbnz	r3, 8005658 <_vfiprintf_r+0x18>
 8005654:	f7fe f8e0 	bl	8003818 <__sinit>
 8005658:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800565a:	07d9      	lsls	r1, r3, #31
 800565c:	d405      	bmi.n	800566a <_vfiprintf_r+0x2a>
 800565e:	89ab      	ldrh	r3, [r5, #12]
 8005660:	059a      	lsls	r2, r3, #22
 8005662:	d402      	bmi.n	800566a <_vfiprintf_r+0x2a>
 8005664:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005666:	f7fe fa04 	bl	8003a72 <__retarget_lock_acquire_recursive>
 800566a:	89ab      	ldrh	r3, [r5, #12]
 800566c:	071b      	lsls	r3, r3, #28
 800566e:	d501      	bpl.n	8005674 <_vfiprintf_r+0x34>
 8005670:	692b      	ldr	r3, [r5, #16]
 8005672:	b99b      	cbnz	r3, 800569c <_vfiprintf_r+0x5c>
 8005674:	4629      	mov	r1, r5
 8005676:	4630      	mov	r0, r6
 8005678:	f000 f938 	bl	80058ec <__swsetup_r>
 800567c:	b170      	cbz	r0, 800569c <_vfiprintf_r+0x5c>
 800567e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005680:	07dc      	lsls	r4, r3, #31
 8005682:	d504      	bpl.n	800568e <_vfiprintf_r+0x4e>
 8005684:	f04f 30ff 	mov.w	r0, #4294967295
 8005688:	b01d      	add	sp, #116	@ 0x74
 800568a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800568e:	89ab      	ldrh	r3, [r5, #12]
 8005690:	0598      	lsls	r0, r3, #22
 8005692:	d4f7      	bmi.n	8005684 <_vfiprintf_r+0x44>
 8005694:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005696:	f7fe f9ed 	bl	8003a74 <__retarget_lock_release_recursive>
 800569a:	e7f3      	b.n	8005684 <_vfiprintf_r+0x44>
 800569c:	2300      	movs	r3, #0
 800569e:	9309      	str	r3, [sp, #36]	@ 0x24
 80056a0:	2320      	movs	r3, #32
 80056a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80056a6:	2330      	movs	r3, #48	@ 0x30
 80056a8:	f04f 0901 	mov.w	r9, #1
 80056ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80056b0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800585c <_vfiprintf_r+0x21c>
 80056b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80056b8:	4623      	mov	r3, r4
 80056ba:	469a      	mov	sl, r3
 80056bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056c0:	b10a      	cbz	r2, 80056c6 <_vfiprintf_r+0x86>
 80056c2:	2a25      	cmp	r2, #37	@ 0x25
 80056c4:	d1f9      	bne.n	80056ba <_vfiprintf_r+0x7a>
 80056c6:	ebba 0b04 	subs.w	fp, sl, r4
 80056ca:	d00b      	beq.n	80056e4 <_vfiprintf_r+0xa4>
 80056cc:	465b      	mov	r3, fp
 80056ce:	4622      	mov	r2, r4
 80056d0:	4629      	mov	r1, r5
 80056d2:	4630      	mov	r0, r6
 80056d4:	f7ff ffa2 	bl	800561c <__sfputs_r>
 80056d8:	3001      	adds	r0, #1
 80056da:	f000 80a7 	beq.w	800582c <_vfiprintf_r+0x1ec>
 80056de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80056e0:	445a      	add	r2, fp
 80056e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80056e4:	f89a 3000 	ldrb.w	r3, [sl]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f000 809f 	beq.w	800582c <_vfiprintf_r+0x1ec>
 80056ee:	2300      	movs	r3, #0
 80056f0:	f04f 32ff 	mov.w	r2, #4294967295
 80056f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056f8:	f10a 0a01 	add.w	sl, sl, #1
 80056fc:	9304      	str	r3, [sp, #16]
 80056fe:	9307      	str	r3, [sp, #28]
 8005700:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005704:	931a      	str	r3, [sp, #104]	@ 0x68
 8005706:	4654      	mov	r4, sl
 8005708:	2205      	movs	r2, #5
 800570a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800570e:	4853      	ldr	r0, [pc, #332]	@ (800585c <_vfiprintf_r+0x21c>)
 8005710:	f7fe f9b1 	bl	8003a76 <memchr>
 8005714:	9a04      	ldr	r2, [sp, #16]
 8005716:	b9d8      	cbnz	r0, 8005750 <_vfiprintf_r+0x110>
 8005718:	06d1      	lsls	r1, r2, #27
 800571a:	bf44      	itt	mi
 800571c:	2320      	movmi	r3, #32
 800571e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005722:	0713      	lsls	r3, r2, #28
 8005724:	bf44      	itt	mi
 8005726:	232b      	movmi	r3, #43	@ 0x2b
 8005728:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800572c:	f89a 3000 	ldrb.w	r3, [sl]
 8005730:	2b2a      	cmp	r3, #42	@ 0x2a
 8005732:	d015      	beq.n	8005760 <_vfiprintf_r+0x120>
 8005734:	4654      	mov	r4, sl
 8005736:	2000      	movs	r0, #0
 8005738:	f04f 0c0a 	mov.w	ip, #10
 800573c:	9a07      	ldr	r2, [sp, #28]
 800573e:	4621      	mov	r1, r4
 8005740:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005744:	3b30      	subs	r3, #48	@ 0x30
 8005746:	2b09      	cmp	r3, #9
 8005748:	d94b      	bls.n	80057e2 <_vfiprintf_r+0x1a2>
 800574a:	b1b0      	cbz	r0, 800577a <_vfiprintf_r+0x13a>
 800574c:	9207      	str	r2, [sp, #28]
 800574e:	e014      	b.n	800577a <_vfiprintf_r+0x13a>
 8005750:	eba0 0308 	sub.w	r3, r0, r8
 8005754:	fa09 f303 	lsl.w	r3, r9, r3
 8005758:	4313      	orrs	r3, r2
 800575a:	46a2      	mov	sl, r4
 800575c:	9304      	str	r3, [sp, #16]
 800575e:	e7d2      	b.n	8005706 <_vfiprintf_r+0xc6>
 8005760:	9b03      	ldr	r3, [sp, #12]
 8005762:	1d19      	adds	r1, r3, #4
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	9103      	str	r1, [sp, #12]
 8005768:	2b00      	cmp	r3, #0
 800576a:	bfbb      	ittet	lt
 800576c:	425b      	neglt	r3, r3
 800576e:	f042 0202 	orrlt.w	r2, r2, #2
 8005772:	9307      	strge	r3, [sp, #28]
 8005774:	9307      	strlt	r3, [sp, #28]
 8005776:	bfb8      	it	lt
 8005778:	9204      	strlt	r2, [sp, #16]
 800577a:	7823      	ldrb	r3, [r4, #0]
 800577c:	2b2e      	cmp	r3, #46	@ 0x2e
 800577e:	d10a      	bne.n	8005796 <_vfiprintf_r+0x156>
 8005780:	7863      	ldrb	r3, [r4, #1]
 8005782:	2b2a      	cmp	r3, #42	@ 0x2a
 8005784:	d132      	bne.n	80057ec <_vfiprintf_r+0x1ac>
 8005786:	9b03      	ldr	r3, [sp, #12]
 8005788:	3402      	adds	r4, #2
 800578a:	1d1a      	adds	r2, r3, #4
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	9203      	str	r2, [sp, #12]
 8005790:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005794:	9305      	str	r3, [sp, #20]
 8005796:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005860 <_vfiprintf_r+0x220>
 800579a:	2203      	movs	r2, #3
 800579c:	4650      	mov	r0, sl
 800579e:	7821      	ldrb	r1, [r4, #0]
 80057a0:	f7fe f969 	bl	8003a76 <memchr>
 80057a4:	b138      	cbz	r0, 80057b6 <_vfiprintf_r+0x176>
 80057a6:	2240      	movs	r2, #64	@ 0x40
 80057a8:	9b04      	ldr	r3, [sp, #16]
 80057aa:	eba0 000a 	sub.w	r0, r0, sl
 80057ae:	4082      	lsls	r2, r0
 80057b0:	4313      	orrs	r3, r2
 80057b2:	3401      	adds	r4, #1
 80057b4:	9304      	str	r3, [sp, #16]
 80057b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057ba:	2206      	movs	r2, #6
 80057bc:	4829      	ldr	r0, [pc, #164]	@ (8005864 <_vfiprintf_r+0x224>)
 80057be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80057c2:	f7fe f958 	bl	8003a76 <memchr>
 80057c6:	2800      	cmp	r0, #0
 80057c8:	d03f      	beq.n	800584a <_vfiprintf_r+0x20a>
 80057ca:	4b27      	ldr	r3, [pc, #156]	@ (8005868 <_vfiprintf_r+0x228>)
 80057cc:	bb1b      	cbnz	r3, 8005816 <_vfiprintf_r+0x1d6>
 80057ce:	9b03      	ldr	r3, [sp, #12]
 80057d0:	3307      	adds	r3, #7
 80057d2:	f023 0307 	bic.w	r3, r3, #7
 80057d6:	3308      	adds	r3, #8
 80057d8:	9303      	str	r3, [sp, #12]
 80057da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057dc:	443b      	add	r3, r7
 80057de:	9309      	str	r3, [sp, #36]	@ 0x24
 80057e0:	e76a      	b.n	80056b8 <_vfiprintf_r+0x78>
 80057e2:	460c      	mov	r4, r1
 80057e4:	2001      	movs	r0, #1
 80057e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80057ea:	e7a8      	b.n	800573e <_vfiprintf_r+0xfe>
 80057ec:	2300      	movs	r3, #0
 80057ee:	f04f 0c0a 	mov.w	ip, #10
 80057f2:	4619      	mov	r1, r3
 80057f4:	3401      	adds	r4, #1
 80057f6:	9305      	str	r3, [sp, #20]
 80057f8:	4620      	mov	r0, r4
 80057fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057fe:	3a30      	subs	r2, #48	@ 0x30
 8005800:	2a09      	cmp	r2, #9
 8005802:	d903      	bls.n	800580c <_vfiprintf_r+0x1cc>
 8005804:	2b00      	cmp	r3, #0
 8005806:	d0c6      	beq.n	8005796 <_vfiprintf_r+0x156>
 8005808:	9105      	str	r1, [sp, #20]
 800580a:	e7c4      	b.n	8005796 <_vfiprintf_r+0x156>
 800580c:	4604      	mov	r4, r0
 800580e:	2301      	movs	r3, #1
 8005810:	fb0c 2101 	mla	r1, ip, r1, r2
 8005814:	e7f0      	b.n	80057f8 <_vfiprintf_r+0x1b8>
 8005816:	ab03      	add	r3, sp, #12
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	462a      	mov	r2, r5
 800581c:	4630      	mov	r0, r6
 800581e:	4b13      	ldr	r3, [pc, #76]	@ (800586c <_vfiprintf_r+0x22c>)
 8005820:	a904      	add	r1, sp, #16
 8005822:	f7fd fbb1 	bl	8002f88 <_printf_float>
 8005826:	4607      	mov	r7, r0
 8005828:	1c78      	adds	r0, r7, #1
 800582a:	d1d6      	bne.n	80057da <_vfiprintf_r+0x19a>
 800582c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800582e:	07d9      	lsls	r1, r3, #31
 8005830:	d405      	bmi.n	800583e <_vfiprintf_r+0x1fe>
 8005832:	89ab      	ldrh	r3, [r5, #12]
 8005834:	059a      	lsls	r2, r3, #22
 8005836:	d402      	bmi.n	800583e <_vfiprintf_r+0x1fe>
 8005838:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800583a:	f7fe f91b 	bl	8003a74 <__retarget_lock_release_recursive>
 800583e:	89ab      	ldrh	r3, [r5, #12]
 8005840:	065b      	lsls	r3, r3, #25
 8005842:	f53f af1f 	bmi.w	8005684 <_vfiprintf_r+0x44>
 8005846:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005848:	e71e      	b.n	8005688 <_vfiprintf_r+0x48>
 800584a:	ab03      	add	r3, sp, #12
 800584c:	9300      	str	r3, [sp, #0]
 800584e:	462a      	mov	r2, r5
 8005850:	4630      	mov	r0, r6
 8005852:	4b06      	ldr	r3, [pc, #24]	@ (800586c <_vfiprintf_r+0x22c>)
 8005854:	a904      	add	r1, sp, #16
 8005856:	f7fd fe35 	bl	80034c4 <_printf_i>
 800585a:	e7e4      	b.n	8005826 <_vfiprintf_r+0x1e6>
 800585c:	08005d84 	.word	0x08005d84
 8005860:	08005d8a 	.word	0x08005d8a
 8005864:	08005d8e 	.word	0x08005d8e
 8005868:	08002f89 	.word	0x08002f89
 800586c:	0800561d 	.word	0x0800561d

08005870 <__swbuf_r>:
 8005870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005872:	460e      	mov	r6, r1
 8005874:	4614      	mov	r4, r2
 8005876:	4605      	mov	r5, r0
 8005878:	b118      	cbz	r0, 8005882 <__swbuf_r+0x12>
 800587a:	6a03      	ldr	r3, [r0, #32]
 800587c:	b90b      	cbnz	r3, 8005882 <__swbuf_r+0x12>
 800587e:	f7fd ffcb 	bl	8003818 <__sinit>
 8005882:	69a3      	ldr	r3, [r4, #24]
 8005884:	60a3      	str	r3, [r4, #8]
 8005886:	89a3      	ldrh	r3, [r4, #12]
 8005888:	071a      	lsls	r2, r3, #28
 800588a:	d501      	bpl.n	8005890 <__swbuf_r+0x20>
 800588c:	6923      	ldr	r3, [r4, #16]
 800588e:	b943      	cbnz	r3, 80058a2 <__swbuf_r+0x32>
 8005890:	4621      	mov	r1, r4
 8005892:	4628      	mov	r0, r5
 8005894:	f000 f82a 	bl	80058ec <__swsetup_r>
 8005898:	b118      	cbz	r0, 80058a2 <__swbuf_r+0x32>
 800589a:	f04f 37ff 	mov.w	r7, #4294967295
 800589e:	4638      	mov	r0, r7
 80058a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058a2:	6823      	ldr	r3, [r4, #0]
 80058a4:	6922      	ldr	r2, [r4, #16]
 80058a6:	b2f6      	uxtb	r6, r6
 80058a8:	1a98      	subs	r0, r3, r2
 80058aa:	6963      	ldr	r3, [r4, #20]
 80058ac:	4637      	mov	r7, r6
 80058ae:	4283      	cmp	r3, r0
 80058b0:	dc05      	bgt.n	80058be <__swbuf_r+0x4e>
 80058b2:	4621      	mov	r1, r4
 80058b4:	4628      	mov	r0, r5
 80058b6:	f7ff fd9b 	bl	80053f0 <_fflush_r>
 80058ba:	2800      	cmp	r0, #0
 80058bc:	d1ed      	bne.n	800589a <__swbuf_r+0x2a>
 80058be:	68a3      	ldr	r3, [r4, #8]
 80058c0:	3b01      	subs	r3, #1
 80058c2:	60a3      	str	r3, [r4, #8]
 80058c4:	6823      	ldr	r3, [r4, #0]
 80058c6:	1c5a      	adds	r2, r3, #1
 80058c8:	6022      	str	r2, [r4, #0]
 80058ca:	701e      	strb	r6, [r3, #0]
 80058cc:	6962      	ldr	r2, [r4, #20]
 80058ce:	1c43      	adds	r3, r0, #1
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d004      	beq.n	80058de <__swbuf_r+0x6e>
 80058d4:	89a3      	ldrh	r3, [r4, #12]
 80058d6:	07db      	lsls	r3, r3, #31
 80058d8:	d5e1      	bpl.n	800589e <__swbuf_r+0x2e>
 80058da:	2e0a      	cmp	r6, #10
 80058dc:	d1df      	bne.n	800589e <__swbuf_r+0x2e>
 80058de:	4621      	mov	r1, r4
 80058e0:	4628      	mov	r0, r5
 80058e2:	f7ff fd85 	bl	80053f0 <_fflush_r>
 80058e6:	2800      	cmp	r0, #0
 80058e8:	d0d9      	beq.n	800589e <__swbuf_r+0x2e>
 80058ea:	e7d6      	b.n	800589a <__swbuf_r+0x2a>

080058ec <__swsetup_r>:
 80058ec:	b538      	push	{r3, r4, r5, lr}
 80058ee:	4b29      	ldr	r3, [pc, #164]	@ (8005994 <__swsetup_r+0xa8>)
 80058f0:	4605      	mov	r5, r0
 80058f2:	6818      	ldr	r0, [r3, #0]
 80058f4:	460c      	mov	r4, r1
 80058f6:	b118      	cbz	r0, 8005900 <__swsetup_r+0x14>
 80058f8:	6a03      	ldr	r3, [r0, #32]
 80058fa:	b90b      	cbnz	r3, 8005900 <__swsetup_r+0x14>
 80058fc:	f7fd ff8c 	bl	8003818 <__sinit>
 8005900:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005904:	0719      	lsls	r1, r3, #28
 8005906:	d422      	bmi.n	800594e <__swsetup_r+0x62>
 8005908:	06da      	lsls	r2, r3, #27
 800590a:	d407      	bmi.n	800591c <__swsetup_r+0x30>
 800590c:	2209      	movs	r2, #9
 800590e:	602a      	str	r2, [r5, #0]
 8005910:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005914:	f04f 30ff 	mov.w	r0, #4294967295
 8005918:	81a3      	strh	r3, [r4, #12]
 800591a:	e033      	b.n	8005984 <__swsetup_r+0x98>
 800591c:	0758      	lsls	r0, r3, #29
 800591e:	d512      	bpl.n	8005946 <__swsetup_r+0x5a>
 8005920:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005922:	b141      	cbz	r1, 8005936 <__swsetup_r+0x4a>
 8005924:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005928:	4299      	cmp	r1, r3
 800592a:	d002      	beq.n	8005932 <__swsetup_r+0x46>
 800592c:	4628      	mov	r0, r5
 800592e:	f7fe ff0f 	bl	8004750 <_free_r>
 8005932:	2300      	movs	r3, #0
 8005934:	6363      	str	r3, [r4, #52]	@ 0x34
 8005936:	89a3      	ldrh	r3, [r4, #12]
 8005938:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800593c:	81a3      	strh	r3, [r4, #12]
 800593e:	2300      	movs	r3, #0
 8005940:	6063      	str	r3, [r4, #4]
 8005942:	6923      	ldr	r3, [r4, #16]
 8005944:	6023      	str	r3, [r4, #0]
 8005946:	89a3      	ldrh	r3, [r4, #12]
 8005948:	f043 0308 	orr.w	r3, r3, #8
 800594c:	81a3      	strh	r3, [r4, #12]
 800594e:	6923      	ldr	r3, [r4, #16]
 8005950:	b94b      	cbnz	r3, 8005966 <__swsetup_r+0x7a>
 8005952:	89a3      	ldrh	r3, [r4, #12]
 8005954:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005958:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800595c:	d003      	beq.n	8005966 <__swsetup_r+0x7a>
 800595e:	4621      	mov	r1, r4
 8005960:	4628      	mov	r0, r5
 8005962:	f000 f882 	bl	8005a6a <__smakebuf_r>
 8005966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800596a:	f013 0201 	ands.w	r2, r3, #1
 800596e:	d00a      	beq.n	8005986 <__swsetup_r+0x9a>
 8005970:	2200      	movs	r2, #0
 8005972:	60a2      	str	r2, [r4, #8]
 8005974:	6962      	ldr	r2, [r4, #20]
 8005976:	4252      	negs	r2, r2
 8005978:	61a2      	str	r2, [r4, #24]
 800597a:	6922      	ldr	r2, [r4, #16]
 800597c:	b942      	cbnz	r2, 8005990 <__swsetup_r+0xa4>
 800597e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005982:	d1c5      	bne.n	8005910 <__swsetup_r+0x24>
 8005984:	bd38      	pop	{r3, r4, r5, pc}
 8005986:	0799      	lsls	r1, r3, #30
 8005988:	bf58      	it	pl
 800598a:	6962      	ldrpl	r2, [r4, #20]
 800598c:	60a2      	str	r2, [r4, #8]
 800598e:	e7f4      	b.n	800597a <__swsetup_r+0x8e>
 8005990:	2000      	movs	r0, #0
 8005992:	e7f7      	b.n	8005984 <__swsetup_r+0x98>
 8005994:	20000018 	.word	0x20000018

08005998 <_raise_r>:
 8005998:	291f      	cmp	r1, #31
 800599a:	b538      	push	{r3, r4, r5, lr}
 800599c:	4605      	mov	r5, r0
 800599e:	460c      	mov	r4, r1
 80059a0:	d904      	bls.n	80059ac <_raise_r+0x14>
 80059a2:	2316      	movs	r3, #22
 80059a4:	6003      	str	r3, [r0, #0]
 80059a6:	f04f 30ff 	mov.w	r0, #4294967295
 80059aa:	bd38      	pop	{r3, r4, r5, pc}
 80059ac:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80059ae:	b112      	cbz	r2, 80059b6 <_raise_r+0x1e>
 80059b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80059b4:	b94b      	cbnz	r3, 80059ca <_raise_r+0x32>
 80059b6:	4628      	mov	r0, r5
 80059b8:	f000 f830 	bl	8005a1c <_getpid_r>
 80059bc:	4622      	mov	r2, r4
 80059be:	4601      	mov	r1, r0
 80059c0:	4628      	mov	r0, r5
 80059c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059c6:	f000 b817 	b.w	80059f8 <_kill_r>
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d00a      	beq.n	80059e4 <_raise_r+0x4c>
 80059ce:	1c59      	adds	r1, r3, #1
 80059d0:	d103      	bne.n	80059da <_raise_r+0x42>
 80059d2:	2316      	movs	r3, #22
 80059d4:	6003      	str	r3, [r0, #0]
 80059d6:	2001      	movs	r0, #1
 80059d8:	e7e7      	b.n	80059aa <_raise_r+0x12>
 80059da:	2100      	movs	r1, #0
 80059dc:	4620      	mov	r0, r4
 80059de:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80059e2:	4798      	blx	r3
 80059e4:	2000      	movs	r0, #0
 80059e6:	e7e0      	b.n	80059aa <_raise_r+0x12>

080059e8 <raise>:
 80059e8:	4b02      	ldr	r3, [pc, #8]	@ (80059f4 <raise+0xc>)
 80059ea:	4601      	mov	r1, r0
 80059ec:	6818      	ldr	r0, [r3, #0]
 80059ee:	f7ff bfd3 	b.w	8005998 <_raise_r>
 80059f2:	bf00      	nop
 80059f4:	20000018 	.word	0x20000018

080059f8 <_kill_r>:
 80059f8:	b538      	push	{r3, r4, r5, lr}
 80059fa:	2300      	movs	r3, #0
 80059fc:	4d06      	ldr	r5, [pc, #24]	@ (8005a18 <_kill_r+0x20>)
 80059fe:	4604      	mov	r4, r0
 8005a00:	4608      	mov	r0, r1
 8005a02:	4611      	mov	r1, r2
 8005a04:	602b      	str	r3, [r5, #0]
 8005a06:	f7fb fc8a 	bl	800131e <_kill>
 8005a0a:	1c43      	adds	r3, r0, #1
 8005a0c:	d102      	bne.n	8005a14 <_kill_r+0x1c>
 8005a0e:	682b      	ldr	r3, [r5, #0]
 8005a10:	b103      	cbz	r3, 8005a14 <_kill_r+0x1c>
 8005a12:	6023      	str	r3, [r4, #0]
 8005a14:	bd38      	pop	{r3, r4, r5, pc}
 8005a16:	bf00      	nop
 8005a18:	200004b8 	.word	0x200004b8

08005a1c <_getpid_r>:
 8005a1c:	f7fb bc78 	b.w	8001310 <_getpid>

08005a20 <__swhatbuf_r>:
 8005a20:	b570      	push	{r4, r5, r6, lr}
 8005a22:	460c      	mov	r4, r1
 8005a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a28:	4615      	mov	r5, r2
 8005a2a:	2900      	cmp	r1, #0
 8005a2c:	461e      	mov	r6, r3
 8005a2e:	b096      	sub	sp, #88	@ 0x58
 8005a30:	da0c      	bge.n	8005a4c <__swhatbuf_r+0x2c>
 8005a32:	89a3      	ldrh	r3, [r4, #12]
 8005a34:	2100      	movs	r1, #0
 8005a36:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005a3a:	bf14      	ite	ne
 8005a3c:	2340      	movne	r3, #64	@ 0x40
 8005a3e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005a42:	2000      	movs	r0, #0
 8005a44:	6031      	str	r1, [r6, #0]
 8005a46:	602b      	str	r3, [r5, #0]
 8005a48:	b016      	add	sp, #88	@ 0x58
 8005a4a:	bd70      	pop	{r4, r5, r6, pc}
 8005a4c:	466a      	mov	r2, sp
 8005a4e:	f000 f849 	bl	8005ae4 <_fstat_r>
 8005a52:	2800      	cmp	r0, #0
 8005a54:	dbed      	blt.n	8005a32 <__swhatbuf_r+0x12>
 8005a56:	9901      	ldr	r1, [sp, #4]
 8005a58:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005a5c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005a60:	4259      	negs	r1, r3
 8005a62:	4159      	adcs	r1, r3
 8005a64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a68:	e7eb      	b.n	8005a42 <__swhatbuf_r+0x22>

08005a6a <__smakebuf_r>:
 8005a6a:	898b      	ldrh	r3, [r1, #12]
 8005a6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a6e:	079d      	lsls	r5, r3, #30
 8005a70:	4606      	mov	r6, r0
 8005a72:	460c      	mov	r4, r1
 8005a74:	d507      	bpl.n	8005a86 <__smakebuf_r+0x1c>
 8005a76:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005a7a:	6023      	str	r3, [r4, #0]
 8005a7c:	6123      	str	r3, [r4, #16]
 8005a7e:	2301      	movs	r3, #1
 8005a80:	6163      	str	r3, [r4, #20]
 8005a82:	b003      	add	sp, #12
 8005a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a86:	466a      	mov	r2, sp
 8005a88:	ab01      	add	r3, sp, #4
 8005a8a:	f7ff ffc9 	bl	8005a20 <__swhatbuf_r>
 8005a8e:	9f00      	ldr	r7, [sp, #0]
 8005a90:	4605      	mov	r5, r0
 8005a92:	4639      	mov	r1, r7
 8005a94:	4630      	mov	r0, r6
 8005a96:	f7fe fecd 	bl	8004834 <_malloc_r>
 8005a9a:	b948      	cbnz	r0, 8005ab0 <__smakebuf_r+0x46>
 8005a9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005aa0:	059a      	lsls	r2, r3, #22
 8005aa2:	d4ee      	bmi.n	8005a82 <__smakebuf_r+0x18>
 8005aa4:	f023 0303 	bic.w	r3, r3, #3
 8005aa8:	f043 0302 	orr.w	r3, r3, #2
 8005aac:	81a3      	strh	r3, [r4, #12]
 8005aae:	e7e2      	b.n	8005a76 <__smakebuf_r+0xc>
 8005ab0:	89a3      	ldrh	r3, [r4, #12]
 8005ab2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005ab6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005aba:	81a3      	strh	r3, [r4, #12]
 8005abc:	9b01      	ldr	r3, [sp, #4]
 8005abe:	6020      	str	r0, [r4, #0]
 8005ac0:	b15b      	cbz	r3, 8005ada <__smakebuf_r+0x70>
 8005ac2:	4630      	mov	r0, r6
 8005ac4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ac8:	f000 f81e 	bl	8005b08 <_isatty_r>
 8005acc:	b128      	cbz	r0, 8005ada <__smakebuf_r+0x70>
 8005ace:	89a3      	ldrh	r3, [r4, #12]
 8005ad0:	f023 0303 	bic.w	r3, r3, #3
 8005ad4:	f043 0301 	orr.w	r3, r3, #1
 8005ad8:	81a3      	strh	r3, [r4, #12]
 8005ada:	89a3      	ldrh	r3, [r4, #12]
 8005adc:	431d      	orrs	r5, r3
 8005ade:	81a5      	strh	r5, [r4, #12]
 8005ae0:	e7cf      	b.n	8005a82 <__smakebuf_r+0x18>
	...

08005ae4 <_fstat_r>:
 8005ae4:	b538      	push	{r3, r4, r5, lr}
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	4d06      	ldr	r5, [pc, #24]	@ (8005b04 <_fstat_r+0x20>)
 8005aea:	4604      	mov	r4, r0
 8005aec:	4608      	mov	r0, r1
 8005aee:	4611      	mov	r1, r2
 8005af0:	602b      	str	r3, [r5, #0]
 8005af2:	f7fb fc73 	bl	80013dc <_fstat>
 8005af6:	1c43      	adds	r3, r0, #1
 8005af8:	d102      	bne.n	8005b00 <_fstat_r+0x1c>
 8005afa:	682b      	ldr	r3, [r5, #0]
 8005afc:	b103      	cbz	r3, 8005b00 <_fstat_r+0x1c>
 8005afe:	6023      	str	r3, [r4, #0]
 8005b00:	bd38      	pop	{r3, r4, r5, pc}
 8005b02:	bf00      	nop
 8005b04:	200004b8 	.word	0x200004b8

08005b08 <_isatty_r>:
 8005b08:	b538      	push	{r3, r4, r5, lr}
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	4d05      	ldr	r5, [pc, #20]	@ (8005b24 <_isatty_r+0x1c>)
 8005b0e:	4604      	mov	r4, r0
 8005b10:	4608      	mov	r0, r1
 8005b12:	602b      	str	r3, [r5, #0]
 8005b14:	f7fb fc71 	bl	80013fa <_isatty>
 8005b18:	1c43      	adds	r3, r0, #1
 8005b1a:	d102      	bne.n	8005b22 <_isatty_r+0x1a>
 8005b1c:	682b      	ldr	r3, [r5, #0]
 8005b1e:	b103      	cbz	r3, 8005b22 <_isatty_r+0x1a>
 8005b20:	6023      	str	r3, [r4, #0]
 8005b22:	bd38      	pop	{r3, r4, r5, pc}
 8005b24:	200004b8 	.word	0x200004b8

08005b28 <round>:
 8005b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b2a:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005b2e:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 8005b32:	2a13      	cmp	r2, #19
 8005b34:	4604      	mov	r4, r0
 8005b36:	460d      	mov	r5, r1
 8005b38:	460b      	mov	r3, r1
 8005b3a:	dc1a      	bgt.n	8005b72 <round+0x4a>
 8005b3c:	2a00      	cmp	r2, #0
 8005b3e:	da0b      	bge.n	8005b58 <round+0x30>
 8005b40:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8005b44:	3201      	adds	r2, #1
 8005b46:	bf04      	itt	eq
 8005b48:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8005b4c:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8005b50:	2200      	movs	r2, #0
 8005b52:	461d      	mov	r5, r3
 8005b54:	4614      	mov	r4, r2
 8005b56:	e016      	b.n	8005b86 <round+0x5e>
 8005b58:	4815      	ldr	r0, [pc, #84]	@ (8005bb0 <round+0x88>)
 8005b5a:	4110      	asrs	r0, r2
 8005b5c:	4001      	ands	r1, r0
 8005b5e:	4321      	orrs	r1, r4
 8005b60:	d011      	beq.n	8005b86 <round+0x5e>
 8005b62:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8005b66:	fa41 f202 	asr.w	r2, r1, r2
 8005b6a:	4413      	add	r3, r2
 8005b6c:	ea23 0300 	bic.w	r3, r3, r0
 8005b70:	e7ee      	b.n	8005b50 <round+0x28>
 8005b72:	2a33      	cmp	r2, #51	@ 0x33
 8005b74:	dd0a      	ble.n	8005b8c <round+0x64>
 8005b76:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8005b7a:	d104      	bne.n	8005b86 <round+0x5e>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	f7fa faf5 	bl	800016c <__adddf3>
 8005b82:	4604      	mov	r4, r0
 8005b84:	460d      	mov	r5, r1
 8005b86:	4620      	mov	r0, r4
 8005b88:	4629      	mov	r1, r5
 8005b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b90:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8005b94:	40f8      	lsrs	r0, r7
 8005b96:	4220      	tst	r0, r4
 8005b98:	d0f5      	beq.n	8005b86 <round+0x5e>
 8005b9a:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	408a      	lsls	r2, r1
 8005ba2:	1912      	adds	r2, r2, r4
 8005ba4:	bf28      	it	cs
 8005ba6:	3301      	addcs	r3, #1
 8005ba8:	ea22 0200 	bic.w	r2, r2, r0
 8005bac:	e7d1      	b.n	8005b52 <round+0x2a>
 8005bae:	bf00      	nop
 8005bb0:	000fffff 	.word	0x000fffff

08005bb4 <_init>:
 8005bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bb6:	bf00      	nop
 8005bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bba:	bc08      	pop	{r3}
 8005bbc:	469e      	mov	lr, r3
 8005bbe:	4770      	bx	lr

08005bc0 <_fini>:
 8005bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bc2:	bf00      	nop
 8005bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bc6:	bc08      	pop	{r3}
 8005bc8:	469e      	mov	lr, r3
 8005bca:	4770      	bx	lr
